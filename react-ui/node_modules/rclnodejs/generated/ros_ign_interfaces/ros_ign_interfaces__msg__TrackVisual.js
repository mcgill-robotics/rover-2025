// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const Vector3Wrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js');
const TrackVisualRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  name: primitiveTypes.string,
  id: primitiveTypes.uint32,
  inherit_orientation: primitiveTypes.bool,
  min_dist: primitiveTypes.float64,
  max_dist: primitiveTypes.float64,
  is_static: primitiveTypes.bool,
  use_model_frame: primitiveTypes.bool,
  xyz: Vector3Wrapper.refObjectType,
  inherit_yaw: primitiveTypes.bool,
});
const TrackVisualRefArray = ArrayType(TrackVisualRefStruct);
const TrackVisualRefStructArray = StructType({
  data: TrackVisualRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class TrackVisualWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new TrackVisualRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._idIntialized = true;
      this._inherit_orientationIntialized = true;
      this._min_distIntialized = true;
      this._max_distIntialized = true;
      this._is_staticIntialized = true;
      this._use_model_frameIntialized = true;
      this._wrapperFields.xyz =  new Vector3Wrapper(other._wrapperFields.xyz);
      this._inherit_yawIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new TrackVisualRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._idIntialized = false;
    this._inherit_orientationIntialized = false;
    this._min_distIntialized = false;
    this._max_distIntialized = false;
    this._is_staticIntialized = false;
    this._use_model_frameIntialized = false;
    this._wrapperFields.xyz = new Vector3Wrapper();
    this._inherit_yawIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new TrackVisualWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new TrackVisualArrayWrapper;
  }
  static get ArrayType() {
    return TrackVisualArrayWrapper;
  }
  static get refObjectArrayType() {
    return TrackVisualRefStructArray
  }
  static get refObjectType() {
    return TrackVisualRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in TrackVisual');
      }
      if (checkConsistency && !this._idIntialized) {
        throw new TypeError('Invalid argument: id in TrackVisual');
      }
      if (checkConsistency && !this._inherit_orientationIntialized) {
        throw new TypeError('Invalid argument: inherit_orientation in TrackVisual');
      }
      if (checkConsistency && !this._min_distIntialized) {
        throw new TypeError('Invalid argument: min_dist in TrackVisual');
      }
      if (checkConsistency && !this._max_distIntialized) {
        throw new TypeError('Invalid argument: max_dist in TrackVisual');
      }
      if (checkConsistency && !this._is_staticIntialized) {
        throw new TypeError('Invalid argument: is_static in TrackVisual');
      }
      if (checkConsistency && !this._use_model_frameIntialized) {
        throw new TypeError('Invalid argument: use_model_frame in TrackVisual');
      }
      if (checkConsistency && !this._inherit_yawIntialized) {
        throw new TypeError('Invalid argument: inherit_yaw in TrackVisual');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    this._wrapperFields.xyz.freeze(own, checkConsistency);
    this._refObject.xyz = this._wrapperFields.xyz.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._idIntialized = true;
    this._refObject.id = refObject.id;
    this._inherit_orientationIntialized = true;
    this._refObject.inherit_orientation = refObject.inherit_orientation;
    this._min_distIntialized = true;
    this._refObject.min_dist = refObject.min_dist;
    this._max_distIntialized = true;
    this._refObject.max_dist = refObject.max_dist;
    this._is_staticIntialized = true;
    this._refObject.is_static = refObject.is_static;
    this._use_model_frameIntialized = true;
    this._refObject.use_model_frame = refObject.use_model_frame;
    this._wrapperFields.xyz.copyRefObject(refObject.xyz);
    this._inherit_yawIntialized = true;
    this._refObject.inherit_yaw = refObject.inherit_yaw;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.name);
    Vector3Wrapper.freeStruct(refObject.xyz);
  }
  static destoryRawROS(msg) {
    TrackVisualWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_ign_interfaces', subFolder: 'msg', interfaceName: 'TrackVisual'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._refObject.id;
  }
  set id(value) {
    this._idIntialized = true;
    this._refObject.id = value;
  }
  get inherit_orientation() {
    if (!this._inherit_orientationIntialized) {
      return undefined;
    }
    return this._refObject.inherit_orientation;
  }
  set inherit_orientation(value) {
    this._inherit_orientationIntialized = true;
    this._refObject.inherit_orientation = value;
  }
  get min_dist() {
    if (!this._min_distIntialized) {
      return undefined;
    }
    return this._refObject.min_dist;
  }
  set min_dist(value) {
    this._min_distIntialized = true;
    this._refObject.min_dist = value;
  }
  get max_dist() {
    if (!this._max_distIntialized) {
      return undefined;
    }
    return this._refObject.max_dist;
  }
  set max_dist(value) {
    this._max_distIntialized = true;
    this._refObject.max_dist = value;
  }
  get is_static() {
    if (!this._is_staticIntialized) {
      return undefined;
    }
    return this._refObject.is_static;
  }
  set is_static(value) {
    this._is_staticIntialized = true;
    this._refObject.is_static = value;
  }
  get use_model_frame() {
    if (!this._use_model_frameIntialized) {
      return undefined;
    }
    return this._refObject.use_model_frame;
  }
  set use_model_frame(value) {
    this._use_model_frameIntialized = true;
    this._refObject.use_model_frame = value;
  }
  get xyz() {
    return this._wrapperFields.xyz;
  }
  set xyz(value) {
    if (value instanceof Vector3Wrapper) {
      this._wrapperFields.xyz.copy(value);
    } else {
      this._wrapperFields.xyz.copy(new Vector3Wrapper(value));
    }
  }
  get inherit_yaw() {
    if (!this._inherit_yawIntialized) {
      return undefined;
    }
    return this._refObject.inherit_yaw;
  }
  set inherit_yaw(value) {
    this._inherit_yawIntialized = true;
    this._refObject.inherit_yaw = value;
  }
  copyRefObject(refObject) {
    this._refObject = new TrackVisualRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._idIntialized = true;
    this._inherit_orientationIntialized = true;
    this._min_distIntialized = true;
    this._max_distIntialized = true;
    this._is_staticIntialized = true;
    this._use_model_frameIntialized = true;
    this._wrapperFields.xyz.copyRefObject(this._refObject.xyz);
    this._inherit_yawIntialized = true;
  }
  copy(other) {
    this._refObject = new TrackVisualRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._idIntialized = true;
    this._inherit_orientationIntialized = true;
    this._min_distIntialized = true;
    this._max_distIntialized = true;
    this._is_staticIntialized = true;
    this._use_model_frameIntialized = true;
    this._wrapperFields.xyz.copy(other._wrapperFields.xyz);
    this._inherit_yawIntialized = true;
  }
  static get classType() {
    return TrackVisualWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"inherit_orientation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"min_dist","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_dist","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_static","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"use_model_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"xyz","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"inherit_yaw","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ros_ign_interfaces","type":"TrackVisual","stringUpperBound":null,"isPrimitiveType":false},"msgName":"TrackVisual"};
  }
  hasMember(name) {
    let memberNames = ["header","name","id","inherit_orientation","min_dist","max_dist","is_static","use_model_frame","xyz","inherit_yaw"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class TrackVisualArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof TrackVisualWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new TrackVisualWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TrackVisualArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TrackVisualArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new TrackVisualRefArray(size);
    this._refObject = new TrackVisualRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new TrackVisualWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof TrackVisualArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "TrackVisualArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      TrackVisualWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return TrackVisualWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return TrackVisualArrayWrapper;
  }
}
module.exports = TrackVisualWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "inherit_orientation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "min_dist",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_dist",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_static",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "use_model_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "xyz",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "inherit_yaw",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ros_ign_interfaces",
    "type": "TrackVisual",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "TrackVisual"
}
*/
