// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const TrackVisualWrapper = require('../../generated/ros_ign_interfaces/ros_ign_interfaces__msg__TrackVisual.js');
const GuiCameraRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  name: primitiveTypes.string,
  view_controller: primitiveTypes.string,
  pose: PoseWrapper.refObjectType,
  track: TrackVisualWrapper.refObjectType,
  projection_type: primitiveTypes.string,
});
const GuiCameraRefArray = ArrayType(GuiCameraRefStruct);
const GuiCameraRefStructArray = StructType({
  data: GuiCameraRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GuiCameraWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GuiCameraRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._view_controllerIntialized = true;
      this._wrapperFields.view_controller =  new StringWrapper(other._wrapperFields.view_controller);
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._wrapperFields.track =  new TrackVisualWrapper(other._wrapperFields.track);
      this._projection_typeIntialized = true;
      this._wrapperFields.projection_type =  new StringWrapper(other._wrapperFields.projection_type);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GuiCameraRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._view_controllerIntialized = false;
    this._wrapperFields.view_controller = new StringWrapper();
    this._wrapperFields.pose = new PoseWrapper();
    this._wrapperFields.track = new TrackVisualWrapper();
    this._projection_typeIntialized = false;
    this._wrapperFields.projection_type = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new GuiCameraWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GuiCameraArrayWrapper;
  }
  static get ArrayType() {
    return GuiCameraArrayWrapper;
  }
  static get refObjectArrayType() {
    return GuiCameraRefStructArray
  }
  static get refObjectType() {
    return GuiCameraRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in GuiCamera');
      }
      if (checkConsistency && !this._view_controllerIntialized) {
        throw new TypeError('Invalid argument: view_controller in GuiCamera');
      }
      if (checkConsistency && !this._projection_typeIntialized) {
        throw new TypeError('Invalid argument: projection_type in GuiCamera');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    if (own) {
      this._wrapperFields.view_controller.freeze(own, checkConsistency);
    }
    this._refObject.view_controller = this._wrapperFields.view_controller.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    this._wrapperFields.track.freeze(own, checkConsistency);
    this._refObject.track = this._wrapperFields.track.refObject;
    if (own) {
      this._wrapperFields.projection_type.freeze(own, checkConsistency);
    }
    this._refObject.projection_type = this._wrapperFields.projection_type.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._view_controllerIntialized = true;
    this._wrapperFields.view_controller.data = refObject.view_controller.data;
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._wrapperFields.track.copyRefObject(refObject.track);
    this._projection_typeIntialized = true;
    this._wrapperFields.projection_type.data = refObject.projection_type.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.name);
    StringWrapper.freeStruct(refObject.view_controller);
    PoseWrapper.freeStruct(refObject.pose);
    TrackVisualWrapper.freeStruct(refObject.track);
    StringWrapper.freeStruct(refObject.projection_type);
  }
  static destoryRawROS(msg) {
    GuiCameraWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_ign_interfaces', subFolder: 'msg', interfaceName: 'GuiCamera'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get view_controller() {
    if (!this._view_controllerIntialized) {
      return undefined;
    }
    return this._wrapperFields.view_controller.data;
  }
  set view_controller(value) {
    this._view_controllerIntialized = true;
    this._wrapperFields.view_controller.data = value;
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get track() {
    return this._wrapperFields.track;
  }
  set track(value) {
    if (value instanceof TrackVisualWrapper) {
      this._wrapperFields.track.copy(value);
    } else {
      this._wrapperFields.track.copy(new TrackVisualWrapper(value));
    }
  }
  get projection_type() {
    if (!this._projection_typeIntialized) {
      return undefined;
    }
    return this._wrapperFields.projection_type.data;
  }
  set projection_type(value) {
    this._projection_typeIntialized = true;
    this._wrapperFields.projection_type.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GuiCameraRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._view_controllerIntialized = true;
    this._wrapperFields.view_controller.copyRefObject(this._refObject.view_controller);
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._wrapperFields.track.copyRefObject(this._refObject.track);
    this._projection_typeIntialized = true;
    this._wrapperFields.projection_type.copyRefObject(this._refObject.projection_type);
  }
  copy(other) {
    this._refObject = new GuiCameraRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._view_controllerIntialized = true;
    this._wrapperFields.view_controller.copy(other._wrapperFields.view_controller);
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._wrapperFields.track.copy(other._wrapperFields.track);
    this._projection_typeIntialized = true;
    this._wrapperFields.projection_type.copy(other._wrapperFields.projection_type);
  }
  static get classType() {
    return GuiCameraWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"view_controller","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"track","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"ros_ign_interfaces","type":"TrackVisual","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"projection_type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ros_ign_interfaces","type":"GuiCamera","stringUpperBound":null,"isPrimitiveType":false},"msgName":"GuiCamera"};
  }
  hasMember(name) {
    let memberNames = ["header","name","view_controller","pose","track","projection_type"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GuiCameraArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GuiCameraWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GuiCameraWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GuiCameraArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GuiCameraArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GuiCameraRefArray(size);
    this._refObject = new GuiCameraRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GuiCameraWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GuiCameraArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GuiCameraArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GuiCameraWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GuiCameraWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GuiCameraArrayWrapper;
  }
}
module.exports = GuiCameraWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "view_controller",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "track",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "ros_ign_interfaces",
        "type": "TrackVisual",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "projection_type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ros_ign_interfaces",
    "type": "GuiCamera",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "GuiCamera"
}
*/
