// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const EntityFactoryRefStruct = StructType({
  name: primitiveTypes.string,
  allow_renaming: primitiveTypes.bool,
  sdf: primitiveTypes.string,
  sdf_filename: primitiveTypes.string,
  clone_name: primitiveTypes.string,
  pose: PoseWrapper.refObjectType,
  relative_to: primitiveTypes.string,
});
const EntityFactoryRefArray = ArrayType(EntityFactoryRefStruct);
const EntityFactoryRefStructArray = StructType({
  data: EntityFactoryRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class EntityFactoryWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new EntityFactoryRefStruct(other._refObject.toObject());
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._allow_renamingIntialized = true;
      this._sdfIntialized = true;
      this._wrapperFields.sdf =  new StringWrapper(other._wrapperFields.sdf);
      this._sdf_filenameIntialized = true;
      this._wrapperFields.sdf_filename =  new StringWrapper(other._wrapperFields.sdf_filename);
      this._clone_nameIntialized = true;
      this._wrapperFields.clone_name =  new StringWrapper(other._wrapperFields.clone_name);
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._relative_toIntialized = true;
      this._wrapperFields.relative_to =  new StringWrapper(other._wrapperFields.relative_to);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new EntityFactoryRefStruct();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._refObject.allow_renaming = false;
    this._allow_renamingIntialized = true;
    this._sdfIntialized = false;
    this._wrapperFields.sdf = new StringWrapper();
    this._sdf_filenameIntialized = false;
    this._wrapperFields.sdf_filename = new StringWrapper();
    this._clone_nameIntialized = false;
    this._wrapperFields.clone_name = new StringWrapper();
    this._wrapperFields.pose = new PoseWrapper();
    this._refObject.relative_to = "world";
    this._relative_toIntialized = true;
    this._wrapperFields.relative_to = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new EntityFactoryWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new EntityFactoryArrayWrapper;
  }
  static get ArrayType() {
    return EntityFactoryArrayWrapper;
  }
  static get refObjectArrayType() {
    return EntityFactoryRefStructArray
  }
  static get refObjectType() {
    return EntityFactoryRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in EntityFactory');
      }
      if (checkConsistency && !this._allow_renamingIntialized) {
        throw new TypeError('Invalid argument: allow_renaming in EntityFactory');
      }
      if (checkConsistency && !this._sdfIntialized) {
        throw new TypeError('Invalid argument: sdf in EntityFactory');
      }
      if (checkConsistency && !this._sdf_filenameIntialized) {
        throw new TypeError('Invalid argument: sdf_filename in EntityFactory');
      }
      if (checkConsistency && !this._clone_nameIntialized) {
        throw new TypeError('Invalid argument: clone_name in EntityFactory');
      }
      if (checkConsistency && !this._relative_toIntialized) {
        throw new TypeError('Invalid argument: relative_to in EntityFactory');
      }
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    if (own) {
      this._wrapperFields.sdf.freeze(own, checkConsistency);
    }
    this._refObject.sdf = this._wrapperFields.sdf.refObject;
    if (own) {
      this._wrapperFields.sdf_filename.freeze(own, checkConsistency);
    }
    this._refObject.sdf_filename = this._wrapperFields.sdf_filename.refObject;
    if (own) {
      this._wrapperFields.clone_name.freeze(own, checkConsistency);
    }
    this._refObject.clone_name = this._wrapperFields.clone_name.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    if (own) {
      this._wrapperFields.relative_to.freeze(own, checkConsistency);
    }
    this._refObject.relative_to = this._wrapperFields.relative_to.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._allow_renamingIntialized = true;
    this._refObject.allow_renaming = refObject.allow_renaming;
    this._sdfIntialized = true;
    this._wrapperFields.sdf.data = refObject.sdf.data;
    this._sdf_filenameIntialized = true;
    this._wrapperFields.sdf_filename.data = refObject.sdf_filename.data;
    this._clone_nameIntialized = true;
    this._wrapperFields.clone_name.data = refObject.clone_name.data;
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._relative_toIntialized = true;
    this._wrapperFields.relative_to.data = refObject.relative_to.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.name);
    StringWrapper.freeStruct(refObject.sdf);
    StringWrapper.freeStruct(refObject.sdf_filename);
    StringWrapper.freeStruct(refObject.clone_name);
    PoseWrapper.freeStruct(refObject.pose);
    StringWrapper.freeStruct(refObject.relative_to);
  }
  static destoryRawROS(msg) {
    EntityFactoryWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_ign_interfaces', subFolder: 'msg', interfaceName: 'EntityFactory'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get allow_renaming() {
    if (!this._allow_renamingIntialized) {
      return undefined;
    }
    return this._refObject.allow_renaming;
  }
  set allow_renaming(value) {
    this._allow_renamingIntialized = true;
    this._refObject.allow_renaming = value;
  }
  get sdf() {
    if (!this._sdfIntialized) {
      return undefined;
    }
    return this._wrapperFields.sdf.data;
  }
  set sdf(value) {
    this._sdfIntialized = true;
    this._wrapperFields.sdf.data = value;
  }
  get sdf_filename() {
    if (!this._sdf_filenameIntialized) {
      return undefined;
    }
    return this._wrapperFields.sdf_filename.data;
  }
  set sdf_filename(value) {
    this._sdf_filenameIntialized = true;
    this._wrapperFields.sdf_filename.data = value;
  }
  get clone_name() {
    if (!this._clone_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.clone_name.data;
  }
  set clone_name(value) {
    this._clone_nameIntialized = true;
    this._wrapperFields.clone_name.data = value;
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get relative_to() {
    if (!this._relative_toIntialized) {
      return undefined;
    }
    return this._wrapperFields.relative_to.data;
  }
  set relative_to(value) {
    this._relative_toIntialized = true;
    this._wrapperFields.relative_to.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new EntityFactoryRefStruct(refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._allow_renamingIntialized = true;
    this._sdfIntialized = true;
    this._wrapperFields.sdf.copyRefObject(this._refObject.sdf);
    this._sdf_filenameIntialized = true;
    this._wrapperFields.sdf_filename.copyRefObject(this._refObject.sdf_filename);
    this._clone_nameIntialized = true;
    this._wrapperFields.clone_name.copyRefObject(this._refObject.clone_name);
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._relative_toIntialized = true;
    this._wrapperFields.relative_to.copyRefObject(this._refObject.relative_to);
  }
  copy(other) {
    this._refObject = new EntityFactoryRefStruct(other._refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._allow_renamingIntialized = true;
    this._sdfIntialized = true;
    this._wrapperFields.sdf.copy(other._wrapperFields.sdf);
    this._sdf_filenameIntialized = true;
    this._wrapperFields.sdf_filename.copy(other._wrapperFields.sdf_filename);
    this._clone_nameIntialized = true;
    this._wrapperFields.clone_name.copy(other._wrapperFields.clone_name);
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._relative_toIntialized = true;
    this._wrapperFields.relative_to.copy(other._wrapperFields.relative_to);
  }
  static get classType() {
    return EntityFactoryWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"allow_renaming","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":false},{"name":"sdf","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sdf_filename","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"clone_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"relative_to","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":"world"}],"baseType":{"pkgName":"ros_ign_interfaces","type":"EntityFactory","stringUpperBound":null,"isPrimitiveType":false},"msgName":"EntityFactory"};
  }
  hasMember(name) {
    let memberNames = ["name","allow_renaming","sdf","sdf_filename","clone_name","pose","relative_to"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class EntityFactoryArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof EntityFactoryWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new EntityFactoryWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EntityFactoryArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EntityFactoryArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new EntityFactoryRefArray(size);
    this._refObject = new EntityFactoryRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new EntityFactoryWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof EntityFactoryArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "EntityFactoryArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      EntityFactoryWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return EntityFactoryWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return EntityFactoryArrayWrapper;
  }
}
module.exports = EntityFactoryWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "allow_renaming",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": false
    },
    {
      "name": "sdf",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sdf_filename",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "clone_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "relative_to",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": "world"
    }
  ],
  "baseType": {
    "pkgName": "ros_ign_interfaces",
    "type": "EntityFactory",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "EntityFactory"
}
*/
