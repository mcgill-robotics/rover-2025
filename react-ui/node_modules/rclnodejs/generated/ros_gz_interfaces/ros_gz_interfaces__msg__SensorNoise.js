// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const SensorNoiseRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  type: primitiveTypes.uint8,
  mean: primitiveTypes.float64,
  stddev: primitiveTypes.float64,
  bias_mean: primitiveTypes.float64,
  bias_stddev: primitiveTypes.float64,
  precision: primitiveTypes.float64,
  dynamic_bias_stddev: primitiveTypes.float64,
  dynamic_bias_correlation_time: primitiveTypes.float64,
});
const SensorNoiseRefArray = ArrayType(SensorNoiseRefStruct);
const SensorNoiseRefStructArray = StructType({
  data: SensorNoiseRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorNoiseWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorNoiseRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._typeIntialized = true;
      this._meanIntialized = true;
      this._stddevIntialized = true;
      this._bias_meanIntialized = true;
      this._bias_stddevIntialized = true;
      this._precisionIntialized = true;
      this._dynamic_bias_stddevIntialized = true;
      this._dynamic_bias_correlation_timeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorNoiseRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._typeIntialized = false;
    this._meanIntialized = false;
    this._stddevIntialized = false;
    this._bias_meanIntialized = false;
    this._bias_stddevIntialized = false;
    this._precisionIntialized = false;
    this._dynamic_bias_stddevIntialized = false;
    this._dynamic_bias_correlation_timeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new SensorNoiseWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorNoiseArrayWrapper;
  }
  static get ArrayType() {
    return SensorNoiseArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorNoiseRefStructArray
  }
  static get refObjectType() {
    return SensorNoiseRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in SensorNoise');
      }
      if (checkConsistency && !this._meanIntialized) {
        throw new TypeError('Invalid argument: mean in SensorNoise');
      }
      if (checkConsistency && !this._stddevIntialized) {
        throw new TypeError('Invalid argument: stddev in SensorNoise');
      }
      if (checkConsistency && !this._bias_meanIntialized) {
        throw new TypeError('Invalid argument: bias_mean in SensorNoise');
      }
      if (checkConsistency && !this._bias_stddevIntialized) {
        throw new TypeError('Invalid argument: bias_stddev in SensorNoise');
      }
      if (checkConsistency && !this._precisionIntialized) {
        throw new TypeError('Invalid argument: precision in SensorNoise');
      }
      if (checkConsistency && !this._dynamic_bias_stddevIntialized) {
        throw new TypeError('Invalid argument: dynamic_bias_stddev in SensorNoise');
      }
      if (checkConsistency && !this._dynamic_bias_correlation_timeIntialized) {
        throw new TypeError('Invalid argument: dynamic_bias_correlation_time in SensorNoise');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._meanIntialized = true;
    this._refObject.mean = refObject.mean;
    this._stddevIntialized = true;
    this._refObject.stddev = refObject.stddev;
    this._bias_meanIntialized = true;
    this._refObject.bias_mean = refObject.bias_mean;
    this._bias_stddevIntialized = true;
    this._refObject.bias_stddev = refObject.bias_stddev;
    this._precisionIntialized = true;
    this._refObject.precision = refObject.precision;
    this._dynamic_bias_stddevIntialized = true;
    this._refObject.dynamic_bias_stddev = refObject.dynamic_bias_stddev;
    this._dynamic_bias_correlation_timeIntialized = true;
    this._refObject.dynamic_bias_correlation_time = refObject.dynamic_bias_correlation_time;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
  }
  static destoryRawROS(msg) {
    SensorNoiseWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_gz_interfaces', subFolder: 'msg', interfaceName: 'SensorNoise'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get mean() {
    if (!this._meanIntialized) {
      return undefined;
    }
    return this._refObject.mean;
  }
  set mean(value) {
    this._meanIntialized = true;
    this._refObject.mean = value;
  }
  get stddev() {
    if (!this._stddevIntialized) {
      return undefined;
    }
    return this._refObject.stddev;
  }
  set stddev(value) {
    this._stddevIntialized = true;
    this._refObject.stddev = value;
  }
  get bias_mean() {
    if (!this._bias_meanIntialized) {
      return undefined;
    }
    return this._refObject.bias_mean;
  }
  set bias_mean(value) {
    this._bias_meanIntialized = true;
    this._refObject.bias_mean = value;
  }
  get bias_stddev() {
    if (!this._bias_stddevIntialized) {
      return undefined;
    }
    return this._refObject.bias_stddev;
  }
  set bias_stddev(value) {
    this._bias_stddevIntialized = true;
    this._refObject.bias_stddev = value;
  }
  get precision() {
    if (!this._precisionIntialized) {
      return undefined;
    }
    return this._refObject.precision;
  }
  set precision(value) {
    this._precisionIntialized = true;
    this._refObject.precision = value;
  }
  get dynamic_bias_stddev() {
    if (!this._dynamic_bias_stddevIntialized) {
      return undefined;
    }
    return this._refObject.dynamic_bias_stddev;
  }
  set dynamic_bias_stddev(value) {
    this._dynamic_bias_stddevIntialized = true;
    this._refObject.dynamic_bias_stddev = value;
  }
  get dynamic_bias_correlation_time() {
    if (!this._dynamic_bias_correlation_timeIntialized) {
      return undefined;
    }
    return this._refObject.dynamic_bias_correlation_time;
  }
  set dynamic_bias_correlation_time(value) {
    this._dynamic_bias_correlation_timeIntialized = true;
    this._refObject.dynamic_bias_correlation_time = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SensorNoiseRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._typeIntialized = true;
    this._meanIntialized = true;
    this._stddevIntialized = true;
    this._bias_meanIntialized = true;
    this._bias_stddevIntialized = true;
    this._precisionIntialized = true;
    this._dynamic_bias_stddevIntialized = true;
    this._dynamic_bias_correlation_timeIntialized = true;
  }
  copy(other) {
    this._refObject = new SensorNoiseRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._typeIntialized = true;
    this._meanIntialized = true;
    this._stddevIntialized = true;
    this._bias_meanIntialized = true;
    this._bias_stddevIntialized = true;
    this._precisionIntialized = true;
    this._dynamic_bias_stddevIntialized = true;
    this._dynamic_bias_correlation_timeIntialized = true;
  }
  static get classType() {
    return SensorNoiseWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"NONE","value":0},{"type":"uint8","name":"GAUSSIAN","value":2},{"type":"uint8","name":"GAUSSIAN_QUANTIZED","value":3}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mean","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stddev","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bias_mean","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bias_stddev","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"precision","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dynamic_bias_stddev","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dynamic_bias_correlation_time","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ros_gz_interfaces","type":"SensorNoise","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorNoise"};
  }
  hasMember(name) {
    let memberNames = ["header","type","mean","stddev","bias_mean","bias_stddev","precision","dynamic_bias_stddev","dynamic_bias_correlation_time"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorNoiseArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorNoiseWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorNoiseWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorNoiseArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorNoiseArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorNoiseRefArray(size);
    this._refObject = new SensorNoiseRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorNoiseWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorNoiseArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorNoiseArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorNoiseWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorNoiseWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorNoiseArrayWrapper;
  }
}
// Define constants (3 in total)
Object.defineProperty(SensorNoiseWrapper, "NONE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorNoiseWrapper, "GAUSSIAN", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorNoiseWrapper, "GAUSSIAN_QUANTIZED", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = SensorNoiseWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "NONE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "GAUSSIAN",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "GAUSSIAN_QUANTIZED",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mean",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stddev",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bias_mean",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bias_stddev",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "precision",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dynamic_bias_stddev",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dynamic_bias_correlation_time",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ros_gz_interfaces",
    "type": "SensorNoise",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorNoise"
}
*/
