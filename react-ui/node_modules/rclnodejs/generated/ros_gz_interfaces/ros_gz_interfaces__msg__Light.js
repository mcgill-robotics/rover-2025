// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const ColorRGBAWrapper = require('../../generated/std_msgs/std_msgs__msg__ColorRGBA.js');
const Vector3Wrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js');
const LightRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  name: primitiveTypes.string,
  type: primitiveTypes.uint8,
  pose: PoseWrapper.refObjectType,
  diffuse: ColorRGBAWrapper.refObjectType,
  specular: ColorRGBAWrapper.refObjectType,
  attenuation_constant: primitiveTypes.float32,
  attenuation_linear: primitiveTypes.float32,
  attenuation_quadratic: primitiveTypes.float32,
  direction: Vector3Wrapper.refObjectType,
  range: primitiveTypes.float32,
  cast_shadows: primitiveTypes.bool,
  spot_inner_angle: primitiveTypes.float32,
  spot_outer_angle: primitiveTypes.float32,
  spot_falloff: primitiveTypes.float32,
  id: primitiveTypes.uint32,
  parent_id: primitiveTypes.uint32,
  intensity: primitiveTypes.float32,
});
const LightRefArray = ArrayType(LightRefStruct);
const LightRefStructArray = StructType({
  data: LightRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class LightWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new LightRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._typeIntialized = true;
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._wrapperFields.diffuse =  new ColorRGBAWrapper(other._wrapperFields.diffuse);
      this._wrapperFields.specular =  new ColorRGBAWrapper(other._wrapperFields.specular);
      this._attenuation_constantIntialized = true;
      this._attenuation_linearIntialized = true;
      this._attenuation_quadraticIntialized = true;
      this._wrapperFields.direction =  new Vector3Wrapper(other._wrapperFields.direction);
      this._rangeIntialized = true;
      this._cast_shadowsIntialized = true;
      this._spot_inner_angleIntialized = true;
      this._spot_outer_angleIntialized = true;
      this._spot_falloffIntialized = true;
      this._idIntialized = true;
      this._parent_idIntialized = true;
      this._intensityIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new LightRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._typeIntialized = false;
    this._wrapperFields.pose = new PoseWrapper();
    this._wrapperFields.diffuse = new ColorRGBAWrapper();
    this._wrapperFields.specular = new ColorRGBAWrapper();
    this._attenuation_constantIntialized = false;
    this._attenuation_linearIntialized = false;
    this._attenuation_quadraticIntialized = false;
    this._wrapperFields.direction = new Vector3Wrapper();
    this._rangeIntialized = false;
    this._cast_shadowsIntialized = false;
    this._spot_inner_angleIntialized = false;
    this._spot_outer_angleIntialized = false;
    this._spot_falloffIntialized = false;
    this._idIntialized = false;
    this._parent_idIntialized = false;
    this._intensityIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new LightWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new LightArrayWrapper;
  }
  static get ArrayType() {
    return LightArrayWrapper;
  }
  static get refObjectArrayType() {
    return LightRefStructArray
  }
  static get refObjectType() {
    return LightRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in Light');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in Light');
      }
      if (checkConsistency && !this._attenuation_constantIntialized) {
        throw new TypeError('Invalid argument: attenuation_constant in Light');
      }
      if (checkConsistency && !this._attenuation_linearIntialized) {
        throw new TypeError('Invalid argument: attenuation_linear in Light');
      }
      if (checkConsistency && !this._attenuation_quadraticIntialized) {
        throw new TypeError('Invalid argument: attenuation_quadratic in Light');
      }
      if (checkConsistency && !this._rangeIntialized) {
        throw new TypeError('Invalid argument: range in Light');
      }
      if (checkConsistency && !this._cast_shadowsIntialized) {
        throw new TypeError('Invalid argument: cast_shadows in Light');
      }
      if (checkConsistency && !this._spot_inner_angleIntialized) {
        throw new TypeError('Invalid argument: spot_inner_angle in Light');
      }
      if (checkConsistency && !this._spot_outer_angleIntialized) {
        throw new TypeError('Invalid argument: spot_outer_angle in Light');
      }
      if (checkConsistency && !this._spot_falloffIntialized) {
        throw new TypeError('Invalid argument: spot_falloff in Light');
      }
      if (checkConsistency && !this._idIntialized) {
        throw new TypeError('Invalid argument: id in Light');
      }
      if (checkConsistency && !this._parent_idIntialized) {
        throw new TypeError('Invalid argument: parent_id in Light');
      }
      if (checkConsistency && !this._intensityIntialized) {
        throw new TypeError('Invalid argument: intensity in Light');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    this._wrapperFields.diffuse.freeze(own, checkConsistency);
    this._refObject.diffuse = this._wrapperFields.diffuse.refObject;
    this._wrapperFields.specular.freeze(own, checkConsistency);
    this._refObject.specular = this._wrapperFields.specular.refObject;
    this._wrapperFields.direction.freeze(own, checkConsistency);
    this._refObject.direction = this._wrapperFields.direction.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._wrapperFields.diffuse.copyRefObject(refObject.diffuse);
    this._wrapperFields.specular.copyRefObject(refObject.specular);
    this._attenuation_constantIntialized = true;
    this._refObject.attenuation_constant = refObject.attenuation_constant;
    this._attenuation_linearIntialized = true;
    this._refObject.attenuation_linear = refObject.attenuation_linear;
    this._attenuation_quadraticIntialized = true;
    this._refObject.attenuation_quadratic = refObject.attenuation_quadratic;
    this._wrapperFields.direction.copyRefObject(refObject.direction);
    this._rangeIntialized = true;
    this._refObject.range = refObject.range;
    this._cast_shadowsIntialized = true;
    this._refObject.cast_shadows = refObject.cast_shadows;
    this._spot_inner_angleIntialized = true;
    this._refObject.spot_inner_angle = refObject.spot_inner_angle;
    this._spot_outer_angleIntialized = true;
    this._refObject.spot_outer_angle = refObject.spot_outer_angle;
    this._spot_falloffIntialized = true;
    this._refObject.spot_falloff = refObject.spot_falloff;
    this._idIntialized = true;
    this._refObject.id = refObject.id;
    this._parent_idIntialized = true;
    this._refObject.parent_id = refObject.parent_id;
    this._intensityIntialized = true;
    this._refObject.intensity = refObject.intensity;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.name);
    PoseWrapper.freeStruct(refObject.pose);
    ColorRGBAWrapper.freeStruct(refObject.diffuse);
    ColorRGBAWrapper.freeStruct(refObject.specular);
    Vector3Wrapper.freeStruct(refObject.direction);
  }
  static destoryRawROS(msg) {
    LightWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_gz_interfaces', subFolder: 'msg', interfaceName: 'Light'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get diffuse() {
    return this._wrapperFields.diffuse;
  }
  set diffuse(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.diffuse.copy(value);
    } else {
      this._wrapperFields.diffuse.copy(new ColorRGBAWrapper(value));
    }
  }
  get specular() {
    return this._wrapperFields.specular;
  }
  set specular(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.specular.copy(value);
    } else {
      this._wrapperFields.specular.copy(new ColorRGBAWrapper(value));
    }
  }
  get attenuation_constant() {
    if (!this._attenuation_constantIntialized) {
      return undefined;
    }
    return this._refObject.attenuation_constant;
  }
  set attenuation_constant(value) {
    this._attenuation_constantIntialized = true;
    this._refObject.attenuation_constant = value;
  }
  get attenuation_linear() {
    if (!this._attenuation_linearIntialized) {
      return undefined;
    }
    return this._refObject.attenuation_linear;
  }
  set attenuation_linear(value) {
    this._attenuation_linearIntialized = true;
    this._refObject.attenuation_linear = value;
  }
  get attenuation_quadratic() {
    if (!this._attenuation_quadraticIntialized) {
      return undefined;
    }
    return this._refObject.attenuation_quadratic;
  }
  set attenuation_quadratic(value) {
    this._attenuation_quadraticIntialized = true;
    this._refObject.attenuation_quadratic = value;
  }
  get direction() {
    return this._wrapperFields.direction;
  }
  set direction(value) {
    if (value instanceof Vector3Wrapper) {
      this._wrapperFields.direction.copy(value);
    } else {
      this._wrapperFields.direction.copy(new Vector3Wrapper(value));
    }
  }
  get range() {
    if (!this._rangeIntialized) {
      return undefined;
    }
    return this._refObject.range;
  }
  set range(value) {
    this._rangeIntialized = true;
    this._refObject.range = value;
  }
  get cast_shadows() {
    if (!this._cast_shadowsIntialized) {
      return undefined;
    }
    return this._refObject.cast_shadows;
  }
  set cast_shadows(value) {
    this._cast_shadowsIntialized = true;
    this._refObject.cast_shadows = value;
  }
  get spot_inner_angle() {
    if (!this._spot_inner_angleIntialized) {
      return undefined;
    }
    return this._refObject.spot_inner_angle;
  }
  set spot_inner_angle(value) {
    this._spot_inner_angleIntialized = true;
    this._refObject.spot_inner_angle = value;
  }
  get spot_outer_angle() {
    if (!this._spot_outer_angleIntialized) {
      return undefined;
    }
    return this._refObject.spot_outer_angle;
  }
  set spot_outer_angle(value) {
    this._spot_outer_angleIntialized = true;
    this._refObject.spot_outer_angle = value;
  }
  get spot_falloff() {
    if (!this._spot_falloffIntialized) {
      return undefined;
    }
    return this._refObject.spot_falloff;
  }
  set spot_falloff(value) {
    this._spot_falloffIntialized = true;
    this._refObject.spot_falloff = value;
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._refObject.id;
  }
  set id(value) {
    this._idIntialized = true;
    this._refObject.id = value;
  }
  get parent_id() {
    if (!this._parent_idIntialized) {
      return undefined;
    }
    return this._refObject.parent_id;
  }
  set parent_id(value) {
    this._parent_idIntialized = true;
    this._refObject.parent_id = value;
  }
  get intensity() {
    if (!this._intensityIntialized) {
      return undefined;
    }
    return this._refObject.intensity;
  }
  set intensity(value) {
    this._intensityIntialized = true;
    this._refObject.intensity = value;
  }
  copyRefObject(refObject) {
    this._refObject = new LightRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._typeIntialized = true;
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._wrapperFields.diffuse.copyRefObject(this._refObject.diffuse);
    this._wrapperFields.specular.copyRefObject(this._refObject.specular);
    this._attenuation_constantIntialized = true;
    this._attenuation_linearIntialized = true;
    this._attenuation_quadraticIntialized = true;
    this._wrapperFields.direction.copyRefObject(this._refObject.direction);
    this._rangeIntialized = true;
    this._cast_shadowsIntialized = true;
    this._spot_inner_angleIntialized = true;
    this._spot_outer_angleIntialized = true;
    this._spot_falloffIntialized = true;
    this._idIntialized = true;
    this._parent_idIntialized = true;
    this._intensityIntialized = true;
  }
  copy(other) {
    this._refObject = new LightRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._typeIntialized = true;
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._wrapperFields.diffuse.copy(other._wrapperFields.diffuse);
    this._wrapperFields.specular.copy(other._wrapperFields.specular);
    this._attenuation_constantIntialized = true;
    this._attenuation_linearIntialized = true;
    this._attenuation_quadraticIntialized = true;
    this._wrapperFields.direction.copy(other._wrapperFields.direction);
    this._rangeIntialized = true;
    this._cast_shadowsIntialized = true;
    this._spot_inner_angleIntialized = true;
    this._spot_outer_angleIntialized = true;
    this._spot_falloffIntialized = true;
    this._idIntialized = true;
    this._parent_idIntialized = true;
    this._intensityIntialized = true;
  }
  static get classType() {
    return LightWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"POINT","value":0},{"type":"uint8","name":"SPOT","value":1},{"type":"uint8","name":"DIRECTIONAL","value":2}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"diffuse","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"specular","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"attenuation_constant","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"attenuation_linear","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"attenuation_quadratic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"direction","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"range","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cast_shadows","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"spot_inner_angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"spot_outer_angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"spot_falloff","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"parent_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"intensity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ros_gz_interfaces","type":"Light","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Light"};
  }
  hasMember(name) {
    let memberNames = ["header","name","type","pose","diffuse","specular","attenuation_constant","attenuation_linear","attenuation_quadratic","direction","range","cast_shadows","spot_inner_angle","spot_outer_angle","spot_falloff","id","parent_id","intensity"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class LightArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof LightWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new LightWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LightArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LightArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new LightRefArray(size);
    this._refObject = new LightRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new LightWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof LightArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "LightArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      LightWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return LightWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return LightArrayWrapper;
  }
}
// Define constants (3 in total)
Object.defineProperty(LightWrapper, "POINT", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LightWrapper, "SPOT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LightWrapper, "DIRECTIONAL", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = LightWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "POINT",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SPOT",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "DIRECTIONAL",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "diffuse",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "specular",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "attenuation_constant",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "attenuation_linear",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "attenuation_quadratic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "direction",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "range",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cast_shadows",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "spot_inner_angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "spot_outer_angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "spot_falloff",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "parent_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "intensity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ros_gz_interfaces",
    "type": "Light",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Light"
}
*/
