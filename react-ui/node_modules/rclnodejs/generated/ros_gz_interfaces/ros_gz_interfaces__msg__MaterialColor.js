// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const EntityWrapper = require('../../generated/ros_gz_interfaces/ros_gz_interfaces__msg__Entity.js');
const ColorRGBAWrapper = require('../../generated/std_msgs/std_msgs__msg__ColorRGBA.js');
const MaterialColorRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  entity: EntityWrapper.refObjectType,
  ambient: ColorRGBAWrapper.refObjectType,
  diffuse: ColorRGBAWrapper.refObjectType,
  specular: ColorRGBAWrapper.refObjectType,
  emissive: ColorRGBAWrapper.refObjectType,
  shininess: primitiveTypes.float64,
  entity_match: primitiveTypes.uint8,
});
const MaterialColorRefArray = ArrayType(MaterialColorRefStruct);
const MaterialColorRefStructArray = StructType({
  data: MaterialColorRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MaterialColorWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MaterialColorRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.entity =  new EntityWrapper(other._wrapperFields.entity);
      this._wrapperFields.ambient =  new ColorRGBAWrapper(other._wrapperFields.ambient);
      this._wrapperFields.diffuse =  new ColorRGBAWrapper(other._wrapperFields.diffuse);
      this._wrapperFields.specular =  new ColorRGBAWrapper(other._wrapperFields.specular);
      this._wrapperFields.emissive =  new ColorRGBAWrapper(other._wrapperFields.emissive);
      this._shininessIntialized = true;
      this._entity_matchIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MaterialColorRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.entity = new EntityWrapper();
    this._wrapperFields.ambient = new ColorRGBAWrapper();
    this._wrapperFields.diffuse = new ColorRGBAWrapper();
    this._wrapperFields.specular = new ColorRGBAWrapper();
    this._wrapperFields.emissive = new ColorRGBAWrapper();
    this._shininessIntialized = false;
    this._entity_matchIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new MaterialColorWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MaterialColorArrayWrapper;
  }
  static get ArrayType() {
    return MaterialColorArrayWrapper;
  }
  static get refObjectArrayType() {
    return MaterialColorRefStructArray
  }
  static get refObjectType() {
    return MaterialColorRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._shininessIntialized) {
        throw new TypeError('Invalid argument: shininess in MaterialColor');
      }
      if (checkConsistency && !this._entity_matchIntialized) {
        throw new TypeError('Invalid argument: entity_match in MaterialColor');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.entity.freeze(own, checkConsistency);
    this._refObject.entity = this._wrapperFields.entity.refObject;
    this._wrapperFields.ambient.freeze(own, checkConsistency);
    this._refObject.ambient = this._wrapperFields.ambient.refObject;
    this._wrapperFields.diffuse.freeze(own, checkConsistency);
    this._refObject.diffuse = this._wrapperFields.diffuse.refObject;
    this._wrapperFields.specular.freeze(own, checkConsistency);
    this._refObject.specular = this._wrapperFields.specular.refObject;
    this._wrapperFields.emissive.freeze(own, checkConsistency);
    this._refObject.emissive = this._wrapperFields.emissive.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.entity.copyRefObject(refObject.entity);
    this._wrapperFields.ambient.copyRefObject(refObject.ambient);
    this._wrapperFields.diffuse.copyRefObject(refObject.diffuse);
    this._wrapperFields.specular.copyRefObject(refObject.specular);
    this._wrapperFields.emissive.copyRefObject(refObject.emissive);
    this._shininessIntialized = true;
    this._refObject.shininess = refObject.shininess;
    this._entity_matchIntialized = true;
    this._refObject.entity_match = refObject.entity_match;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    EntityWrapper.freeStruct(refObject.entity);
    ColorRGBAWrapper.freeStruct(refObject.ambient);
    ColorRGBAWrapper.freeStruct(refObject.diffuse);
    ColorRGBAWrapper.freeStruct(refObject.specular);
    ColorRGBAWrapper.freeStruct(refObject.emissive);
  }
  static destoryRawROS(msg) {
    MaterialColorWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_gz_interfaces', subFolder: 'msg', interfaceName: 'MaterialColor'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get entity() {
    return this._wrapperFields.entity;
  }
  set entity(value) {
    if (value instanceof EntityWrapper) {
      this._wrapperFields.entity.copy(value);
    } else {
      this._wrapperFields.entity.copy(new EntityWrapper(value));
    }
  }
  get ambient() {
    return this._wrapperFields.ambient;
  }
  set ambient(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.ambient.copy(value);
    } else {
      this._wrapperFields.ambient.copy(new ColorRGBAWrapper(value));
    }
  }
  get diffuse() {
    return this._wrapperFields.diffuse;
  }
  set diffuse(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.diffuse.copy(value);
    } else {
      this._wrapperFields.diffuse.copy(new ColorRGBAWrapper(value));
    }
  }
  get specular() {
    return this._wrapperFields.specular;
  }
  set specular(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.specular.copy(value);
    } else {
      this._wrapperFields.specular.copy(new ColorRGBAWrapper(value));
    }
  }
  get emissive() {
    return this._wrapperFields.emissive;
  }
  set emissive(value) {
    if (value instanceof ColorRGBAWrapper) {
      this._wrapperFields.emissive.copy(value);
    } else {
      this._wrapperFields.emissive.copy(new ColorRGBAWrapper(value));
    }
  }
  get shininess() {
    if (!this._shininessIntialized) {
      return undefined;
    }
    return this._refObject.shininess;
  }
  set shininess(value) {
    this._shininessIntialized = true;
    this._refObject.shininess = value;
  }
  get entity_match() {
    if (!this._entity_matchIntialized) {
      return undefined;
    }
    return this._refObject.entity_match;
  }
  set entity_match(value) {
    this._entity_matchIntialized = true;
    this._refObject.entity_match = value;
  }
  copyRefObject(refObject) {
    this._refObject = new MaterialColorRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.entity.copyRefObject(this._refObject.entity);
    this._wrapperFields.ambient.copyRefObject(this._refObject.ambient);
    this._wrapperFields.diffuse.copyRefObject(this._refObject.diffuse);
    this._wrapperFields.specular.copyRefObject(this._refObject.specular);
    this._wrapperFields.emissive.copyRefObject(this._refObject.emissive);
    this._shininessIntialized = true;
    this._entity_matchIntialized = true;
  }
  copy(other) {
    this._refObject = new MaterialColorRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.entity.copy(other._wrapperFields.entity);
    this._wrapperFields.ambient.copy(other._wrapperFields.ambient);
    this._wrapperFields.diffuse.copy(other._wrapperFields.diffuse);
    this._wrapperFields.specular.copy(other._wrapperFields.specular);
    this._wrapperFields.emissive.copy(other._wrapperFields.emissive);
    this._shininessIntialized = true;
    this._entity_matchIntialized = true;
  }
  static get classType() {
    return MaterialColorWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"FIRST","value":0},{"type":"uint8","name":"ALL","value":1}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"entity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"ros_gz_interfaces","type":"Entity","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ambient","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"diffuse","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"specular","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"emissive","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"ColorRGBA","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"shininess","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"entity_match","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ros_gz_interfaces","type":"MaterialColor","stringUpperBound":null,"isPrimitiveType":false},"msgName":"MaterialColor"};
  }
  hasMember(name) {
    let memberNames = ["header","entity","ambient","diffuse","specular","emissive","shininess","entity_match"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MaterialColorArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MaterialColorWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MaterialColorWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MaterialColorArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MaterialColorArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MaterialColorRefArray(size);
    this._refObject = new MaterialColorRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MaterialColorWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MaterialColorArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MaterialColorArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MaterialColorWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MaterialColorWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MaterialColorArrayWrapper;
  }
}
// Define constants (2 in total)
Object.defineProperty(MaterialColorWrapper, "FIRST", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MaterialColorWrapper, "ALL", {value: 1, writable: false, enumerable: true, configurable: true});
module.exports = MaterialColorWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "FIRST",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "ALL",
      "value": 1
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "entity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "ros_gz_interfaces",
        "type": "Entity",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ambient",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "diffuse",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "specular",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "emissive",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "ColorRGBA",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "shininess",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "entity_match",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ros_gz_interfaces",
    "type": "MaterialColor",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "MaterialColor"
}
*/
