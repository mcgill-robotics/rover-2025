import React, { useEffect, useState, useRef } from "react";
import "./styles/Speedometer.css";

// CodePen Example Credit:
// Original design and implementation by Yudiz Solutions Limited
// URL: https://codepen.io/yudizsolutions/pen/LYaVmjx

interface SpeedometerProps {
  initialSpeed?: number;
}

const Speedometer: React.FC<SpeedometerProps> = ({ initialSpeed = 0 }) => {
  const [speed] = useState<number>(initialSpeed);
  const svgContainerRef = useRef<HTMLDivElement | null>(null);
  const meterBarRef = useRef<SVGPathElement | null>(null);
  const meterFrameRef = useRef<SVGPathElement | null>(null);
  const innerCircleRef = useRef<SVGPathElement | null>(null);
  const speedUnitRef = useRef<SVGPathElement | null>(null);
  const [viewBoxWidth, setViewBoxWidth] = useState(349); // Default width
  const [viewBoxHeight, setViewBoxHeight] = useState(266); // Default height

  // Original positions for the speeds
  const originalPositions = [
    { speed:  0, x:  95.30, y: 220.40 },
    { speed: 10, x:  85.39, y: 165.63 },
    { speed: 20, x: 100.34, y: 114.85 },
    { speed: 30, x: 137.64, y:  78.31 },
    { speed: 40, x: 188.22, y:  60.99 },
    { speed: 50, x: 238.42, y:  78.31 },
    { speed: 60, x: 274.31, y: 114.85 },
    { speed: 70, x: 290.93, y: 165.63 },
    { speed: 80, x: 274.43, y: 220.40 },
  ];

  const updateViewBoxSize = () => {
    if (svgContainerRef.current) {
      const containerWidth = svgContainerRef.current.offsetWidth;
      const containerHeight = svgContainerRef.current.offsetHeight;

      setViewBoxWidth(containerWidth);
      setViewBoxHeight(containerHeight);
    }
  };

  useEffect(() => {
    updateViewBoxSize();

    window.addEventListener("resize", updateViewBoxSize);
    return () => {
      window.removeEventListener("resize", updateViewBoxSize);
    };
  }, []);

  // Calculate scale factor based on current viewBox size
  const scaleX = viewBoxWidth / 349; // Original width: 349
  const scaleY = viewBoxHeight / 266; // Original height: 266

  // Calculate scaled positions
  const scaledPositions = originalPositions.map((pos) => ({
    speed: pos.speed,
    x: pos.x * scaleX,
    y: pos.y * scaleY,
  }));

  useEffect(() => {
      const updateSpeed = () => {
        if (meterBarRef.current) {
        const maxStrokeLength = 615; // Length of the path
        const maxSpeed = 80; // Max speed value
        const strokeDashoffset = ((maxSpeed - speed) / maxSpeed) * maxStrokeLength;
        meterBarRef.current.style.strokeDashoffset = strokeDashoffset.toString();
      }
    };

    updateSpeed();
  }, [speed]);

  return (
    <div className="speedometer">
      <svg
        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >

        {/* Background Meter Path */}
        <path className="meter-bg-bar" 
          ref={meterBarRef} 
          d="M50.8884 250C37.0172 227.815 29 201.594 29 173.5C29 93.6949 93.6949 29 173.5 29C253.305 29 318 93.6949 318 173.5C318 201.594 309.983 227.815 296.112 250" 
          stroke="#CFF80B" 
          strokeWidth="57" />

        {/* Meter Frame Path */}
        <path className="meter-frame" 
          ref={meterFrameRef}
          fillRule="evenodd" 
          clipRule="evenodd" 
          d="M348 0H0V266H348V0ZM1 173.5C1 205.845 9.90209 236.11 25.3898 261.98C25.8674 262.778 26.9495 262.943 27.6503 262.332C28.2018 261.851 28.3263 261.044 27.9507 260.416C12.7415 235.002 4 205.272 4 173.5C4 79.8877 79.8877 4 173.5 4C267.112 4 343 79.8877 343 173.5C343 205.272 334.258 235.002 319.049 260.416C318.674 261.044 318.798 261.851 319.35 262.332C320.051 262.943 321.133 262.778 321.61 261.98C337.098 236.11 346 205.845 346 173.5C346 78.2309 268.769 1 173.5 1C78.2309 1 1 78.2309 1 173.5ZM191.694 15.0084C191.754 14.4594 191.358 13.9658 190.809 13.9059C190.26 13.846 189.766 14.2425 189.706 14.7915L188.506 25.7915C188.446 26.3406 188.843 26.8342 189.392 26.8941C189.941 26.954 190.434 26.5575 190.494 26.0084L191.694 15.0084ZM13.8058 157.192C13.8657 156.643 14.3593 156.246 14.9083 156.306L25.9083 157.506C26.4574 157.566 26.8539 158.059 26.794 158.608C26.7341 159.157 26.2405 159.554 25.6914 159.494L14.6914 158.294C14.1424 158.234 13.7459 157.741 13.8058 157.192ZM321.208 188.506C320.659 188.446 320.165 188.842 320.106 189.392C320.046 189.941 320.442 190.434 320.991 190.494L331.991 191.694C332.54 191.754 333.034 191.357 333.094 190.808C333.154 190.259 332.757 189.766 332.208 189.706L321.208 188.506ZM207.302 16.6205C207.842 16.7318 208.191 17.2605 208.08 17.8014L205.88 28.5014C205.768 29.0424 205.24 29.3908 204.699 29.2796C204.158 29.1683 203.809 28.6396 203.921 28.0987L206.121 17.3987C206.232 16.8577 206.761 16.5093 207.302 16.6205ZM17.6103 139.822C17.0703 139.706 16.5385 140.05 16.4224 140.59C16.3064 141.13 16.65 141.662 17.19 141.778L27.89 144.078C28.4299 144.194 28.9617 143.85 29.0778 143.31C29.1938 142.77 28.8502 142.238 28.3103 142.122L17.6103 139.822ZM317.72 204.699C317.832 204.158 318.36 203.809 318.901 203.92L329.601 206.12C330.142 206.232 330.491 206.76 330.379 207.301C330.268 207.842 329.739 208.191 329.198 208.079L318.499 205.879C317.958 205.768 317.609 205.24 317.72 204.699ZM224.25 22.3108C224.422 21.7858 224.135 21.2211 223.61 21.0495C223.085 20.8779 222.521 21.1643 222.349 21.6893L218.949 32.0893C218.778 32.6142 219.064 33.1789 219.589 33.3505C220.114 33.5221 220.679 33.2357 220.85 32.7108L224.25 22.3108ZM20.648 124.392C20.8182 123.866 21.382 123.578 21.9075 123.749L32.4075 127.149C32.9329 127.319 33.2209 127.883 33.0508 128.408C32.8806 128.933 32.3167 129.221 31.7913 129.051L21.2913 125.651C20.7659 125.481 20.4779 124.917 20.648 124.392ZM314.91 218.95C314.385 218.778 313.821 219.064 313.649 219.589C313.477 220.114 313.764 220.679 314.289 220.851L324.689 224.251C325.214 224.422 325.778 224.136 325.95 223.611C326.122 223.086 325.835 222.521 325.31 222.35L314.91 218.95ZM239.202 27.0847C239.708 27.3071 239.937 27.8972 239.715 28.4027L235.315 38.4027C235.093 38.9083 234.502 39.1377 233.997 38.9153C233.491 38.6929 233.262 38.1028 233.484 37.5973L237.884 27.5973C238.107 27.0918 238.697 26.8623 239.202 27.0847ZM28.0021 108.185C27.4966 107.962 26.9065 108.192 26.6841 108.697C26.4616 109.203 26.6911 109.793 27.1966 110.015L37.1966 114.415C37.7021 114.638 38.2923 114.408 38.5147 113.903C38.7371 113.397 38.5076 112.807 38.0021 112.585L28.0021 108.185ZM308.085 233.997C308.307 233.492 308.897 233.262 309.403 233.485L319.403 237.885C319.909 238.107 320.138 238.697 319.916 239.203C319.693 239.708 319.103 239.938 318.598 239.715L308.598 235.315C308.092 235.093 307.863 234.503 308.085 233.997ZM268.507 45.3898C268.833 44.9438 268.736 44.3182 268.29 43.9924C267.844 43.6667 267.218 43.7642 266.892 44.2102L260.392 53.1102C260.066 53.5562 260.164 54.1818 260.61 54.5076C261.056 54.8333 261.682 54.7358 262.007 54.2898L268.507 45.3898ZM43.3879 79.6162C43.7103 79.1678 44.3352 79.0657 44.7836 79.3881L53.6836 85.7881C54.132 86.1106 54.2341 86.7355 53.9117 87.1839C53.5892 87.6322 52.9643 87.7343 52.516 87.4119L43.616 81.0119C43.1676 80.6895 43.0655 80.0646 43.3879 79.6162ZM281.342 55.9699C281.712 55.5599 281.68 54.9276 281.27 54.5575C280.86 54.1875 280.227 54.22 279.857 54.63L272.457 62.83C272.087 63.24 272.12 63.8723 272.53 64.2423C272.94 64.6123 273.572 64.5799 273.942 64.1699L281.342 55.9699ZM53.8527 66.535C54.2199 66.1225 54.852 66.0858 55.2645 66.4531L63.4646 73.7531C63.8771 74.1203 63.9138 74.7524 63.5465 75.1649C63.1793 75.5774 62.5472 75.6141 62.1347 75.2469L53.9347 67.9469C53.5222 67.5796 53.4855 66.9475 53.8527 66.535ZM293.065 67.9469C293.477 67.5796 293.514 66.9475 293.147 66.535C292.779 66.1225 292.147 66.0858 291.735 66.4531L283.535 73.7531C283.122 74.1203 283.086 74.7524 283.453 75.1649C283.82 75.5774 284.452 75.6141 284.865 75.2469L293.065 67.9469ZM65.7299 54.5575C66.14 54.1875 66.7723 54.22 67.1423 54.63L74.5423 62.83C74.9123 63.24 74.8799 63.8723 74.4699 64.2423C74.0599 64.6123 73.4275 64.5799 73.0575 64.1699L65.6575 55.9699C65.2875 55.5599 65.3199 54.9276 65.7299 54.5575ZM303.384 81.0119C303.832 80.6895 303.934 80.0646 303.612 79.6162C303.289 79.1678 302.665 79.0657 302.216 79.3881L293.316 85.7881C292.868 86.1106 292.766 86.7355 293.088 87.1839C293.411 87.6322 294.035 87.7343 294.484 87.4119L303.384 81.0119ZM78.7101 43.9924C79.1561 43.6667 79.7817 43.7642 80.1074 44.2102L86.6074 53.1102C86.9332 53.5562 86.8357 54.1818 86.3897 54.5076C85.9437 54.8333 85.318 54.7358 84.9923 54.2898L78.4923 45.3898C78.1666 44.9438 78.2641 44.3182 78.7101 43.9924ZM38.4025 235.315C38.908 235.093 39.1375 234.503 38.9151 233.997C38.6926 233.492 38.1025 233.262 37.597 233.485L27.597 237.885C27.0915 238.107 26.862 238.697 27.0844 239.203C27.3069 239.708 27.897 239.938 28.4025 239.715L38.4025 235.315ZM320.315 108.697C320.537 109.203 320.308 109.793 319.802 110.015L309.802 114.415C309.297 114.638 308.707 114.408 308.484 113.903C308.262 113.397 308.491 112.807 308.997 112.585L318.997 108.185C319.502 107.962 320.093 108.192 320.315 108.697ZM109.115 27.5973C108.892 27.0918 108.302 26.8623 107.797 27.0847C107.291 27.3071 107.062 27.8972 107.284 28.4027L111.684 38.4027C111.907 38.9083 112.497 39.1377 113.002 38.9153C113.508 38.6929 113.737 38.1028 113.515 37.5973L109.115 27.5973ZM33.3503 219.589C33.5219 220.114 33.2355 220.679 32.7105 220.851L22.3105 224.251C21.7856 224.422 21.2209 224.136 21.0493 223.611C20.8777 223.086 21.1641 222.521 21.689 222.35L32.089 218.95C32.614 218.778 33.1787 219.064 33.3503 219.589ZM325.708 125.651C326.233 125.481 326.521 124.917 326.351 124.392C326.181 123.866 325.617 123.578 325.092 123.749L314.592 127.149C314.066 127.319 313.778 127.883 313.948 128.408C314.118 128.933 314.682 129.221 315.208 129.051L325.708 125.651ZM123.389 21.0495C123.914 20.8779 124.478 21.1643 124.65 21.6893L128.05 32.0893C128.222 32.6142 127.935 33.1789 127.41 33.3505C126.885 33.5221 126.321 33.2357 126.149 32.7108L122.749 22.3108C122.577 21.7858 122.864 21.2211 123.389 21.0495ZM28.5012 205.879C29.0422 205.768 29.3905 205.24 29.2793 204.699C29.1681 204.158 28.6394 203.809 28.0984 203.92L17.3984 206.12C16.8574 206.232 16.5091 206.76 16.6203 207.301C16.7315 207.842 17.2602 208.191 17.8012 208.079L28.5012 205.879ZM330.578 140.59C330.694 141.13 330.35 141.662 329.81 141.778L319.11 144.078C318.57 144.194 318.039 143.85 317.922 143.31C317.806 142.77 318.15 142.238 318.69 142.122L329.39 139.822C329.93 139.706 330.462 140.05 330.578 140.59ZM140.88 17.3987C140.768 16.8577 140.24 16.5093 139.699 16.6205C139.158 16.7318 138.809 17.2605 138.921 17.8014L141.121 28.5014C141.232 29.0424 141.761 29.3908 142.302 29.2796C142.842 29.1683 143.191 28.6396 143.08 28.0987L140.88 17.3987ZM26.8941 189.392C26.954 189.941 26.5575 190.434 26.0084 190.494L15.0084 191.694C14.4594 191.754 13.9658 191.357 13.9059 190.808C13.846 190.259 14.2425 189.766 14.7915 189.706L25.7915 188.506C26.3406 188.446 26.8342 188.842 26.8941 189.392ZM332.308 158.294C332.857 158.234 333.254 157.741 333.194 157.192C333.134 156.643 332.64 156.246 332.091 156.306L321.091 157.506C320.542 157.566 320.146 158.059 320.206 158.608C320.266 159.157 320.759 159.554 321.308 159.494L332.308 158.294ZM156.191 13.9059C156.74 13.846 157.234 14.2425 157.294 14.7915L158.494 25.7915C158.554 26.3406 158.157 26.8342 157.608 26.8941C157.059 26.954 156.566 26.5575 156.506 26.0084L155.306 15.0084C155.246 14.4594 155.642 13.9658 156.191 13.9059ZM175 14C175 13.4477 174.552 13 174 13C173.448 13 173 13.4477 173 14V48C173 48.5523 173.448 49 174 49C174.552 49 175 48.5523 175 48V14ZM13 174C13 173.448 13.4477 173 14 173H48C48.5523 173 49 173.448 49 174C49 174.552 48.5523 175 48 175H14C13.4477 175 13 174.552 13 174ZM299 173C298.448 173 298 173.448 298 174C298 174.552 298.448 175 299 175H333C333.552 175 334 174.552 334 174C334 173.448 333.552 173 333 173H299ZM254.2 34.7336C254.678 35.0093 254.843 35.6208 254.567 36.0993L237.567 65.5993C237.291 66.0778 236.68 66.2422 236.201 65.9665C235.723 65.6907 235.558 65.0792 235.834 64.6007L252.834 35.1007C253.11 34.6222 253.721 34.4578 254.2 34.7336ZM64.4993 235.834C64.9774 235.558 65.5891 235.721 65.8655 236.199C66.142 236.677 65.9785 237.289 65.5004 237.566L36.1004 254.566C35.6223 254.842 35.0106 254.679 34.7341 254.2C34.4577 253.722 34.6212 253.111 35.0993 252.834L64.4993 235.834ZM312.766 93.6994C313.042 94.1775 312.879 94.7892 312.401 95.0657L283.001 112.066C282.523 112.342 281.911 112.179 281.634 111.701C281.358 111.222 281.521 110.611 282 110.334L311.4 93.3343C311.878 93.0578 312.489 93.2213 312.766 93.6994ZM94.1664 35.1007C93.8906 34.6222 93.2792 34.4578 92.8007 34.7336C92.3222 35.0093 92.1578 35.6208 92.4335 36.0993L109.434 65.5993C109.709 66.0778 110.321 66.2422 110.799 65.9665C111.278 65.6907 111.442 65.0792 111.166 64.6007L94.1664 35.1007ZM34.2338 93.7007C34.5096 93.2222 35.121 93.0578 35.5996 93.3336L65.0996 110.334C65.5781 110.609 65.7425 111.221 65.4667 111.699C65.1909 112.178 64.5795 112.342 64.101 112.066L34.601 95.0664C34.1225 94.7907 33.9581 94.1792 34.2338 93.7007ZM282.501 235.834C282.023 235.558 281.411 235.721 281.134 236.199C280.858 236.678 281.021 237.289 281.5 237.566L310.9 254.566C311.378 254.842 311.989 254.679 312.266 254.201C312.542 253.722 312.379 253.111 311.901 252.834L282.501 235.834Z" 
          fill="#24252A" />

        {/* Inner Circle Path */}
        <path className="inner-circle" 
          ref={innerCircleRef}
          d="M174.062 238.872C208.856 238.872 237.062 210.666 237.062 175.872C237.062 141.078 208.856 112.872 174.062 112.872C139.269 112.872 111.062 141.078 111.062 175.872C111.062 210.666 139.269 238.872 174.062 238.872Z" 
          stroke="#87888C" 
          strokeOpacity="0.15" 
          strokeWidth="4" />

        {/* Text Elements */}
        {scaledPositions.map((pos, idx) => (
          <g
            className="speed-group"
            key={idx}
            style={{
              transform: `translate(${pos.x}px, ${pos.y}px)`,
            }}
          >
            <text className="speed-text">
              <tspan x="-15" y="15.71">{pos.speed}</tspan>
            </text>
          </g>
        ))}

        {/* Speed Unit Path */}
        <path className="speed-unit" 
          ref={speedUnitRef}
          d="M156.505 209.872L152.257 204.292V209.872H149.179V197.236H152.257V202.78L156.469 197.236H160.087L155.191 203.428L160.267 209.872H156.505ZM174.545 199.72C175.793 199.72 176.783 200.098 177.515 200.854C178.259 201.61 178.631 202.66 178.631 204.004V209.872H175.571V204.418C175.571 203.77 175.397 203.272 175.049 202.924C174.713 202.564 174.245 202.384 173.645 202.384C173.045 202.384 172.571 202.564 172.223 202.924C171.887 203.272 171.719 203.77 171.719 204.418V209.872H168.659V204.418C168.659 203.77 168.485 203.272 168.137 202.924C167.801 202.564 167.333 202.384 166.733 202.384C166.133 202.384 165.659 202.564 165.311 202.924C164.975 203.272 164.807 203.77 164.807 204.418V209.872H161.729V199.828H164.807V201.088C165.119 200.668 165.527 200.338 166.031 200.098C166.535 199.846 167.105 199.72 167.741 199.72C168.497 199.72 169.169 199.882 169.757 200.206C170.357 200.53 170.825 200.992 171.161 201.592C171.509 201.04 171.983 200.59 172.583 200.242C173.183 199.894 173.837 199.72 174.545 199.72ZM187.642 192.772L182.818 213.238H179.848L184.672 192.772H187.642ZM195.114 199.72C196.266 199.72 197.19 200.104 197.886 200.872C198.582 201.628 198.93 202.672 198.93 204.004V209.872H195.87V204.418C195.87 203.746 195.696 203.224 195.348 202.852C195 202.48 194.532 202.294 193.944 202.294C193.356 202.294 192.888 202.48 192.54 202.852C192.192 203.224 192.018 203.746 192.018 204.418V209.872H188.94V196.552H192.018V201.178C192.33 200.734 192.756 200.38 193.296 200.116C193.836 199.852 194.442 199.72 195.114 199.72Z" 
          fill="#87888C" />

        {/* Speed Display Text (Inside SVG) */}
        <g className="speed-group" transform="translate(188.32, 157.50)">
          <text className="speed speed-text" textAnchor="middle">
            <tspan x="-15" y="15.71">{speed}</tspan>
          </text>
        </g>
      </svg>
    </div>
  );
};

export default Speedometer;