// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float64MultiArrayWrapper = require('../../generated/std_msgs/std_msgs__msg__Float64MultiArray.js');
const QuaternionWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Quaternion.js');
const TransformStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__TransformStamped.js');
const Int8MultiArrayWrapper = require('../../generated/std_msgs/std_msgs__msg__Int8MultiArray.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const TwistStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__TwistStamped.js');
const WrenchStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__WrenchStamped.js');
const JointStateWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__JointState.js');
const AdmittanceControllerStateRefStruct = StructType({
  mass: Float64MultiArrayWrapper.refObjectType,
  damping: Float64MultiArrayWrapper.refObjectType,
  stiffness: Float64MultiArrayWrapper.refObjectType,
  rot_base_control: QuaternionWrapper.refObjectType,
  ref_trans_base_ft: TransformStampedWrapper.refObjectType,
  selected_axes: Int8MultiArrayWrapper.refObjectType,
  ft_sensor_frame: StringWrapper.refObjectType,
  admittance_position: TransformStampedWrapper.refObjectType,
  admittance_acceleration: TwistStampedWrapper.refObjectType,
  admittance_velocity: TwistStampedWrapper.refObjectType,
  wrench_base: WrenchStampedWrapper.refObjectType,
  joint_state: JointStateWrapper.refObjectType,
});
const AdmittanceControllerStateRefArray = ArrayType(AdmittanceControllerStateRefStruct);
const AdmittanceControllerStateRefStructArray = StructType({
  data: AdmittanceControllerStateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class AdmittanceControllerStateWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new AdmittanceControllerStateRefStruct(other._refObject.toObject());
      this._wrapperFields.mass =  new Float64MultiArrayWrapper(other._wrapperFields.mass);
      this._wrapperFields.damping =  new Float64MultiArrayWrapper(other._wrapperFields.damping);
      this._wrapperFields.stiffness =  new Float64MultiArrayWrapper(other._wrapperFields.stiffness);
      this._wrapperFields.rot_base_control =  new QuaternionWrapper(other._wrapperFields.rot_base_control);
      this._wrapperFields.ref_trans_base_ft =  new TransformStampedWrapper(other._wrapperFields.ref_trans_base_ft);
      this._wrapperFields.selected_axes =  new Int8MultiArrayWrapper(other._wrapperFields.selected_axes);
      this._wrapperFields.ft_sensor_frame =  new StringWrapper(other._wrapperFields.ft_sensor_frame);
      this._wrapperFields.admittance_position =  new TransformStampedWrapper(other._wrapperFields.admittance_position);
      this._wrapperFields.admittance_acceleration =  new TwistStampedWrapper(other._wrapperFields.admittance_acceleration);
      this._wrapperFields.admittance_velocity =  new TwistStampedWrapper(other._wrapperFields.admittance_velocity);
      this._wrapperFields.wrench_base =  new WrenchStampedWrapper(other._wrapperFields.wrench_base);
      this._wrapperFields.joint_state =  new JointStateWrapper(other._wrapperFields.joint_state);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new AdmittanceControllerStateRefStruct();
    this._wrapperFields.mass = new Float64MultiArrayWrapper();
    this._wrapperFields.damping = new Float64MultiArrayWrapper();
    this._wrapperFields.stiffness = new Float64MultiArrayWrapper();
    this._wrapperFields.rot_base_control = new QuaternionWrapper();
    this._wrapperFields.ref_trans_base_ft = new TransformStampedWrapper();
    this._wrapperFields.selected_axes = new Int8MultiArrayWrapper();
    this._wrapperFields.ft_sensor_frame = new StringWrapper();
    this._wrapperFields.admittance_position = new TransformStampedWrapper();
    this._wrapperFields.admittance_acceleration = new TwistStampedWrapper();
    this._wrapperFields.admittance_velocity = new TwistStampedWrapper();
    this._wrapperFields.wrench_base = new WrenchStampedWrapper();
    this._wrapperFields.joint_state = new JointStateWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new AdmittanceControllerStateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new AdmittanceControllerStateArrayWrapper;
  }
  static get ArrayType() {
    return AdmittanceControllerStateArrayWrapper;
  }
  static get refObjectArrayType() {
    return AdmittanceControllerStateRefStructArray
  }
  static get refObjectType() {
    return AdmittanceControllerStateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.mass.freeze(own, checkConsistency);
    this._refObject.mass = this._wrapperFields.mass.refObject;
    this._wrapperFields.damping.freeze(own, checkConsistency);
    this._refObject.damping = this._wrapperFields.damping.refObject;
    this._wrapperFields.stiffness.freeze(own, checkConsistency);
    this._refObject.stiffness = this._wrapperFields.stiffness.refObject;
    this._wrapperFields.rot_base_control.freeze(own, checkConsistency);
    this._refObject.rot_base_control = this._wrapperFields.rot_base_control.refObject;
    this._wrapperFields.ref_trans_base_ft.freeze(own, checkConsistency);
    this._refObject.ref_trans_base_ft = this._wrapperFields.ref_trans_base_ft.refObject;
    this._wrapperFields.selected_axes.freeze(own, checkConsistency);
    this._refObject.selected_axes = this._wrapperFields.selected_axes.refObject;
    this._wrapperFields.ft_sensor_frame.freeze(own, checkConsistency);
    this._refObject.ft_sensor_frame = this._wrapperFields.ft_sensor_frame.refObject;
    this._wrapperFields.admittance_position.freeze(own, checkConsistency);
    this._refObject.admittance_position = this._wrapperFields.admittance_position.refObject;
    this._wrapperFields.admittance_acceleration.freeze(own, checkConsistency);
    this._refObject.admittance_acceleration = this._wrapperFields.admittance_acceleration.refObject;
    this._wrapperFields.admittance_velocity.freeze(own, checkConsistency);
    this._refObject.admittance_velocity = this._wrapperFields.admittance_velocity.refObject;
    this._wrapperFields.wrench_base.freeze(own, checkConsistency);
    this._refObject.wrench_base = this._wrapperFields.wrench_base.refObject;
    this._wrapperFields.joint_state.freeze(own, checkConsistency);
    this._refObject.joint_state = this._wrapperFields.joint_state.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.mass.copyRefObject(refObject.mass);
    this._wrapperFields.damping.copyRefObject(refObject.damping);
    this._wrapperFields.stiffness.copyRefObject(refObject.stiffness);
    this._wrapperFields.rot_base_control.copyRefObject(refObject.rot_base_control);
    this._wrapperFields.ref_trans_base_ft.copyRefObject(refObject.ref_trans_base_ft);
    this._wrapperFields.selected_axes.copyRefObject(refObject.selected_axes);
    this._wrapperFields.ft_sensor_frame.copyRefObject(refObject.ft_sensor_frame);
    this._wrapperFields.admittance_position.copyRefObject(refObject.admittance_position);
    this._wrapperFields.admittance_acceleration.copyRefObject(refObject.admittance_acceleration);
    this._wrapperFields.admittance_velocity.copyRefObject(refObject.admittance_velocity);
    this._wrapperFields.wrench_base.copyRefObject(refObject.wrench_base);
    this._wrapperFields.joint_state.copyRefObject(refObject.joint_state);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    Float64MultiArrayWrapper.freeStruct(refObject.mass);
    Float64MultiArrayWrapper.freeStruct(refObject.damping);
    Float64MultiArrayWrapper.freeStruct(refObject.stiffness);
    QuaternionWrapper.freeStruct(refObject.rot_base_control);
    TransformStampedWrapper.freeStruct(refObject.ref_trans_base_ft);
    Int8MultiArrayWrapper.freeStruct(refObject.selected_axes);
    StringWrapper.freeStruct(refObject.ft_sensor_frame);
    TransformStampedWrapper.freeStruct(refObject.admittance_position);
    TwistStampedWrapper.freeStruct(refObject.admittance_acceleration);
    TwistStampedWrapper.freeStruct(refObject.admittance_velocity);
    WrenchStampedWrapper.freeStruct(refObject.wrench_base);
    JointStateWrapper.freeStruct(refObject.joint_state);
  }
  static destoryRawROS(msg) {
    AdmittanceControllerStateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'control_msgs', subFolder: 'msg', interfaceName: 'AdmittanceControllerState'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get mass() {
    return this._wrapperFields.mass;
  }
  set mass(value) {
    if (value instanceof Float64MultiArrayWrapper) {
      this._wrapperFields.mass.copy(value);
    } else {
      this._wrapperFields.mass.copy(new Float64MultiArrayWrapper(value));
    }
  }
  get damping() {
    return this._wrapperFields.damping;
  }
  set damping(value) {
    if (value instanceof Float64MultiArrayWrapper) {
      this._wrapperFields.damping.copy(value);
    } else {
      this._wrapperFields.damping.copy(new Float64MultiArrayWrapper(value));
    }
  }
  get stiffness() {
    return this._wrapperFields.stiffness;
  }
  set stiffness(value) {
    if (value instanceof Float64MultiArrayWrapper) {
      this._wrapperFields.stiffness.copy(value);
    } else {
      this._wrapperFields.stiffness.copy(new Float64MultiArrayWrapper(value));
    }
  }
  get rot_base_control() {
    return this._wrapperFields.rot_base_control;
  }
  set rot_base_control(value) {
    if (value instanceof QuaternionWrapper) {
      this._wrapperFields.rot_base_control.copy(value);
    } else {
      this._wrapperFields.rot_base_control.copy(new QuaternionWrapper(value));
    }
  }
  get ref_trans_base_ft() {
    return this._wrapperFields.ref_trans_base_ft;
  }
  set ref_trans_base_ft(value) {
    if (value instanceof TransformStampedWrapper) {
      this._wrapperFields.ref_trans_base_ft.copy(value);
    } else {
      this._wrapperFields.ref_trans_base_ft.copy(new TransformStampedWrapper(value));
    }
  }
  get selected_axes() {
    return this._wrapperFields.selected_axes;
  }
  set selected_axes(value) {
    if (value instanceof Int8MultiArrayWrapper) {
      this._wrapperFields.selected_axes.copy(value);
    } else {
      this._wrapperFields.selected_axes.copy(new Int8MultiArrayWrapper(value));
    }
  }
  get ft_sensor_frame() {
    return this._wrapperFields.ft_sensor_frame;
  }
  set ft_sensor_frame(value) {
    if (value instanceof StringWrapper) {
      this._wrapperFields.ft_sensor_frame.copy(value);
    } else {
      this._wrapperFields.ft_sensor_frame.copy(new StringWrapper(value));
    }
  }
  get admittance_position() {
    return this._wrapperFields.admittance_position;
  }
  set admittance_position(value) {
    if (value instanceof TransformStampedWrapper) {
      this._wrapperFields.admittance_position.copy(value);
    } else {
      this._wrapperFields.admittance_position.copy(new TransformStampedWrapper(value));
    }
  }
  get admittance_acceleration() {
    return this._wrapperFields.admittance_acceleration;
  }
  set admittance_acceleration(value) {
    if (value instanceof TwistStampedWrapper) {
      this._wrapperFields.admittance_acceleration.copy(value);
    } else {
      this._wrapperFields.admittance_acceleration.copy(new TwistStampedWrapper(value));
    }
  }
  get admittance_velocity() {
    return this._wrapperFields.admittance_velocity;
  }
  set admittance_velocity(value) {
    if (value instanceof TwistStampedWrapper) {
      this._wrapperFields.admittance_velocity.copy(value);
    } else {
      this._wrapperFields.admittance_velocity.copy(new TwistStampedWrapper(value));
    }
  }
  get wrench_base() {
    return this._wrapperFields.wrench_base;
  }
  set wrench_base(value) {
    if (value instanceof WrenchStampedWrapper) {
      this._wrapperFields.wrench_base.copy(value);
    } else {
      this._wrapperFields.wrench_base.copy(new WrenchStampedWrapper(value));
    }
  }
  get joint_state() {
    return this._wrapperFields.joint_state;
  }
  set joint_state(value) {
    if (value instanceof JointStateWrapper) {
      this._wrapperFields.joint_state.copy(value);
    } else {
      this._wrapperFields.joint_state.copy(new JointStateWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new AdmittanceControllerStateRefStruct(refObject.toObject());
    this._wrapperFields.mass.copyRefObject(this._refObject.mass);
    this._wrapperFields.damping.copyRefObject(this._refObject.damping);
    this._wrapperFields.stiffness.copyRefObject(this._refObject.stiffness);
    this._wrapperFields.rot_base_control.copyRefObject(this._refObject.rot_base_control);
    this._wrapperFields.ref_trans_base_ft.copyRefObject(this._refObject.ref_trans_base_ft);
    this._wrapperFields.selected_axes.copyRefObject(this._refObject.selected_axes);
    this._wrapperFields.ft_sensor_frame.copyRefObject(this._refObject.ft_sensor_frame);
    this._wrapperFields.admittance_position.copyRefObject(this._refObject.admittance_position);
    this._wrapperFields.admittance_acceleration.copyRefObject(this._refObject.admittance_acceleration);
    this._wrapperFields.admittance_velocity.copyRefObject(this._refObject.admittance_velocity);
    this._wrapperFields.wrench_base.copyRefObject(this._refObject.wrench_base);
    this._wrapperFields.joint_state.copyRefObject(this._refObject.joint_state);
  }
  copy(other) {
    this._refObject = new AdmittanceControllerStateRefStruct(other._refObject.toObject());
    this._wrapperFields.mass.copy(other._wrapperFields.mass);
    this._wrapperFields.damping.copy(other._wrapperFields.damping);
    this._wrapperFields.stiffness.copy(other._wrapperFields.stiffness);
    this._wrapperFields.rot_base_control.copy(other._wrapperFields.rot_base_control);
    this._wrapperFields.ref_trans_base_ft.copy(other._wrapperFields.ref_trans_base_ft);
    this._wrapperFields.selected_axes.copy(other._wrapperFields.selected_axes);
    this._wrapperFields.ft_sensor_frame.copy(other._wrapperFields.ft_sensor_frame);
    this._wrapperFields.admittance_position.copy(other._wrapperFields.admittance_position);
    this._wrapperFields.admittance_acceleration.copy(other._wrapperFields.admittance_acceleration);
    this._wrapperFields.admittance_velocity.copy(other._wrapperFields.admittance_velocity);
    this._wrapperFields.wrench_base.copy(other._wrapperFields.wrench_base);
    this._wrapperFields.joint_state.copy(other._wrapperFields.joint_state);
  }
  static get classType() {
    return AdmittanceControllerStateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"mass","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Float64MultiArray","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"damping","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Float64MultiArray","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"stiffness","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Float64MultiArray","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"rot_base_control","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Quaternion","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ref_trans_base_ft","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"TransformStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"selected_axes","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Int8MultiArray","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ft_sensor_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"String","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"admittance_position","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"TransformStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"admittance_acceleration","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"TwistStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"admittance_velocity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"TwistStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"wrench_base","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"WrenchStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"joint_state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"JointState","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"control_msgs","type":"AdmittanceControllerState","stringUpperBound":null,"isPrimitiveType":false},"msgName":"AdmittanceControllerState"};
  }
  hasMember(name) {
    let memberNames = ["mass","damping","stiffness","rot_base_control","ref_trans_base_ft","selected_axes","ft_sensor_frame","admittance_position","admittance_acceleration","admittance_velocity","wrench_base","joint_state"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class AdmittanceControllerStateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof AdmittanceControllerStateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new AdmittanceControllerStateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to AdmittanceControllerStateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to AdmittanceControllerStateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new AdmittanceControllerStateRefArray(size);
    this._refObject = new AdmittanceControllerStateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new AdmittanceControllerStateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof AdmittanceControllerStateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "AdmittanceControllerStateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      AdmittanceControllerStateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return AdmittanceControllerStateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return AdmittanceControllerStateArrayWrapper;
  }
}
module.exports = AdmittanceControllerStateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "mass",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Float64MultiArray",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "damping",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Float64MultiArray",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "stiffness",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Float64MultiArray",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "rot_base_control",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Quaternion",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ref_trans_base_ft",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "TransformStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "selected_axes",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Int8MultiArray",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ft_sensor_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "String",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "admittance_position",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "TransformStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "admittance_acceleration",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "TwistStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "admittance_velocity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "TwistStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "wrench_base",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "WrenchStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "joint_state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "JointState",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "control_msgs",
    "type": "AdmittanceControllerState",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "AdmittanceControllerState"
}
*/
