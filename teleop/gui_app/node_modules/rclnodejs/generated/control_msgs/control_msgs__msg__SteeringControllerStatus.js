// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const SteeringControllerStatusRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  traction_wheels_position: Float64Wrapper.refObjectArrayType,
  traction_wheels_velocity: Float64Wrapper.refObjectArrayType,
  steer_positions: Float64Wrapper.refObjectArrayType,
  linear_velocity_command: Float64Wrapper.refObjectArrayType,
  steering_angle_command: Float64Wrapper.refObjectArrayType,
});
const SteeringControllerStatusRefArray = ArrayType(SteeringControllerStatusRefStruct);
const SteeringControllerStatusRefStructArray = StructType({
  data: SteeringControllerStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SteeringControllerStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SteeringControllerStatusRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.traction_wheels_position = Float64Wrapper.createArray();
      this._wrapperFields.traction_wheels_position.copy(other._wrapperFields.traction_wheels_position);
      this._wrapperFields.traction_wheels_velocity = Float64Wrapper.createArray();
      this._wrapperFields.traction_wheels_velocity.copy(other._wrapperFields.traction_wheels_velocity);
      this._wrapperFields.steer_positions = Float64Wrapper.createArray();
      this._wrapperFields.steer_positions.copy(other._wrapperFields.steer_positions);
      this._wrapperFields.linear_velocity_command = Float64Wrapper.createArray();
      this._wrapperFields.linear_velocity_command.copy(other._wrapperFields.linear_velocity_command);
      this._wrapperFields.steering_angle_command = Float64Wrapper.createArray();
      this._wrapperFields.steering_angle_command.copy(other._wrapperFields.steering_angle_command);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SteeringControllerStatusRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.traction_wheels_position = Float64Wrapper.createArray();
    this._wrapperFields.traction_wheels_velocity = Float64Wrapper.createArray();
    this._wrapperFields.steer_positions = Float64Wrapper.createArray();
    this._wrapperFields.linear_velocity_command = Float64Wrapper.createArray();
    this._wrapperFields.steering_angle_command = Float64Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new SteeringControllerStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SteeringControllerStatusArrayWrapper;
  }
  static get ArrayType() {
    return SteeringControllerStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return SteeringControllerStatusRefStructArray
  }
  static get refObjectType() {
    return SteeringControllerStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.traction_wheels_position.freeze(own, checkConsistency);
    this._refObject.traction_wheels_position = this._wrapperFields.traction_wheels_position.refObject;
    if (own) {
      this._wrapperFields.traction_wheels_position.fill(Float64Array.from([]));
      this._wrapperFields.traction_wheels_position.freeze(own, checkConsistency);
      this._refObject.traction_wheels_position = this._wrapperFields.traction_wheels_position.refObject;
    }
    this._wrapperFields.traction_wheels_velocity.freeze(own, checkConsistency);
    this._refObject.traction_wheels_velocity = this._wrapperFields.traction_wheels_velocity.refObject;
    if (own) {
      this._wrapperFields.traction_wheels_velocity.fill(Float64Array.from([]));
      this._wrapperFields.traction_wheels_velocity.freeze(own, checkConsistency);
      this._refObject.traction_wheels_velocity = this._wrapperFields.traction_wheels_velocity.refObject;
    }
    this._wrapperFields.steer_positions.freeze(own, checkConsistency);
    this._refObject.steer_positions = this._wrapperFields.steer_positions.refObject;
    if (own) {
      this._wrapperFields.steer_positions.fill(Float64Array.from([]));
      this._wrapperFields.steer_positions.freeze(own, checkConsistency);
      this._refObject.steer_positions = this._wrapperFields.steer_positions.refObject;
    }
    this._wrapperFields.linear_velocity_command.freeze(own, checkConsistency);
    this._refObject.linear_velocity_command = this._wrapperFields.linear_velocity_command.refObject;
    if (own) {
      this._wrapperFields.linear_velocity_command.fill(Float64Array.from([]));
      this._wrapperFields.linear_velocity_command.freeze(own, checkConsistency);
      this._refObject.linear_velocity_command = this._wrapperFields.linear_velocity_command.refObject;
    }
    this._wrapperFields.steering_angle_command.freeze(own, checkConsistency);
    this._refObject.steering_angle_command = this._wrapperFields.steering_angle_command.refObject;
    if (own) {
      this._wrapperFields.steering_angle_command.fill(Float64Array.from([]));
      this._wrapperFields.steering_angle_command.freeze(own, checkConsistency);
      this._refObject.steering_angle_command = this._wrapperFields.steering_angle_command.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.traction_wheels_position.copyRefObject(refObject.traction_wheels_position);
    this._wrapperFields.traction_wheels_velocity.copyRefObject(refObject.traction_wheels_velocity);
    this._wrapperFields.steer_positions.copyRefObject(refObject.steer_positions);
    this._wrapperFields.linear_velocity_command.copyRefObject(refObject.linear_velocity_command);
    this._wrapperFields.steering_angle_command.copyRefObject(refObject.steering_angle_command);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    if (refObject.traction_wheels_position.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.traction_wheels_position);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.traction_wheels_position, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.traction_wheels_velocity.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.traction_wheels_velocity);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.traction_wheels_velocity, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.steer_positions.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.steer_positions);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.steer_positions, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.linear_velocity_command.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.linear_velocity_command);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.linear_velocity_command, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.steering_angle_command.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.steering_angle_command);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.steering_angle_command, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    SteeringControllerStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'control_msgs', subFolder: 'msg', interfaceName: 'SteeringControllerStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get traction_wheels_position() {
    return this._wrapperFields['traction_wheels_position'].data;
  }
  set traction_wheels_position(value) {
    this._wrapperFields['traction_wheels_position'].fill(value);
  }
  get traction_wheels_velocity() {
    return this._wrapperFields['traction_wheels_velocity'].data;
  }
  set traction_wheels_velocity(value) {
    this._wrapperFields['traction_wheels_velocity'].fill(value);
  }
  get steer_positions() {
    return this._wrapperFields['steer_positions'].data;
  }
  set steer_positions(value) {
    this._wrapperFields['steer_positions'].fill(value);
  }
  get linear_velocity_command() {
    return this._wrapperFields['linear_velocity_command'].data;
  }
  set linear_velocity_command(value) {
    this._wrapperFields['linear_velocity_command'].fill(value);
  }
  get steering_angle_command() {
    return this._wrapperFields['steering_angle_command'].data;
  }
  set steering_angle_command(value) {
    this._wrapperFields['steering_angle_command'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new SteeringControllerStatusRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.traction_wheels_position.copyRefObject(this._refObject.traction_wheels_position);
    this._wrapperFields.traction_wheels_velocity.copyRefObject(this._refObject.traction_wheels_velocity);
    this._wrapperFields.steer_positions.copyRefObject(this._refObject.steer_positions);
    this._wrapperFields.linear_velocity_command.copyRefObject(this._refObject.linear_velocity_command);
    this._wrapperFields.steering_angle_command.copyRefObject(this._refObject.steering_angle_command);
  }
  copy(other) {
    this._refObject = new SteeringControllerStatusRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.traction_wheels_position.copy(other._wrapperFields.traction_wheels_position);
    this._wrapperFields.traction_wheels_velocity.copy(other._wrapperFields.traction_wheels_velocity);
    this._wrapperFields.steer_positions.copy(other._wrapperFields.steer_positions);
    this._wrapperFields.linear_velocity_command.copy(other._wrapperFields.linear_velocity_command);
    this._wrapperFields.steering_angle_command.copy(other._wrapperFields.steering_angle_command);
  }
  static get classType() {
    return SteeringControllerStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"traction_wheels_position","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"traction_wheels_velocity","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"steer_positions","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"linear_velocity_command","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"steering_angle_command","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"control_msgs","type":"SteeringControllerStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SteeringControllerStatus"};
  }
  hasMember(name) {
    let memberNames = ["header","traction_wheels_position","traction_wheels_velocity","steer_positions","linear_velocity_command","steering_angle_command"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SteeringControllerStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SteeringControllerStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SteeringControllerStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SteeringControllerStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SteeringControllerStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SteeringControllerStatusRefArray(size);
    this._refObject = new SteeringControllerStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SteeringControllerStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SteeringControllerStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SteeringControllerStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SteeringControllerStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SteeringControllerStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SteeringControllerStatusArrayWrapper;
  }
}
module.exports = SteeringControllerStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "traction_wheels_position",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "traction_wheels_velocity",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "steer_positions",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "linear_velocity_command",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "steering_angle_command",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "control_msgs",
    "type": "SteeringControllerStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SteeringControllerStatus"
}
*/
