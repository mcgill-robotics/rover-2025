// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const ChainConnectionWrapper = require('../../generated/controller_manager_msgs/controller_manager_msgs__msg__ChainConnection.js');
const ControllerStateRefStruct = StructType({
  name: primitiveTypes.string,
  state: primitiveTypes.string,
  type: primitiveTypes.string,
  claimed_interfaces: StringWrapper.refObjectArrayType,
  required_command_interfaces: StringWrapper.refObjectArrayType,
  required_state_interfaces: StringWrapper.refObjectArrayType,
  is_chainable: primitiveTypes.bool,
  is_chained: primitiveTypes.bool,
  reference_interfaces: StringWrapper.refObjectArrayType,
  chain_connections: ChainConnectionWrapper.refObjectArrayType,
});
const ControllerStateRefArray = ArrayType(ControllerStateRefStruct);
const ControllerStateRefStructArray = StructType({
  data: ControllerStateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ControllerStateWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._claimed_interfacesArray = [];
    this._required_command_interfacesArray = [];
    this._required_state_interfacesArray = [];
    this._reference_interfacesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ControllerStateRefStruct(other._refObject.toObject());
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._stateIntialized = true;
      this._wrapperFields.state =  new StringWrapper(other._wrapperFields.state);
      this._typeIntialized = true;
      this._wrapperFields.type =  new StringWrapper(other._wrapperFields.type);
      this._wrapperFields.claimed_interfaces = StringWrapper.createArray();
      this._wrapperFields.claimed_interfaces.copy(other._wrapperFields.claimed_interfaces);
      this.claimed_interfaces = other.claimed_interfaces;
      this._wrapperFields.required_command_interfaces = StringWrapper.createArray();
      this._wrapperFields.required_command_interfaces.copy(other._wrapperFields.required_command_interfaces);
      this.required_command_interfaces = other.required_command_interfaces;
      this._wrapperFields.required_state_interfaces = StringWrapper.createArray();
      this._wrapperFields.required_state_interfaces.copy(other._wrapperFields.required_state_interfaces);
      this.required_state_interfaces = other.required_state_interfaces;
      this._is_chainableIntialized = true;
      this._is_chainedIntialized = true;
      this._wrapperFields.reference_interfaces = StringWrapper.createArray();
      this._wrapperFields.reference_interfaces.copy(other._wrapperFields.reference_interfaces);
      this.reference_interfaces = other.reference_interfaces;
      this._wrapperFields.chain_connections = ChainConnectionWrapper.createArray();
      this._wrapperFields.chain_connections.copy(other._wrapperFields.chain_connections);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ControllerStateRefStruct();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._stateIntialized = false;
    this._wrapperFields.state = new StringWrapper();
    this._typeIntialized = false;
    this._wrapperFields.type = new StringWrapper();
    this._wrapperFields.claimed_interfaces = StringWrapper.createArray();
    this._wrapperFields.required_command_interfaces = StringWrapper.createArray();
    this._wrapperFields.required_state_interfaces = StringWrapper.createArray();
    this._is_chainableIntialized = false;
    this._is_chainedIntialized = false;
    this._wrapperFields.reference_interfaces = StringWrapper.createArray();
    this._wrapperFields.chain_connections = ChainConnectionWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ControllerStateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ControllerStateArrayWrapper;
  }
  static get ArrayType() {
    return ControllerStateArrayWrapper;
  }
  static get refObjectArrayType() {
    return ControllerStateRefStructArray
  }
  static get refObjectType() {
    return ControllerStateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in ControllerState');
      }
      if (checkConsistency && !this._stateIntialized) {
        throw new TypeError('Invalid argument: state in ControllerState');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in ControllerState');
      }
      if (checkConsistency && !this._is_chainableIntialized) {
        throw new TypeError('Invalid argument: is_chainable in ControllerState');
      }
      if (checkConsistency && !this._is_chainedIntialized) {
        throw new TypeError('Invalid argument: is_chained in ControllerState');
      }
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    if (own) {
      this._wrapperFields.state.freeze(own, checkConsistency);
    }
    this._refObject.state = this._wrapperFields.state.refObject;
    if (own) {
      this._wrapperFields.type.freeze(own, checkConsistency);
    }
    this._refObject.type = this._wrapperFields.type.refObject;
    if (!own) {
      this._wrapperFields.claimed_interfaces.fill(this._claimed_interfacesArray);
      this._wrapperFields.claimed_interfaces.freeze(own, checkConsistency);
      this._refObject.claimed_interfaces = this._wrapperFields.claimed_interfaces.refObject;
    } else {
      this._wrapperFields.claimed_interfaces.fill([]);
      this._wrapperFields.claimed_interfaces.freeze(own, checkConsistency);
      this._refObject.claimed_interfaces = this._wrapperFields.claimed_interfaces.refObject;
    }
    if (!own) {
      this._wrapperFields.required_command_interfaces.fill(this._required_command_interfacesArray);
      this._wrapperFields.required_command_interfaces.freeze(own, checkConsistency);
      this._refObject.required_command_interfaces = this._wrapperFields.required_command_interfaces.refObject;
    } else {
      this._wrapperFields.required_command_interfaces.fill([]);
      this._wrapperFields.required_command_interfaces.freeze(own, checkConsistency);
      this._refObject.required_command_interfaces = this._wrapperFields.required_command_interfaces.refObject;
    }
    if (!own) {
      this._wrapperFields.required_state_interfaces.fill(this._required_state_interfacesArray);
      this._wrapperFields.required_state_interfaces.freeze(own, checkConsistency);
      this._refObject.required_state_interfaces = this._wrapperFields.required_state_interfaces.refObject;
    } else {
      this._wrapperFields.required_state_interfaces.fill([]);
      this._wrapperFields.required_state_interfaces.freeze(own, checkConsistency);
      this._refObject.required_state_interfaces = this._wrapperFields.required_state_interfaces.refObject;
    }
    if (!own) {
      this._wrapperFields.reference_interfaces.fill(this._reference_interfacesArray);
      this._wrapperFields.reference_interfaces.freeze(own, checkConsistency);
      this._refObject.reference_interfaces = this._wrapperFields.reference_interfaces.refObject;
    } else {
      this._wrapperFields.reference_interfaces.fill([]);
      this._wrapperFields.reference_interfaces.freeze(own, checkConsistency);
      this._refObject.reference_interfaces = this._wrapperFields.reference_interfaces.refObject;
    }
    this._wrapperFields.chain_connections.freeze(own, checkConsistency);
    this._refObject.chain_connections = this._wrapperFields.chain_connections.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._stateIntialized = true;
    this._wrapperFields.state.data = refObject.state.data;
    this._typeIntialized = true;
    this._wrapperFields.type.data = refObject.type.data;
    refObject.claimed_interfaces.data.length = refObject.claimed_interfaces.size;
    for (let index = 0; index < refObject.claimed_interfaces.size; index++) {
      this._claimed_interfacesArray[index] = refObject.claimed_interfaces.data[index].data;
    }
    refObject.required_command_interfaces.data.length = refObject.required_command_interfaces.size;
    for (let index = 0; index < refObject.required_command_interfaces.size; index++) {
      this._required_command_interfacesArray[index] = refObject.required_command_interfaces.data[index].data;
    }
    refObject.required_state_interfaces.data.length = refObject.required_state_interfaces.size;
    for (let index = 0; index < refObject.required_state_interfaces.size; index++) {
      this._required_state_interfacesArray[index] = refObject.required_state_interfaces.data[index].data;
    }
    this._is_chainableIntialized = true;
    this._refObject.is_chainable = refObject.is_chainable;
    this._is_chainedIntialized = true;
    this._refObject.is_chained = refObject.is_chained;
    refObject.reference_interfaces.data.length = refObject.reference_interfaces.size;
    for (let index = 0; index < refObject.reference_interfaces.size; index++) {
      this._reference_interfacesArray[index] = refObject.reference_interfaces.data[index].data;
    }
    this._wrapperFields.chain_connections.copyRefObject(refObject.chain_connections);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.name);
    StringWrapper.freeStruct(refObject.state);
    StringWrapper.freeStruct(refObject.type);
    if (refObject.claimed_interfaces.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.claimed_interfaces);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.claimed_interfaces, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.required_command_interfaces.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.required_command_interfaces);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.required_command_interfaces, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.required_state_interfaces.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.required_state_interfaces);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.required_state_interfaces, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.reference_interfaces.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.reference_interfaces);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.reference_interfaces, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.chain_connections.size != 0) {
      ChainConnectionWrapper.ArrayType.freeArray(refObject.chain_connections);
      if (ChainConnectionWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.chain_connections, ChainConnectionWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    ControllerStateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'controller_manager_msgs', subFolder: 'msg', interfaceName: 'ControllerState'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get state() {
    if (!this._stateIntialized) {
      return undefined;
    }
    return this._wrapperFields.state.data;
  }
  set state(value) {
    this._stateIntialized = true;
    this._wrapperFields.state.data = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._wrapperFields.type.data;
  }
  set type(value) {
    this._typeIntialized = true;
    this._wrapperFields.type.data = value;
  }
  get claimed_interfaces() {
    return this._claimed_interfacesArray;
  }
  set claimed_interfaces(value) {
    this._claimed_interfacesArray = value;
  }
  get required_command_interfaces() {
    return this._required_command_interfacesArray;
  }
  set required_command_interfaces(value) {
    this._required_command_interfacesArray = value;
  }
  get required_state_interfaces() {
    return this._required_state_interfacesArray;
  }
  set required_state_interfaces(value) {
    this._required_state_interfacesArray = value;
  }
  get is_chainable() {
    if (!this._is_chainableIntialized) {
      return undefined;
    }
    return this._refObject.is_chainable;
  }
  set is_chainable(value) {
    this._is_chainableIntialized = true;
    this._refObject.is_chainable = value;
  }
  get is_chained() {
    if (!this._is_chainedIntialized) {
      return undefined;
    }
    return this._refObject.is_chained;
  }
  set is_chained(value) {
    this._is_chainedIntialized = true;
    this._refObject.is_chained = value;
  }
  get reference_interfaces() {
    return this._reference_interfacesArray;
  }
  set reference_interfaces(value) {
    this._reference_interfacesArray = value;
  }
  get chain_connections() {
    return this._wrapperFields.chain_connections;
  }
  set chain_connections(value) {
    this._wrapperFields.chain_connections.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new ControllerStateRefStruct(refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._stateIntialized = true;
    this._wrapperFields.state.copyRefObject(this._refObject.state);
    this._typeIntialized = true;
    this._wrapperFields.type.copyRefObject(this._refObject.type);
    refObject.claimed_interfaces.data.length = refObject.claimed_interfaces.size;
    for (let index = 0; index < refObject.claimed_interfaces.size; index++) {
      this._claimed_interfacesArray[index] = refObject.claimed_interfaces.data[index].data;
    }
    refObject.required_command_interfaces.data.length = refObject.required_command_interfaces.size;
    for (let index = 0; index < refObject.required_command_interfaces.size; index++) {
      this._required_command_interfacesArray[index] = refObject.required_command_interfaces.data[index].data;
    }
    refObject.required_state_interfaces.data.length = refObject.required_state_interfaces.size;
    for (let index = 0; index < refObject.required_state_interfaces.size; index++) {
      this._required_state_interfacesArray[index] = refObject.required_state_interfaces.data[index].data;
    }
    this._is_chainableIntialized = true;
    this._is_chainedIntialized = true;
    refObject.reference_interfaces.data.length = refObject.reference_interfaces.size;
    for (let index = 0; index < refObject.reference_interfaces.size; index++) {
      this._reference_interfacesArray[index] = refObject.reference_interfaces.data[index].data;
    }
    this._wrapperFields.chain_connections.copyRefObject(this._refObject.chain_connections);
  }
  copy(other) {
    this._refObject = new ControllerStateRefStruct(other._refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._stateIntialized = true;
    this._wrapperFields.state.copy(other._wrapperFields.state);
    this._typeIntialized = true;
    this._wrapperFields.type.copy(other._wrapperFields.type);
    this._claimed_interfacesArray = other._claimed_interfacesArray.slice();
    this._required_command_interfacesArray = other._required_command_interfacesArray.slice();
    this._required_state_interfacesArray = other._required_state_interfacesArray.slice();
    this._is_chainableIntialized = true;
    this._is_chainedIntialized = true;
    this._reference_interfacesArray = other._reference_interfacesArray.slice();
    this._wrapperFields.chain_connections.copy(other._wrapperFields.chain_connections);
  }
  static get classType() {
    return ControllerStateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"claimed_interfaces","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"required_command_interfaces","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"required_state_interfaces","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_chainable","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_chained","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"reference_interfaces","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"chain_connections","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"controller_manager_msgs","type":"ChainConnection","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"controller_manager_msgs","type":"ControllerState","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ControllerState"};
  }
  hasMember(name) {
    let memberNames = ["name","state","type","claimed_interfaces","required_command_interfaces","required_state_interfaces","is_chainable","is_chained","reference_interfaces","chain_connections"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ControllerStateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ControllerStateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ControllerStateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ControllerStateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ControllerStateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ControllerStateRefArray(size);
    this._refObject = new ControllerStateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ControllerStateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ControllerStateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ControllerStateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ControllerStateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ControllerStateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ControllerStateArrayWrapper;
  }
}
module.exports = ControllerStateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "claimed_interfaces",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "required_command_interfaces",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "required_state_interfaces",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_chainable",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_chained",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "reference_interfaces",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "chain_connections",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "controller_manager_msgs",
        "type": "ChainConnection",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "controller_manager_msgs",
    "type": "ControllerState",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ControllerState"
}
*/
