// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const MoveItErrorCodesWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__MoveItErrorCodes.js');
const RobotStateWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__RobotState.js');
const RobotTrajectoryWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__RobotTrajectory.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PlaceLocationWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__PlaceLocation.js');
const Place_ResultRefStruct = StructType({
  error_code: MoveItErrorCodesWrapper.refObjectType,
  trajectory_start: RobotStateWrapper.refObjectType,
  trajectory_stages: RobotTrajectoryWrapper.refObjectArrayType,
  trajectory_descriptions: StringWrapper.refObjectArrayType,
  place_location: PlaceLocationWrapper.refObjectType,
  planning_time: primitiveTypes.float64,
});
const Place_ResultRefArray = ArrayType(Place_ResultRefStruct);
const Place_ResultRefStructArray = StructType({
  data: Place_ResultRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class Place_ResultWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._trajectory_descriptionsArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new Place_ResultRefStruct(other._refObject.toObject());
      this._wrapperFields.error_code =  new MoveItErrorCodesWrapper(other._wrapperFields.error_code);
      this._wrapperFields.trajectory_start =  new RobotStateWrapper(other._wrapperFields.trajectory_start);
      this._wrapperFields.trajectory_stages = RobotTrajectoryWrapper.createArray();
      this._wrapperFields.trajectory_stages.copy(other._wrapperFields.trajectory_stages);
      this._wrapperFields.trajectory_descriptions = StringWrapper.createArray();
      this._wrapperFields.trajectory_descriptions.copy(other._wrapperFields.trajectory_descriptions);
      this.trajectory_descriptions = other.trajectory_descriptions;
      this._wrapperFields.place_location =  new PlaceLocationWrapper(other._wrapperFields.place_location);
      this._planning_timeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new Place_ResultRefStruct();
    this._wrapperFields.error_code = new MoveItErrorCodesWrapper();
    this._wrapperFields.trajectory_start = new RobotStateWrapper();
    this._wrapperFields.trajectory_stages = RobotTrajectoryWrapper.createArray();
    this._wrapperFields.trajectory_descriptions = StringWrapper.createArray();
    this._wrapperFields.place_location = new PlaceLocationWrapper();
    this._planning_timeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new Place_ResultWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new Place_ResultArrayWrapper;
  }
  static get ArrayType() {
    return Place_ResultArrayWrapper;
  }
  static get refObjectArrayType() {
    return Place_ResultRefStructArray
  }
  static get refObjectType() {
    return Place_ResultRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._planning_timeIntialized) {
        throw new TypeError('Invalid argument: planning_time in Place_Result');
      }
    this._wrapperFields.error_code.freeze(own, checkConsistency);
    this._refObject.error_code = this._wrapperFields.error_code.refObject;
    this._wrapperFields.trajectory_start.freeze(own, checkConsistency);
    this._refObject.trajectory_start = this._wrapperFields.trajectory_start.refObject;
    this._wrapperFields.trajectory_stages.freeze(own, checkConsistency);
    this._refObject.trajectory_stages = this._wrapperFields.trajectory_stages.refObject;
    if (!own) {
      this._wrapperFields.trajectory_descriptions.fill(this._trajectory_descriptionsArray);
      this._wrapperFields.trajectory_descriptions.freeze(own, checkConsistency);
      this._refObject.trajectory_descriptions = this._wrapperFields.trajectory_descriptions.refObject;
    } else {
      this._wrapperFields.trajectory_descriptions.fill([]);
      this._wrapperFields.trajectory_descriptions.freeze(own, checkConsistency);
      this._refObject.trajectory_descriptions = this._wrapperFields.trajectory_descriptions.refObject;
    }
    this._wrapperFields.place_location.freeze(own, checkConsistency);
    this._refObject.place_location = this._wrapperFields.place_location.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.error_code.copyRefObject(refObject.error_code);
    this._wrapperFields.trajectory_start.copyRefObject(refObject.trajectory_start);
    this._wrapperFields.trajectory_stages.copyRefObject(refObject.trajectory_stages);
    refObject.trajectory_descriptions.data.length = refObject.trajectory_descriptions.size;
    for (let index = 0; index < refObject.trajectory_descriptions.size; index++) {
      this._trajectory_descriptionsArray[index] = refObject.trajectory_descriptions.data[index].data;
    }
    this._wrapperFields.place_location.copyRefObject(refObject.place_location);
    this._planning_timeIntialized = true;
    this._refObject.planning_time = refObject.planning_time;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    MoveItErrorCodesWrapper.freeStruct(refObject.error_code);
    RobotStateWrapper.freeStruct(refObject.trajectory_start);
    if (refObject.trajectory_stages.size != 0) {
      RobotTrajectoryWrapper.ArrayType.freeArray(refObject.trajectory_stages);
      if (RobotTrajectoryWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.trajectory_stages, RobotTrajectoryWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.trajectory_descriptions.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.trajectory_descriptions);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.trajectory_descriptions, StringWrapper.refObjectArrayType, 'data');
      }
    }
    PlaceLocationWrapper.freeStruct(refObject.place_location);
  }
  static destoryRawROS(msg) {
    Place_ResultWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'action', interfaceName: 'Place_Result'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get error_code() {
    return this._wrapperFields.error_code;
  }
  set error_code(value) {
    if (value instanceof MoveItErrorCodesWrapper) {
      this._wrapperFields.error_code.copy(value);
    } else {
      this._wrapperFields.error_code.copy(new MoveItErrorCodesWrapper(value));
    }
  }
  get trajectory_start() {
    return this._wrapperFields.trajectory_start;
  }
  set trajectory_start(value) {
    if (value instanceof RobotStateWrapper) {
      this._wrapperFields.trajectory_start.copy(value);
    } else {
      this._wrapperFields.trajectory_start.copy(new RobotStateWrapper(value));
    }
  }
  get trajectory_stages() {
    return this._wrapperFields.trajectory_stages;
  }
  set trajectory_stages(value) {
    this._wrapperFields.trajectory_stages.fill(value);
  }
  get trajectory_descriptions() {
    return this._trajectory_descriptionsArray;
  }
  set trajectory_descriptions(value) {
    this._trajectory_descriptionsArray = value;
  }
  get place_location() {
    return this._wrapperFields.place_location;
  }
  set place_location(value) {
    if (value instanceof PlaceLocationWrapper) {
      this._wrapperFields.place_location.copy(value);
    } else {
      this._wrapperFields.place_location.copy(new PlaceLocationWrapper(value));
    }
  }
  get planning_time() {
    if (!this._planning_timeIntialized) {
      return undefined;
    }
    return this._refObject.planning_time;
  }
  set planning_time(value) {
    this._planning_timeIntialized = true;
    this._refObject.planning_time = value;
  }
  copyRefObject(refObject) {
    this._refObject = new Place_ResultRefStruct(refObject.toObject());
    this._wrapperFields.error_code.copyRefObject(this._refObject.error_code);
    this._wrapperFields.trajectory_start.copyRefObject(this._refObject.trajectory_start);
    this._wrapperFields.trajectory_stages.copyRefObject(this._refObject.trajectory_stages);
    refObject.trajectory_descriptions.data.length = refObject.trajectory_descriptions.size;
    for (let index = 0; index < refObject.trajectory_descriptions.size; index++) {
      this._trajectory_descriptionsArray[index] = refObject.trajectory_descriptions.data[index].data;
    }
    this._wrapperFields.place_location.copyRefObject(this._refObject.place_location);
    this._planning_timeIntialized = true;
  }
  copy(other) {
    this._refObject = new Place_ResultRefStruct(other._refObject.toObject());
    this._wrapperFields.error_code.copy(other._wrapperFields.error_code);
    this._wrapperFields.trajectory_start.copy(other._wrapperFields.trajectory_start);
    this._wrapperFields.trajectory_stages.copy(other._wrapperFields.trajectory_stages);
    this._trajectory_descriptionsArray = other._trajectory_descriptionsArray.slice();
    this._wrapperFields.place_location.copy(other._wrapperFields.place_location);
    this._planning_timeIntialized = true;
  }
  static get classType() {
    return Place_ResultWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"error_code","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"MoveItErrorCodes","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"trajectory_start","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"RobotState","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"trajectory_stages","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"RobotTrajectory","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"trajectory_descriptions","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"place_location","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"PlaceLocation","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"planning_time","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"Place_Result","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Place_Result"};
  }
  hasMember(name) {
    let memberNames = ["error_code","trajectory_start","trajectory_stages","trajectory_descriptions","place_location","planning_time"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class Place_ResultArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof Place_ResultWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new Place_ResultWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to Place_ResultArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to Place_ResultArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new Place_ResultRefArray(size);
    this._refObject = new Place_ResultRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new Place_ResultWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof Place_ResultArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "Place_ResultArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      Place_ResultWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return Place_ResultWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return Place_ResultArrayWrapper;
  }
}
module.exports = Place_ResultWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "error_code",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "MoveItErrorCodes",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "trajectory_start",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "RobotState",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "trajectory_stages",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "RobotTrajectory",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "trajectory_descriptions",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "place_location",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "PlaceLocation",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "planning_time",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "Place_Result",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Place_Result"
}
*/
