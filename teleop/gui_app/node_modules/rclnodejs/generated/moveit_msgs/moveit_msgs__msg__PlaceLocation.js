// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const JointTrajectoryWrapper = require('../../generated/trajectory_msgs/trajectory_msgs__msg__JointTrajectory.js');
const PoseStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__PoseStamped.js');
const GripperTranslationWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__GripperTranslation.js');
const PlaceLocationRefStruct = StructType({
  id: primitiveTypes.string,
  post_place_posture: JointTrajectoryWrapper.refObjectType,
  place_pose: PoseStampedWrapper.refObjectType,
  quality: primitiveTypes.float64,
  pre_place_approach: GripperTranslationWrapper.refObjectType,
  post_place_retreat: GripperTranslationWrapper.refObjectType,
  allowed_touch_objects: StringWrapper.refObjectArrayType,
});
const PlaceLocationRefArray = ArrayType(PlaceLocationRefStruct);
const PlaceLocationRefStructArray = StructType({
  data: PlaceLocationRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PlaceLocationWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._allowed_touch_objectsArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PlaceLocationRefStruct(other._refObject.toObject());
      this._idIntialized = true;
      this._wrapperFields.id =  new StringWrapper(other._wrapperFields.id);
      this._wrapperFields.post_place_posture =  new JointTrajectoryWrapper(other._wrapperFields.post_place_posture);
      this._wrapperFields.place_pose =  new PoseStampedWrapper(other._wrapperFields.place_pose);
      this._qualityIntialized = true;
      this._wrapperFields.pre_place_approach =  new GripperTranslationWrapper(other._wrapperFields.pre_place_approach);
      this._wrapperFields.post_place_retreat =  new GripperTranslationWrapper(other._wrapperFields.post_place_retreat);
      this._wrapperFields.allowed_touch_objects = StringWrapper.createArray();
      this._wrapperFields.allowed_touch_objects.copy(other._wrapperFields.allowed_touch_objects);
      this.allowed_touch_objects = other.allowed_touch_objects;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PlaceLocationRefStruct();
    this._idIntialized = false;
    this._wrapperFields.id = new StringWrapper();
    this._wrapperFields.post_place_posture = new JointTrajectoryWrapper();
    this._wrapperFields.place_pose = new PoseStampedWrapper();
    this._qualityIntialized = false;
    this._wrapperFields.pre_place_approach = new GripperTranslationWrapper();
    this._wrapperFields.post_place_retreat = new GripperTranslationWrapper();
    this._wrapperFields.allowed_touch_objects = StringWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new PlaceLocationWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PlaceLocationArrayWrapper;
  }
  static get ArrayType() {
    return PlaceLocationArrayWrapper;
  }
  static get refObjectArrayType() {
    return PlaceLocationRefStructArray
  }
  static get refObjectType() {
    return PlaceLocationRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._idIntialized) {
        throw new TypeError('Invalid argument: id in PlaceLocation');
      }
      if (checkConsistency && !this._qualityIntialized) {
        throw new TypeError('Invalid argument: quality in PlaceLocation');
      }
    if (own) {
      this._wrapperFields.id.freeze(own, checkConsistency);
    }
    this._refObject.id = this._wrapperFields.id.refObject;
    this._wrapperFields.post_place_posture.freeze(own, checkConsistency);
    this._refObject.post_place_posture = this._wrapperFields.post_place_posture.refObject;
    this._wrapperFields.place_pose.freeze(own, checkConsistency);
    this._refObject.place_pose = this._wrapperFields.place_pose.refObject;
    this._wrapperFields.pre_place_approach.freeze(own, checkConsistency);
    this._refObject.pre_place_approach = this._wrapperFields.pre_place_approach.refObject;
    this._wrapperFields.post_place_retreat.freeze(own, checkConsistency);
    this._refObject.post_place_retreat = this._wrapperFields.post_place_retreat.refObject;
    if (!own) {
      this._wrapperFields.allowed_touch_objects.fill(this._allowed_touch_objectsArray);
      this._wrapperFields.allowed_touch_objects.freeze(own, checkConsistency);
      this._refObject.allowed_touch_objects = this._wrapperFields.allowed_touch_objects.refObject;
    } else {
      this._wrapperFields.allowed_touch_objects.fill([]);
      this._wrapperFields.allowed_touch_objects.freeze(own, checkConsistency);
      this._refObject.allowed_touch_objects = this._wrapperFields.allowed_touch_objects.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._idIntialized = true;
    this._wrapperFields.id.data = refObject.id.data;
    this._wrapperFields.post_place_posture.copyRefObject(refObject.post_place_posture);
    this._wrapperFields.place_pose.copyRefObject(refObject.place_pose);
    this._qualityIntialized = true;
    this._refObject.quality = refObject.quality;
    this._wrapperFields.pre_place_approach.copyRefObject(refObject.pre_place_approach);
    this._wrapperFields.post_place_retreat.copyRefObject(refObject.post_place_retreat);
    refObject.allowed_touch_objects.data.length = refObject.allowed_touch_objects.size;
    for (let index = 0; index < refObject.allowed_touch_objects.size; index++) {
      this._allowed_touch_objectsArray[index] = refObject.allowed_touch_objects.data[index].data;
    }
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.id);
    JointTrajectoryWrapper.freeStruct(refObject.post_place_posture);
    PoseStampedWrapper.freeStruct(refObject.place_pose);
    GripperTranslationWrapper.freeStruct(refObject.pre_place_approach);
    GripperTranslationWrapper.freeStruct(refObject.post_place_retreat);
    if (refObject.allowed_touch_objects.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.allowed_touch_objects);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.allowed_touch_objects, StringWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    PlaceLocationWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'PlaceLocation'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._wrapperFields.id.data;
  }
  set id(value) {
    this._idIntialized = true;
    this._wrapperFields.id.data = value;
  }
  get post_place_posture() {
    return this._wrapperFields.post_place_posture;
  }
  set post_place_posture(value) {
    if (value instanceof JointTrajectoryWrapper) {
      this._wrapperFields.post_place_posture.copy(value);
    } else {
      this._wrapperFields.post_place_posture.copy(new JointTrajectoryWrapper(value));
    }
  }
  get place_pose() {
    return this._wrapperFields.place_pose;
  }
  set place_pose(value) {
    if (value instanceof PoseStampedWrapper) {
      this._wrapperFields.place_pose.copy(value);
    } else {
      this._wrapperFields.place_pose.copy(new PoseStampedWrapper(value));
    }
  }
  get quality() {
    if (!this._qualityIntialized) {
      return undefined;
    }
    return this._refObject.quality;
  }
  set quality(value) {
    this._qualityIntialized = true;
    this._refObject.quality = value;
  }
  get pre_place_approach() {
    return this._wrapperFields.pre_place_approach;
  }
  set pre_place_approach(value) {
    if (value instanceof GripperTranslationWrapper) {
      this._wrapperFields.pre_place_approach.copy(value);
    } else {
      this._wrapperFields.pre_place_approach.copy(new GripperTranslationWrapper(value));
    }
  }
  get post_place_retreat() {
    return this._wrapperFields.post_place_retreat;
  }
  set post_place_retreat(value) {
    if (value instanceof GripperTranslationWrapper) {
      this._wrapperFields.post_place_retreat.copy(value);
    } else {
      this._wrapperFields.post_place_retreat.copy(new GripperTranslationWrapper(value));
    }
  }
  get allowed_touch_objects() {
    return this._allowed_touch_objectsArray;
  }
  set allowed_touch_objects(value) {
    this._allowed_touch_objectsArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PlaceLocationRefStruct(refObject.toObject());
    this._idIntialized = true;
    this._wrapperFields.id.copyRefObject(this._refObject.id);
    this._wrapperFields.post_place_posture.copyRefObject(this._refObject.post_place_posture);
    this._wrapperFields.place_pose.copyRefObject(this._refObject.place_pose);
    this._qualityIntialized = true;
    this._wrapperFields.pre_place_approach.copyRefObject(this._refObject.pre_place_approach);
    this._wrapperFields.post_place_retreat.copyRefObject(this._refObject.post_place_retreat);
    refObject.allowed_touch_objects.data.length = refObject.allowed_touch_objects.size;
    for (let index = 0; index < refObject.allowed_touch_objects.size; index++) {
      this._allowed_touch_objectsArray[index] = refObject.allowed_touch_objects.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new PlaceLocationRefStruct(other._refObject.toObject());
    this._idIntialized = true;
    this._wrapperFields.id.copy(other._wrapperFields.id);
    this._wrapperFields.post_place_posture.copy(other._wrapperFields.post_place_posture);
    this._wrapperFields.place_pose.copy(other._wrapperFields.place_pose);
    this._qualityIntialized = true;
    this._wrapperFields.pre_place_approach.copy(other._wrapperFields.pre_place_approach);
    this._wrapperFields.post_place_retreat.copy(other._wrapperFields.post_place_retreat);
    this._allowed_touch_objectsArray = other._allowed_touch_objectsArray.slice();
  }
  static get classType() {
    return PlaceLocationWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"post_place_posture","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"trajectory_msgs","type":"JointTrajectory","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"place_pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"PoseStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"quality","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pre_place_approach","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"GripperTranslation","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"post_place_retreat","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"GripperTranslation","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"allowed_touch_objects","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"PlaceLocation","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PlaceLocation"};
  }
  hasMember(name) {
    let memberNames = ["id","post_place_posture","place_pose","quality","pre_place_approach","post_place_retreat","allowed_touch_objects"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PlaceLocationArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PlaceLocationWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PlaceLocationWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlaceLocationArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlaceLocationArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PlaceLocationRefArray(size);
    this._refObject = new PlaceLocationRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PlaceLocationWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PlaceLocationArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PlaceLocationArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PlaceLocationWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PlaceLocationWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PlaceLocationArrayWrapper;
  }
}
module.exports = PlaceLocationWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "post_place_posture",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "trajectory_msgs",
        "type": "JointTrajectory",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "place_pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "PoseStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "quality",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pre_place_approach",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "GripperTranslation",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "post_place_retreat",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "GripperTranslation",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "allowed_touch_objects",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "PlaceLocation",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PlaceLocation"
}
*/
