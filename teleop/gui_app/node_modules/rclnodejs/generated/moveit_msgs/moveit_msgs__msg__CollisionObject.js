// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const ObjectTypeWrapper = require('../../generated/object_recognition_msgs/object_recognition_msgs__msg__ObjectType.js');
const SolidPrimitiveWrapper = require('../../generated/shape_msgs/shape_msgs__msg__SolidPrimitive.js');
const MeshWrapper = require('../../generated/shape_msgs/shape_msgs__msg__Mesh.js');
const PlaneWrapper = require('../../generated/shape_msgs/shape_msgs__msg__Plane.js');
const CollisionObjectRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  pose: PoseWrapper.refObjectType,
  id: primitiveTypes.string,
  type: ObjectTypeWrapper.refObjectType,
  primitives: SolidPrimitiveWrapper.refObjectArrayType,
  primitive_poses: PoseWrapper.refObjectArrayType,
  meshes: MeshWrapper.refObjectArrayType,
  mesh_poses: PoseWrapper.refObjectArrayType,
  planes: PlaneWrapper.refObjectArrayType,
  plane_poses: PoseWrapper.refObjectArrayType,
  subframe_names: StringWrapper.refObjectArrayType,
  subframe_poses: PoseWrapper.refObjectArrayType,
  operation: primitiveTypes.byte,
});
const CollisionObjectRefArray = ArrayType(CollisionObjectRefStruct);
const CollisionObjectRefStructArray = StructType({
  data: CollisionObjectRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class CollisionObjectWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._subframe_namesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new CollisionObjectRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._idIntialized = true;
      this._wrapperFields.id =  new StringWrapper(other._wrapperFields.id);
      this._wrapperFields.type =  new ObjectTypeWrapper(other._wrapperFields.type);
      this._wrapperFields.primitives = SolidPrimitiveWrapper.createArray();
      this._wrapperFields.primitives.copy(other._wrapperFields.primitives);
      this._wrapperFields.primitive_poses = PoseWrapper.createArray();
      this._wrapperFields.primitive_poses.copy(other._wrapperFields.primitive_poses);
      this._wrapperFields.meshes = MeshWrapper.createArray();
      this._wrapperFields.meshes.copy(other._wrapperFields.meshes);
      this._wrapperFields.mesh_poses = PoseWrapper.createArray();
      this._wrapperFields.mesh_poses.copy(other._wrapperFields.mesh_poses);
      this._wrapperFields.planes = PlaneWrapper.createArray();
      this._wrapperFields.planes.copy(other._wrapperFields.planes);
      this._wrapperFields.plane_poses = PoseWrapper.createArray();
      this._wrapperFields.plane_poses.copy(other._wrapperFields.plane_poses);
      this._wrapperFields.subframe_names = StringWrapper.createArray();
      this._wrapperFields.subframe_names.copy(other._wrapperFields.subframe_names);
      this.subframe_names = other.subframe_names;
      this._wrapperFields.subframe_poses = PoseWrapper.createArray();
      this._wrapperFields.subframe_poses.copy(other._wrapperFields.subframe_poses);
      this._operationIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new CollisionObjectRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.pose = new PoseWrapper();
    this._idIntialized = false;
    this._wrapperFields.id = new StringWrapper();
    this._wrapperFields.type = new ObjectTypeWrapper();
    this._wrapperFields.primitives = SolidPrimitiveWrapper.createArray();
    this._wrapperFields.primitive_poses = PoseWrapper.createArray();
    this._wrapperFields.meshes = MeshWrapper.createArray();
    this._wrapperFields.mesh_poses = PoseWrapper.createArray();
    this._wrapperFields.planes = PlaneWrapper.createArray();
    this._wrapperFields.plane_poses = PoseWrapper.createArray();
    this._wrapperFields.subframe_names = StringWrapper.createArray();
    this._wrapperFields.subframe_poses = PoseWrapper.createArray();
    this._operationIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new CollisionObjectWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new CollisionObjectArrayWrapper;
  }
  static get ArrayType() {
    return CollisionObjectArrayWrapper;
  }
  static get refObjectArrayType() {
    return CollisionObjectRefStructArray
  }
  static get refObjectType() {
    return CollisionObjectRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._idIntialized) {
        throw new TypeError('Invalid argument: id in CollisionObject');
      }
      if (checkConsistency && !this._operationIntialized) {
        throw new TypeError('Invalid argument: operation in CollisionObject');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    if (own) {
      this._wrapperFields.id.freeze(own, checkConsistency);
    }
    this._refObject.id = this._wrapperFields.id.refObject;
    this._wrapperFields.type.freeze(own, checkConsistency);
    this._refObject.type = this._wrapperFields.type.refObject;
    this._wrapperFields.primitives.freeze(own, checkConsistency);
    this._refObject.primitives = this._wrapperFields.primitives.refObject;
    this._wrapperFields.primitive_poses.freeze(own, checkConsistency);
    this._refObject.primitive_poses = this._wrapperFields.primitive_poses.refObject;
    this._wrapperFields.meshes.freeze(own, checkConsistency);
    this._refObject.meshes = this._wrapperFields.meshes.refObject;
    this._wrapperFields.mesh_poses.freeze(own, checkConsistency);
    this._refObject.mesh_poses = this._wrapperFields.mesh_poses.refObject;
    this._wrapperFields.planes.freeze(own, checkConsistency);
    this._refObject.planes = this._wrapperFields.planes.refObject;
    this._wrapperFields.plane_poses.freeze(own, checkConsistency);
    this._refObject.plane_poses = this._wrapperFields.plane_poses.refObject;
    if (!own) {
      this._wrapperFields.subframe_names.fill(this._subframe_namesArray);
      this._wrapperFields.subframe_names.freeze(own, checkConsistency);
      this._refObject.subframe_names = this._wrapperFields.subframe_names.refObject;
    } else {
      this._wrapperFields.subframe_names.fill([]);
      this._wrapperFields.subframe_names.freeze(own, checkConsistency);
      this._refObject.subframe_names = this._wrapperFields.subframe_names.refObject;
    }
    this._wrapperFields.subframe_poses.freeze(own, checkConsistency);
    this._refObject.subframe_poses = this._wrapperFields.subframe_poses.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._idIntialized = true;
    this._wrapperFields.id.data = refObject.id.data;
    this._wrapperFields.type.copyRefObject(refObject.type);
    this._wrapperFields.primitives.copyRefObject(refObject.primitives);
    this._wrapperFields.primitive_poses.copyRefObject(refObject.primitive_poses);
    this._wrapperFields.meshes.copyRefObject(refObject.meshes);
    this._wrapperFields.mesh_poses.copyRefObject(refObject.mesh_poses);
    this._wrapperFields.planes.copyRefObject(refObject.planes);
    this._wrapperFields.plane_poses.copyRefObject(refObject.plane_poses);
    refObject.subframe_names.data.length = refObject.subframe_names.size;
    for (let index = 0; index < refObject.subframe_names.size; index++) {
      this._subframe_namesArray[index] = refObject.subframe_names.data[index].data;
    }
    this._wrapperFields.subframe_poses.copyRefObject(refObject.subframe_poses);
    this._operationIntialized = true;
    this._refObject.operation = refObject.operation;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    PoseWrapper.freeStruct(refObject.pose);
    StringWrapper.freeStruct(refObject.id);
    ObjectTypeWrapper.freeStruct(refObject.type);
    if (refObject.primitives.size != 0) {
      SolidPrimitiveWrapper.ArrayType.freeArray(refObject.primitives);
      if (SolidPrimitiveWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.primitives, SolidPrimitiveWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.primitive_poses.size != 0) {
      PoseWrapper.ArrayType.freeArray(refObject.primitive_poses);
      if (PoseWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.primitive_poses, PoseWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.meshes.size != 0) {
      MeshWrapper.ArrayType.freeArray(refObject.meshes);
      if (MeshWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.meshes, MeshWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.mesh_poses.size != 0) {
      PoseWrapper.ArrayType.freeArray(refObject.mesh_poses);
      if (PoseWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.mesh_poses, PoseWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.planes.size != 0) {
      PlaneWrapper.ArrayType.freeArray(refObject.planes);
      if (PlaneWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.planes, PlaneWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.plane_poses.size != 0) {
      PoseWrapper.ArrayType.freeArray(refObject.plane_poses);
      if (PoseWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.plane_poses, PoseWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.subframe_names.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.subframe_names);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.subframe_names, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.subframe_poses.size != 0) {
      PoseWrapper.ArrayType.freeArray(refObject.subframe_poses);
      if (PoseWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.subframe_poses, PoseWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    CollisionObjectWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'CollisionObject'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._wrapperFields.id.data;
  }
  set id(value) {
    this._idIntialized = true;
    this._wrapperFields.id.data = value;
  }
  get type() {
    return this._wrapperFields.type;
  }
  set type(value) {
    if (value instanceof ObjectTypeWrapper) {
      this._wrapperFields.type.copy(value);
    } else {
      this._wrapperFields.type.copy(new ObjectTypeWrapper(value));
    }
  }
  get primitives() {
    return this._wrapperFields.primitives;
  }
  set primitives(value) {
    this._wrapperFields.primitives.fill(value);
  }
  get primitive_poses() {
    return this._wrapperFields.primitive_poses;
  }
  set primitive_poses(value) {
    this._wrapperFields.primitive_poses.fill(value);
  }
  get meshes() {
    return this._wrapperFields.meshes;
  }
  set meshes(value) {
    this._wrapperFields.meshes.fill(value);
  }
  get mesh_poses() {
    return this._wrapperFields.mesh_poses;
  }
  set mesh_poses(value) {
    this._wrapperFields.mesh_poses.fill(value);
  }
  get planes() {
    return this._wrapperFields.planes;
  }
  set planes(value) {
    this._wrapperFields.planes.fill(value);
  }
  get plane_poses() {
    return this._wrapperFields.plane_poses;
  }
  set plane_poses(value) {
    this._wrapperFields.plane_poses.fill(value);
  }
  get subframe_names() {
    return this._subframe_namesArray;
  }
  set subframe_names(value) {
    this._subframe_namesArray = value;
  }
  get subframe_poses() {
    return this._wrapperFields.subframe_poses;
  }
  set subframe_poses(value) {
    this._wrapperFields.subframe_poses.fill(value);
  }
  get operation() {
    if (!this._operationIntialized) {
      return undefined;
    }
    return this._refObject.operation;
  }
  set operation(value) {
    this._operationIntialized = true;
    this._refObject.operation = value;
  }
  copyRefObject(refObject) {
    this._refObject = new CollisionObjectRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._idIntialized = true;
    this._wrapperFields.id.copyRefObject(this._refObject.id);
    this._wrapperFields.type.copyRefObject(this._refObject.type);
    this._wrapperFields.primitives.copyRefObject(this._refObject.primitives);
    this._wrapperFields.primitive_poses.copyRefObject(this._refObject.primitive_poses);
    this._wrapperFields.meshes.copyRefObject(this._refObject.meshes);
    this._wrapperFields.mesh_poses.copyRefObject(this._refObject.mesh_poses);
    this._wrapperFields.planes.copyRefObject(this._refObject.planes);
    this._wrapperFields.plane_poses.copyRefObject(this._refObject.plane_poses);
    refObject.subframe_names.data.length = refObject.subframe_names.size;
    for (let index = 0; index < refObject.subframe_names.size; index++) {
      this._subframe_namesArray[index] = refObject.subframe_names.data[index].data;
    }
    this._wrapperFields.subframe_poses.copyRefObject(this._refObject.subframe_poses);
    this._operationIntialized = true;
  }
  copy(other) {
    this._refObject = new CollisionObjectRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._idIntialized = true;
    this._wrapperFields.id.copy(other._wrapperFields.id);
    this._wrapperFields.type.copy(other._wrapperFields.type);
    this._wrapperFields.primitives.copy(other._wrapperFields.primitives);
    this._wrapperFields.primitive_poses.copy(other._wrapperFields.primitive_poses);
    this._wrapperFields.meshes.copy(other._wrapperFields.meshes);
    this._wrapperFields.mesh_poses.copy(other._wrapperFields.mesh_poses);
    this._wrapperFields.planes.copy(other._wrapperFields.planes);
    this._wrapperFields.plane_poses.copy(other._wrapperFields.plane_poses);
    this._subframe_namesArray = other._subframe_namesArray.slice();
    this._wrapperFields.subframe_poses.copy(other._wrapperFields.subframe_poses);
    this._operationIntialized = true;
  }
  static get classType() {
    return CollisionObjectWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"byte","name":"ADD","value":0},{"type":"byte","name":"REMOVE","value":1},{"type":"byte","name":"APPEND","value":2},{"type":"byte","name":"MOVE","value":3}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"object_recognition_msgs","type":"ObjectType","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"primitives","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"shape_msgs","type":"SolidPrimitive","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"primitive_poses","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"meshes","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"shape_msgs","type":"Mesh","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"mesh_poses","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"planes","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"shape_msgs","type":"Plane","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"plane_poses","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"subframe_names","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"subframe_poses","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"operation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"byte","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"CollisionObject","stringUpperBound":null,"isPrimitiveType":false},"msgName":"CollisionObject"};
  }
  hasMember(name) {
    let memberNames = ["header","pose","id","type","primitives","primitive_poses","meshes","mesh_poses","planes","plane_poses","subframe_names","subframe_poses","operation"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class CollisionObjectArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof CollisionObjectWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new CollisionObjectWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to CollisionObjectArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to CollisionObjectArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new CollisionObjectRefArray(size);
    this._refObject = new CollisionObjectRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new CollisionObjectWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof CollisionObjectArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "CollisionObjectArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      CollisionObjectWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return CollisionObjectWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return CollisionObjectArrayWrapper;
  }
}
// Define constants (4 in total)
Object.defineProperty(CollisionObjectWrapper, "ADD", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(CollisionObjectWrapper, "REMOVE", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(CollisionObjectWrapper, "APPEND", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(CollisionObjectWrapper, "MOVE", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = CollisionObjectWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "byte",
      "name": "ADD",
      "value": 0
    },
    {
      "type": "byte",
      "name": "REMOVE",
      "value": 1
    },
    {
      "type": "byte",
      "name": "APPEND",
      "value": 2
    },
    {
      "type": "byte",
      "name": "MOVE",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "object_recognition_msgs",
        "type": "ObjectType",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "primitives",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "shape_msgs",
        "type": "SolidPrimitive",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "primitive_poses",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "meshes",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "shape_msgs",
        "type": "Mesh",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "mesh_poses",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "planes",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "shape_msgs",
        "type": "Plane",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "plane_poses",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "subframe_names",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "subframe_poses",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "operation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "byte",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "CollisionObject",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "CollisionObject"
}
*/
