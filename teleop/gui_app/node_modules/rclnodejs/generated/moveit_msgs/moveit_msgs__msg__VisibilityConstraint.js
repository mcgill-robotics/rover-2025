// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const PoseStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__PoseStamped.js');
const VisibilityConstraintRefStruct = StructType({
  target_radius: primitiveTypes.float64,
  target_pose: PoseStampedWrapper.refObjectType,
  cone_sides: primitiveTypes.int32,
  sensor_pose: PoseStampedWrapper.refObjectType,
  max_view_angle: primitiveTypes.float64,
  max_range_angle: primitiveTypes.float64,
  sensor_view_direction: primitiveTypes.uint8,
  weight: primitiveTypes.float64,
});
const VisibilityConstraintRefArray = ArrayType(VisibilityConstraintRefStruct);
const VisibilityConstraintRefStructArray = StructType({
  data: VisibilityConstraintRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class VisibilityConstraintWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new VisibilityConstraintRefStruct(other._refObject.toObject());
      this._target_radiusIntialized = true;
      this._wrapperFields.target_pose =  new PoseStampedWrapper(other._wrapperFields.target_pose);
      this._cone_sidesIntialized = true;
      this._wrapperFields.sensor_pose =  new PoseStampedWrapper(other._wrapperFields.sensor_pose);
      this._max_view_angleIntialized = true;
      this._max_range_angleIntialized = true;
      this._sensor_view_directionIntialized = true;
      this._weightIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new VisibilityConstraintRefStruct();
    this._target_radiusIntialized = false;
    this._wrapperFields.target_pose = new PoseStampedWrapper();
    this._cone_sidesIntialized = false;
    this._wrapperFields.sensor_pose = new PoseStampedWrapper();
    this._max_view_angleIntialized = false;
    this._max_range_angleIntialized = false;
    this._sensor_view_directionIntialized = false;
    this._weightIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new VisibilityConstraintWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new VisibilityConstraintArrayWrapper;
  }
  static get ArrayType() {
    return VisibilityConstraintArrayWrapper;
  }
  static get refObjectArrayType() {
    return VisibilityConstraintRefStructArray
  }
  static get refObjectType() {
    return VisibilityConstraintRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._target_radiusIntialized) {
        throw new TypeError('Invalid argument: target_radius in VisibilityConstraint');
      }
      if (checkConsistency && !this._cone_sidesIntialized) {
        throw new TypeError('Invalid argument: cone_sides in VisibilityConstraint');
      }
      if (checkConsistency && !this._max_view_angleIntialized) {
        throw new TypeError('Invalid argument: max_view_angle in VisibilityConstraint');
      }
      if (checkConsistency && !this._max_range_angleIntialized) {
        throw new TypeError('Invalid argument: max_range_angle in VisibilityConstraint');
      }
      if (checkConsistency && !this._sensor_view_directionIntialized) {
        throw new TypeError('Invalid argument: sensor_view_direction in VisibilityConstraint');
      }
      if (checkConsistency && !this._weightIntialized) {
        throw new TypeError('Invalid argument: weight in VisibilityConstraint');
      }
    this._wrapperFields.target_pose.freeze(own, checkConsistency);
    this._refObject.target_pose = this._wrapperFields.target_pose.refObject;
    this._wrapperFields.sensor_pose.freeze(own, checkConsistency);
    this._refObject.sensor_pose = this._wrapperFields.sensor_pose.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._target_radiusIntialized = true;
    this._refObject.target_radius = refObject.target_radius;
    this._wrapperFields.target_pose.copyRefObject(refObject.target_pose);
    this._cone_sidesIntialized = true;
    this._refObject.cone_sides = refObject.cone_sides;
    this._wrapperFields.sensor_pose.copyRefObject(refObject.sensor_pose);
    this._max_view_angleIntialized = true;
    this._refObject.max_view_angle = refObject.max_view_angle;
    this._max_range_angleIntialized = true;
    this._refObject.max_range_angle = refObject.max_range_angle;
    this._sensor_view_directionIntialized = true;
    this._refObject.sensor_view_direction = refObject.sensor_view_direction;
    this._weightIntialized = true;
    this._refObject.weight = refObject.weight;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    PoseStampedWrapper.freeStruct(refObject.target_pose);
    PoseStampedWrapper.freeStruct(refObject.sensor_pose);
  }
  static destoryRawROS(msg) {
    VisibilityConstraintWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'VisibilityConstraint'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get target_radius() {
    if (!this._target_radiusIntialized) {
      return undefined;
    }
    return this._refObject.target_radius;
  }
  set target_radius(value) {
    this._target_radiusIntialized = true;
    this._refObject.target_radius = value;
  }
  get target_pose() {
    return this._wrapperFields.target_pose;
  }
  set target_pose(value) {
    if (value instanceof PoseStampedWrapper) {
      this._wrapperFields.target_pose.copy(value);
    } else {
      this._wrapperFields.target_pose.copy(new PoseStampedWrapper(value));
    }
  }
  get cone_sides() {
    if (!this._cone_sidesIntialized) {
      return undefined;
    }
    return this._refObject.cone_sides;
  }
  set cone_sides(value) {
    this._cone_sidesIntialized = true;
    this._refObject.cone_sides = value;
  }
  get sensor_pose() {
    return this._wrapperFields.sensor_pose;
  }
  set sensor_pose(value) {
    if (value instanceof PoseStampedWrapper) {
      this._wrapperFields.sensor_pose.copy(value);
    } else {
      this._wrapperFields.sensor_pose.copy(new PoseStampedWrapper(value));
    }
  }
  get max_view_angle() {
    if (!this._max_view_angleIntialized) {
      return undefined;
    }
    return this._refObject.max_view_angle;
  }
  set max_view_angle(value) {
    this._max_view_angleIntialized = true;
    this._refObject.max_view_angle = value;
  }
  get max_range_angle() {
    if (!this._max_range_angleIntialized) {
      return undefined;
    }
    return this._refObject.max_range_angle;
  }
  set max_range_angle(value) {
    this._max_range_angleIntialized = true;
    this._refObject.max_range_angle = value;
  }
  get sensor_view_direction() {
    if (!this._sensor_view_directionIntialized) {
      return undefined;
    }
    return this._refObject.sensor_view_direction;
  }
  set sensor_view_direction(value) {
    this._sensor_view_directionIntialized = true;
    this._refObject.sensor_view_direction = value;
  }
  get weight() {
    if (!this._weightIntialized) {
      return undefined;
    }
    return this._refObject.weight;
  }
  set weight(value) {
    this._weightIntialized = true;
    this._refObject.weight = value;
  }
  copyRefObject(refObject) {
    this._refObject = new VisibilityConstraintRefStruct(refObject.toObject());
    this._target_radiusIntialized = true;
    this._wrapperFields.target_pose.copyRefObject(this._refObject.target_pose);
    this._cone_sidesIntialized = true;
    this._wrapperFields.sensor_pose.copyRefObject(this._refObject.sensor_pose);
    this._max_view_angleIntialized = true;
    this._max_range_angleIntialized = true;
    this._sensor_view_directionIntialized = true;
    this._weightIntialized = true;
  }
  copy(other) {
    this._refObject = new VisibilityConstraintRefStruct(other._refObject.toObject());
    this._target_radiusIntialized = true;
    this._wrapperFields.target_pose.copy(other._wrapperFields.target_pose);
    this._cone_sidesIntialized = true;
    this._wrapperFields.sensor_pose.copy(other._wrapperFields.sensor_pose);
    this._max_view_angleIntialized = true;
    this._max_range_angleIntialized = true;
    this._sensor_view_directionIntialized = true;
    this._weightIntialized = true;
  }
  static get classType() {
    return VisibilityConstraintWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"SENSOR_Z","value":0},{"type":"uint8","name":"SENSOR_Y","value":1},{"type":"uint8","name":"SENSOR_X","value":2}],"fields":[{"name":"target_radius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"target_pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"PoseStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"cone_sides","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sensor_pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"PoseStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"max_view_angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_range_angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sensor_view_direction","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"weight","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"VisibilityConstraint","stringUpperBound":null,"isPrimitiveType":false},"msgName":"VisibilityConstraint"};
  }
  hasMember(name) {
    let memberNames = ["target_radius","target_pose","cone_sides","sensor_pose","max_view_angle","max_range_angle","sensor_view_direction","weight"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class VisibilityConstraintArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof VisibilityConstraintWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new VisibilityConstraintWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to VisibilityConstraintArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to VisibilityConstraintArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new VisibilityConstraintRefArray(size);
    this._refObject = new VisibilityConstraintRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new VisibilityConstraintWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof VisibilityConstraintArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "VisibilityConstraintArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      VisibilityConstraintWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return VisibilityConstraintWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return VisibilityConstraintArrayWrapper;
  }
}
// Define constants (3 in total)
Object.defineProperty(VisibilityConstraintWrapper, "SENSOR_Z", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(VisibilityConstraintWrapper, "SENSOR_Y", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(VisibilityConstraintWrapper, "SENSOR_X", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = VisibilityConstraintWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "SENSOR_Z",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SENSOR_Y",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SENSOR_X",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "target_radius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "target_pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "PoseStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "cone_sides",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sensor_pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "PoseStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "max_view_angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_range_angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sensor_view_direction",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "weight",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "VisibilityConstraint",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "VisibilityConstraint"
}
*/
