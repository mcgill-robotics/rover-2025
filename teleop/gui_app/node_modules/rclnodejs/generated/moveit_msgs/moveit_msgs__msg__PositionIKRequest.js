// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const RobotStateWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__RobotState.js');
const ConstraintsWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__Constraints.js');
const PoseStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__PoseStamped.js');
const DurationWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Duration.js');
const PositionIKRequestRefStruct = StructType({
  group_name: primitiveTypes.string,
  robot_state: RobotStateWrapper.refObjectType,
  constraints: ConstraintsWrapper.refObjectType,
  avoid_collisions: primitiveTypes.bool,
  ik_link_name: primitiveTypes.string,
  pose_stamped: PoseStampedWrapper.refObjectType,
  ik_link_names: StringWrapper.refObjectArrayType,
  pose_stamped_vector: PoseStampedWrapper.refObjectArrayType,
  timeout: DurationWrapper.refObjectType,
});
const PositionIKRequestRefArray = ArrayType(PositionIKRequestRefStruct);
const PositionIKRequestRefStructArray = StructType({
  data: PositionIKRequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PositionIKRequestWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._ik_link_namesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PositionIKRequestRefStruct(other._refObject.toObject());
      this._group_nameIntialized = true;
      this._wrapperFields.group_name =  new StringWrapper(other._wrapperFields.group_name);
      this._wrapperFields.robot_state =  new RobotStateWrapper(other._wrapperFields.robot_state);
      this._wrapperFields.constraints =  new ConstraintsWrapper(other._wrapperFields.constraints);
      this._avoid_collisionsIntialized = true;
      this._ik_link_nameIntialized = true;
      this._wrapperFields.ik_link_name =  new StringWrapper(other._wrapperFields.ik_link_name);
      this._wrapperFields.pose_stamped =  new PoseStampedWrapper(other._wrapperFields.pose_stamped);
      this._wrapperFields.ik_link_names = StringWrapper.createArray();
      this._wrapperFields.ik_link_names.copy(other._wrapperFields.ik_link_names);
      this.ik_link_names = other.ik_link_names;
      this._wrapperFields.pose_stamped_vector = PoseStampedWrapper.createArray();
      this._wrapperFields.pose_stamped_vector.copy(other._wrapperFields.pose_stamped_vector);
      this._wrapperFields.timeout =  new DurationWrapper(other._wrapperFields.timeout);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PositionIKRequestRefStruct();
    this._group_nameIntialized = false;
    this._wrapperFields.group_name = new StringWrapper();
    this._wrapperFields.robot_state = new RobotStateWrapper();
    this._wrapperFields.constraints = new ConstraintsWrapper();
    this._avoid_collisionsIntialized = false;
    this._ik_link_nameIntialized = false;
    this._wrapperFields.ik_link_name = new StringWrapper();
    this._wrapperFields.pose_stamped = new PoseStampedWrapper();
    this._wrapperFields.ik_link_names = StringWrapper.createArray();
    this._wrapperFields.pose_stamped_vector = PoseStampedWrapper.createArray();
    this._wrapperFields.timeout = new DurationWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new PositionIKRequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PositionIKRequestArrayWrapper;
  }
  static get ArrayType() {
    return PositionIKRequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return PositionIKRequestRefStructArray
  }
  static get refObjectType() {
    return PositionIKRequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._group_nameIntialized) {
        throw new TypeError('Invalid argument: group_name in PositionIKRequest');
      }
      if (checkConsistency && !this._avoid_collisionsIntialized) {
        throw new TypeError('Invalid argument: avoid_collisions in PositionIKRequest');
      }
      if (checkConsistency && !this._ik_link_nameIntialized) {
        throw new TypeError('Invalid argument: ik_link_name in PositionIKRequest');
      }
    if (own) {
      this._wrapperFields.group_name.freeze(own, checkConsistency);
    }
    this._refObject.group_name = this._wrapperFields.group_name.refObject;
    this._wrapperFields.robot_state.freeze(own, checkConsistency);
    this._refObject.robot_state = this._wrapperFields.robot_state.refObject;
    this._wrapperFields.constraints.freeze(own, checkConsistency);
    this._refObject.constraints = this._wrapperFields.constraints.refObject;
    if (own) {
      this._wrapperFields.ik_link_name.freeze(own, checkConsistency);
    }
    this._refObject.ik_link_name = this._wrapperFields.ik_link_name.refObject;
    this._wrapperFields.pose_stamped.freeze(own, checkConsistency);
    this._refObject.pose_stamped = this._wrapperFields.pose_stamped.refObject;
    if (!own) {
      this._wrapperFields.ik_link_names.fill(this._ik_link_namesArray);
      this._wrapperFields.ik_link_names.freeze(own, checkConsistency);
      this._refObject.ik_link_names = this._wrapperFields.ik_link_names.refObject;
    } else {
      this._wrapperFields.ik_link_names.fill([]);
      this._wrapperFields.ik_link_names.freeze(own, checkConsistency);
      this._refObject.ik_link_names = this._wrapperFields.ik_link_names.refObject;
    }
    this._wrapperFields.pose_stamped_vector.freeze(own, checkConsistency);
    this._refObject.pose_stamped_vector = this._wrapperFields.pose_stamped_vector.refObject;
    this._wrapperFields.timeout.freeze(own, checkConsistency);
    this._refObject.timeout = this._wrapperFields.timeout.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.data = refObject.group_name.data;
    this._wrapperFields.robot_state.copyRefObject(refObject.robot_state);
    this._wrapperFields.constraints.copyRefObject(refObject.constraints);
    this._avoid_collisionsIntialized = true;
    this._refObject.avoid_collisions = refObject.avoid_collisions;
    this._ik_link_nameIntialized = true;
    this._wrapperFields.ik_link_name.data = refObject.ik_link_name.data;
    this._wrapperFields.pose_stamped.copyRefObject(refObject.pose_stamped);
    refObject.ik_link_names.data.length = refObject.ik_link_names.size;
    for (let index = 0; index < refObject.ik_link_names.size; index++) {
      this._ik_link_namesArray[index] = refObject.ik_link_names.data[index].data;
    }
    this._wrapperFields.pose_stamped_vector.copyRefObject(refObject.pose_stamped_vector);
    this._wrapperFields.timeout.copyRefObject(refObject.timeout);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.group_name);
    RobotStateWrapper.freeStruct(refObject.robot_state);
    ConstraintsWrapper.freeStruct(refObject.constraints);
    StringWrapper.freeStruct(refObject.ik_link_name);
    PoseStampedWrapper.freeStruct(refObject.pose_stamped);
    if (refObject.ik_link_names.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.ik_link_names);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.ik_link_names, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.pose_stamped_vector.size != 0) {
      PoseStampedWrapper.ArrayType.freeArray(refObject.pose_stamped_vector);
      if (PoseStampedWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.pose_stamped_vector, PoseStampedWrapper.refObjectArrayType, 'data');
      }
    }
    DurationWrapper.freeStruct(refObject.timeout);
  }
  static destoryRawROS(msg) {
    PositionIKRequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'PositionIKRequest'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get group_name() {
    if (!this._group_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.group_name.data;
  }
  set group_name(value) {
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.data = value;
  }
  get robot_state() {
    return this._wrapperFields.robot_state;
  }
  set robot_state(value) {
    if (value instanceof RobotStateWrapper) {
      this._wrapperFields.robot_state.copy(value);
    } else {
      this._wrapperFields.robot_state.copy(new RobotStateWrapper(value));
    }
  }
  get constraints() {
    return this._wrapperFields.constraints;
  }
  set constraints(value) {
    if (value instanceof ConstraintsWrapper) {
      this._wrapperFields.constraints.copy(value);
    } else {
      this._wrapperFields.constraints.copy(new ConstraintsWrapper(value));
    }
  }
  get avoid_collisions() {
    if (!this._avoid_collisionsIntialized) {
      return undefined;
    }
    return this._refObject.avoid_collisions;
  }
  set avoid_collisions(value) {
    this._avoid_collisionsIntialized = true;
    this._refObject.avoid_collisions = value;
  }
  get ik_link_name() {
    if (!this._ik_link_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.ik_link_name.data;
  }
  set ik_link_name(value) {
    this._ik_link_nameIntialized = true;
    this._wrapperFields.ik_link_name.data = value;
  }
  get pose_stamped() {
    return this._wrapperFields.pose_stamped;
  }
  set pose_stamped(value) {
    if (value instanceof PoseStampedWrapper) {
      this._wrapperFields.pose_stamped.copy(value);
    } else {
      this._wrapperFields.pose_stamped.copy(new PoseStampedWrapper(value));
    }
  }
  get ik_link_names() {
    return this._ik_link_namesArray;
  }
  set ik_link_names(value) {
    this._ik_link_namesArray = value;
  }
  get pose_stamped_vector() {
    return this._wrapperFields.pose_stamped_vector;
  }
  set pose_stamped_vector(value) {
    this._wrapperFields.pose_stamped_vector.fill(value);
  }
  get timeout() {
    return this._wrapperFields.timeout;
  }
  set timeout(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.timeout.copy(value);
    } else {
      this._wrapperFields.timeout.copy(new DurationWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new PositionIKRequestRefStruct(refObject.toObject());
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.copyRefObject(this._refObject.group_name);
    this._wrapperFields.robot_state.copyRefObject(this._refObject.robot_state);
    this._wrapperFields.constraints.copyRefObject(this._refObject.constraints);
    this._avoid_collisionsIntialized = true;
    this._ik_link_nameIntialized = true;
    this._wrapperFields.ik_link_name.copyRefObject(this._refObject.ik_link_name);
    this._wrapperFields.pose_stamped.copyRefObject(this._refObject.pose_stamped);
    refObject.ik_link_names.data.length = refObject.ik_link_names.size;
    for (let index = 0; index < refObject.ik_link_names.size; index++) {
      this._ik_link_namesArray[index] = refObject.ik_link_names.data[index].data;
    }
    this._wrapperFields.pose_stamped_vector.copyRefObject(this._refObject.pose_stamped_vector);
    this._wrapperFields.timeout.copyRefObject(this._refObject.timeout);
  }
  copy(other) {
    this._refObject = new PositionIKRequestRefStruct(other._refObject.toObject());
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.copy(other._wrapperFields.group_name);
    this._wrapperFields.robot_state.copy(other._wrapperFields.robot_state);
    this._wrapperFields.constraints.copy(other._wrapperFields.constraints);
    this._avoid_collisionsIntialized = true;
    this._ik_link_nameIntialized = true;
    this._wrapperFields.ik_link_name.copy(other._wrapperFields.ik_link_name);
    this._wrapperFields.pose_stamped.copy(other._wrapperFields.pose_stamped);
    this._ik_link_namesArray = other._ik_link_namesArray.slice();
    this._wrapperFields.pose_stamped_vector.copy(other._wrapperFields.pose_stamped_vector);
    this._wrapperFields.timeout.copy(other._wrapperFields.timeout);
  }
  static get classType() {
    return PositionIKRequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"group_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"robot_state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"RobotState","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"constraints","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"Constraints","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"avoid_collisions","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ik_link_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose_stamped","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"PoseStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ik_link_names","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose_stamped_vector","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"PoseStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"timeout","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"PositionIKRequest","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PositionIKRequest"};
  }
  hasMember(name) {
    let memberNames = ["group_name","robot_state","constraints","avoid_collisions","ik_link_name","pose_stamped","ik_link_names","pose_stamped_vector","timeout"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PositionIKRequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PositionIKRequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PositionIKRequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PositionIKRequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PositionIKRequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PositionIKRequestRefArray(size);
    this._refObject = new PositionIKRequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PositionIKRequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PositionIKRequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PositionIKRequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PositionIKRequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PositionIKRequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PositionIKRequestArrayWrapper;
  }
}
module.exports = PositionIKRequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "group_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "robot_state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "RobotState",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "constraints",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "Constraints",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "avoid_collisions",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ik_link_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose_stamped",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "PoseStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ik_link_names",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose_stamped_vector",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "PoseStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "timeout",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "PositionIKRequest",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PositionIKRequest"
}
*/
