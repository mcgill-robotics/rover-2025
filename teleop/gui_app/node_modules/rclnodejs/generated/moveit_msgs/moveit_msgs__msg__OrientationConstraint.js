// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const QuaternionWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Quaternion.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const OrientationConstraintRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  orientation: QuaternionWrapper.refObjectType,
  link_name: primitiveTypes.string,
  absolute_x_axis_tolerance: primitiveTypes.float64,
  absolute_y_axis_tolerance: primitiveTypes.float64,
  absolute_z_axis_tolerance: primitiveTypes.float64,
  parameterization: primitiveTypes.uint8,
  weight: primitiveTypes.float64,
});
const OrientationConstraintRefArray = ArrayType(OrientationConstraintRefStruct);
const OrientationConstraintRefStructArray = StructType({
  data: OrientationConstraintRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class OrientationConstraintWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new OrientationConstraintRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.orientation =  new QuaternionWrapper(other._wrapperFields.orientation);
      this._link_nameIntialized = true;
      this._wrapperFields.link_name =  new StringWrapper(other._wrapperFields.link_name);
      this._absolute_x_axis_toleranceIntialized = true;
      this._absolute_y_axis_toleranceIntialized = true;
      this._absolute_z_axis_toleranceIntialized = true;
      this._parameterizationIntialized = true;
      this._weightIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new OrientationConstraintRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.orientation = new QuaternionWrapper();
    this._link_nameIntialized = false;
    this._wrapperFields.link_name = new StringWrapper();
    this._absolute_x_axis_toleranceIntialized = false;
    this._absolute_y_axis_toleranceIntialized = false;
    this._absolute_z_axis_toleranceIntialized = false;
    this._parameterizationIntialized = false;
    this._weightIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new OrientationConstraintWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new OrientationConstraintArrayWrapper;
  }
  static get ArrayType() {
    return OrientationConstraintArrayWrapper;
  }
  static get refObjectArrayType() {
    return OrientationConstraintRefStructArray
  }
  static get refObjectType() {
    return OrientationConstraintRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._link_nameIntialized) {
        throw new TypeError('Invalid argument: link_name in OrientationConstraint');
      }
      if (checkConsistency && !this._absolute_x_axis_toleranceIntialized) {
        throw new TypeError('Invalid argument: absolute_x_axis_tolerance in OrientationConstraint');
      }
      if (checkConsistency && !this._absolute_y_axis_toleranceIntialized) {
        throw new TypeError('Invalid argument: absolute_y_axis_tolerance in OrientationConstraint');
      }
      if (checkConsistency && !this._absolute_z_axis_toleranceIntialized) {
        throw new TypeError('Invalid argument: absolute_z_axis_tolerance in OrientationConstraint');
      }
      if (checkConsistency && !this._parameterizationIntialized) {
        throw new TypeError('Invalid argument: parameterization in OrientationConstraint');
      }
      if (checkConsistency && !this._weightIntialized) {
        throw new TypeError('Invalid argument: weight in OrientationConstraint');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.orientation.freeze(own, checkConsistency);
    this._refObject.orientation = this._wrapperFields.orientation.refObject;
    if (own) {
      this._wrapperFields.link_name.freeze(own, checkConsistency);
    }
    this._refObject.link_name = this._wrapperFields.link_name.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.orientation.copyRefObject(refObject.orientation);
    this._link_nameIntialized = true;
    this._wrapperFields.link_name.data = refObject.link_name.data;
    this._absolute_x_axis_toleranceIntialized = true;
    this._refObject.absolute_x_axis_tolerance = refObject.absolute_x_axis_tolerance;
    this._absolute_y_axis_toleranceIntialized = true;
    this._refObject.absolute_y_axis_tolerance = refObject.absolute_y_axis_tolerance;
    this._absolute_z_axis_toleranceIntialized = true;
    this._refObject.absolute_z_axis_tolerance = refObject.absolute_z_axis_tolerance;
    this._parameterizationIntialized = true;
    this._refObject.parameterization = refObject.parameterization;
    this._weightIntialized = true;
    this._refObject.weight = refObject.weight;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    QuaternionWrapper.freeStruct(refObject.orientation);
    StringWrapper.freeStruct(refObject.link_name);
  }
  static destoryRawROS(msg) {
    OrientationConstraintWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'OrientationConstraint'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get orientation() {
    return this._wrapperFields.orientation;
  }
  set orientation(value) {
    if (value instanceof QuaternionWrapper) {
      this._wrapperFields.orientation.copy(value);
    } else {
      this._wrapperFields.orientation.copy(new QuaternionWrapper(value));
    }
  }
  get link_name() {
    if (!this._link_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.link_name.data;
  }
  set link_name(value) {
    this._link_nameIntialized = true;
    this._wrapperFields.link_name.data = value;
  }
  get absolute_x_axis_tolerance() {
    if (!this._absolute_x_axis_toleranceIntialized) {
      return undefined;
    }
    return this._refObject.absolute_x_axis_tolerance;
  }
  set absolute_x_axis_tolerance(value) {
    this._absolute_x_axis_toleranceIntialized = true;
    this._refObject.absolute_x_axis_tolerance = value;
  }
  get absolute_y_axis_tolerance() {
    if (!this._absolute_y_axis_toleranceIntialized) {
      return undefined;
    }
    return this._refObject.absolute_y_axis_tolerance;
  }
  set absolute_y_axis_tolerance(value) {
    this._absolute_y_axis_toleranceIntialized = true;
    this._refObject.absolute_y_axis_tolerance = value;
  }
  get absolute_z_axis_tolerance() {
    if (!this._absolute_z_axis_toleranceIntialized) {
      return undefined;
    }
    return this._refObject.absolute_z_axis_tolerance;
  }
  set absolute_z_axis_tolerance(value) {
    this._absolute_z_axis_toleranceIntialized = true;
    this._refObject.absolute_z_axis_tolerance = value;
  }
  get parameterization() {
    if (!this._parameterizationIntialized) {
      return undefined;
    }
    return this._refObject.parameterization;
  }
  set parameterization(value) {
    this._parameterizationIntialized = true;
    this._refObject.parameterization = value;
  }
  get weight() {
    if (!this._weightIntialized) {
      return undefined;
    }
    return this._refObject.weight;
  }
  set weight(value) {
    this._weightIntialized = true;
    this._refObject.weight = value;
  }
  copyRefObject(refObject) {
    this._refObject = new OrientationConstraintRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.orientation.copyRefObject(this._refObject.orientation);
    this._link_nameIntialized = true;
    this._wrapperFields.link_name.copyRefObject(this._refObject.link_name);
    this._absolute_x_axis_toleranceIntialized = true;
    this._absolute_y_axis_toleranceIntialized = true;
    this._absolute_z_axis_toleranceIntialized = true;
    this._parameterizationIntialized = true;
    this._weightIntialized = true;
  }
  copy(other) {
    this._refObject = new OrientationConstraintRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.orientation.copy(other._wrapperFields.orientation);
    this._link_nameIntialized = true;
    this._wrapperFields.link_name.copy(other._wrapperFields.link_name);
    this._absolute_x_axis_toleranceIntialized = true;
    this._absolute_y_axis_toleranceIntialized = true;
    this._absolute_z_axis_toleranceIntialized = true;
    this._parameterizationIntialized = true;
    this._weightIntialized = true;
  }
  static get classType() {
    return OrientationConstraintWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"XYZ_EULER_ANGLES","value":0},{"type":"uint8","name":"ROTATION_VECTOR","value":1}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"orientation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Quaternion","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"link_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"absolute_x_axis_tolerance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"absolute_y_axis_tolerance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"absolute_z_axis_tolerance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"parameterization","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"weight","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"OrientationConstraint","stringUpperBound":null,"isPrimitiveType":false},"msgName":"OrientationConstraint"};
  }
  hasMember(name) {
    let memberNames = ["header","orientation","link_name","absolute_x_axis_tolerance","absolute_y_axis_tolerance","absolute_z_axis_tolerance","parameterization","weight"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class OrientationConstraintArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof OrientationConstraintWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new OrientationConstraintWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to OrientationConstraintArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to OrientationConstraintArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new OrientationConstraintRefArray(size);
    this._refObject = new OrientationConstraintRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new OrientationConstraintWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof OrientationConstraintArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "OrientationConstraintArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      OrientationConstraintWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return OrientationConstraintWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return OrientationConstraintArrayWrapper;
  }
}
// Define constants (2 in total)
Object.defineProperty(OrientationConstraintWrapper, "XYZ_EULER_ANGLES", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(OrientationConstraintWrapper, "ROTATION_VECTOR", {value: 1, writable: false, enumerable: true, configurable: true});
module.exports = OrientationConstraintWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "XYZ_EULER_ANGLES",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "ROTATION_VECTOR",
      "value": 1
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "orientation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Quaternion",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "link_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "absolute_x_axis_tolerance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "absolute_y_axis_tolerance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "absolute_z_axis_tolerance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "parameterization",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "weight",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "OrientationConstraint",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "OrientationConstraint"
}
*/
