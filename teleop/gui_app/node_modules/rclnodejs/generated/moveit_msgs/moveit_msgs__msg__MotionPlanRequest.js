// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const WorkspaceParametersWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__WorkspaceParameters.js');
const RobotStateWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__RobotState.js');
const ConstraintsWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__Constraints.js');
const TrajectoryConstraintsWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__TrajectoryConstraints.js');
const GenericTrajectoryWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__GenericTrajectory.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const MotionPlanRequestRefStruct = StructType({
  workspace_parameters: WorkspaceParametersWrapper.refObjectType,
  start_state: RobotStateWrapper.refObjectType,
  goal_constraints: ConstraintsWrapper.refObjectArrayType,
  path_constraints: ConstraintsWrapper.refObjectType,
  trajectory_constraints: TrajectoryConstraintsWrapper.refObjectType,
  reference_trajectories: GenericTrajectoryWrapper.refObjectArrayType,
  pipeline_id: primitiveTypes.string,
  planner_id: primitiveTypes.string,
  group_name: primitiveTypes.string,
  num_planning_attempts: primitiveTypes.int32,
  allowed_planning_time: primitiveTypes.float64,
  max_velocity_scaling_factor: primitiveTypes.float64,
  max_acceleration_scaling_factor: primitiveTypes.float64,
  cartesian_speed_end_effector_link: primitiveTypes.string,
  max_cartesian_speed: primitiveTypes.float64,
});
const MotionPlanRequestRefArray = ArrayType(MotionPlanRequestRefStruct);
const MotionPlanRequestRefStructArray = StructType({
  data: MotionPlanRequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MotionPlanRequestWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MotionPlanRequestRefStruct(other._refObject.toObject());
      this._wrapperFields.workspace_parameters =  new WorkspaceParametersWrapper(other._wrapperFields.workspace_parameters);
      this._wrapperFields.start_state =  new RobotStateWrapper(other._wrapperFields.start_state);
      this._wrapperFields.goal_constraints = ConstraintsWrapper.createArray();
      this._wrapperFields.goal_constraints.copy(other._wrapperFields.goal_constraints);
      this._wrapperFields.path_constraints =  new ConstraintsWrapper(other._wrapperFields.path_constraints);
      this._wrapperFields.trajectory_constraints =  new TrajectoryConstraintsWrapper(other._wrapperFields.trajectory_constraints);
      this._wrapperFields.reference_trajectories = GenericTrajectoryWrapper.createArray();
      this._wrapperFields.reference_trajectories.copy(other._wrapperFields.reference_trajectories);
      this._pipeline_idIntialized = true;
      this._wrapperFields.pipeline_id =  new StringWrapper(other._wrapperFields.pipeline_id);
      this._planner_idIntialized = true;
      this._wrapperFields.planner_id =  new StringWrapper(other._wrapperFields.planner_id);
      this._group_nameIntialized = true;
      this._wrapperFields.group_name =  new StringWrapper(other._wrapperFields.group_name);
      this._num_planning_attemptsIntialized = true;
      this._allowed_planning_timeIntialized = true;
      this._max_velocity_scaling_factorIntialized = true;
      this._max_acceleration_scaling_factorIntialized = true;
      this._cartesian_speed_end_effector_linkIntialized = true;
      this._wrapperFields.cartesian_speed_end_effector_link =  new StringWrapper(other._wrapperFields.cartesian_speed_end_effector_link);
      this._max_cartesian_speedIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MotionPlanRequestRefStruct();
    this._wrapperFields.workspace_parameters = new WorkspaceParametersWrapper();
    this._wrapperFields.start_state = new RobotStateWrapper();
    this._wrapperFields.goal_constraints = ConstraintsWrapper.createArray();
    this._wrapperFields.path_constraints = new ConstraintsWrapper();
    this._wrapperFields.trajectory_constraints = new TrajectoryConstraintsWrapper();
    this._wrapperFields.reference_trajectories = GenericTrajectoryWrapper.createArray();
    this._pipeline_idIntialized = false;
    this._wrapperFields.pipeline_id = new StringWrapper();
    this._planner_idIntialized = false;
    this._wrapperFields.planner_id = new StringWrapper();
    this._group_nameIntialized = false;
    this._wrapperFields.group_name = new StringWrapper();
    this._num_planning_attemptsIntialized = false;
    this._allowed_planning_timeIntialized = false;
    this._max_velocity_scaling_factorIntialized = false;
    this._max_acceleration_scaling_factorIntialized = false;
    this._cartesian_speed_end_effector_linkIntialized = false;
    this._wrapperFields.cartesian_speed_end_effector_link = new StringWrapper();
    this._max_cartesian_speedIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new MotionPlanRequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MotionPlanRequestArrayWrapper;
  }
  static get ArrayType() {
    return MotionPlanRequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return MotionPlanRequestRefStructArray
  }
  static get refObjectType() {
    return MotionPlanRequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._pipeline_idIntialized) {
        throw new TypeError('Invalid argument: pipeline_id in MotionPlanRequest');
      }
      if (checkConsistency && !this._planner_idIntialized) {
        throw new TypeError('Invalid argument: planner_id in MotionPlanRequest');
      }
      if (checkConsistency && !this._group_nameIntialized) {
        throw new TypeError('Invalid argument: group_name in MotionPlanRequest');
      }
      if (checkConsistency && !this._num_planning_attemptsIntialized) {
        throw new TypeError('Invalid argument: num_planning_attempts in MotionPlanRequest');
      }
      if (checkConsistency && !this._allowed_planning_timeIntialized) {
        throw new TypeError('Invalid argument: allowed_planning_time in MotionPlanRequest');
      }
      if (checkConsistency && !this._max_velocity_scaling_factorIntialized) {
        throw new TypeError('Invalid argument: max_velocity_scaling_factor in MotionPlanRequest');
      }
      if (checkConsistency && !this._max_acceleration_scaling_factorIntialized) {
        throw new TypeError('Invalid argument: max_acceleration_scaling_factor in MotionPlanRequest');
      }
      if (checkConsistency && !this._cartesian_speed_end_effector_linkIntialized) {
        throw new TypeError('Invalid argument: cartesian_speed_end_effector_link in MotionPlanRequest');
      }
      if (checkConsistency && !this._max_cartesian_speedIntialized) {
        throw new TypeError('Invalid argument: max_cartesian_speed in MotionPlanRequest');
      }
    this._wrapperFields.workspace_parameters.freeze(own, checkConsistency);
    this._refObject.workspace_parameters = this._wrapperFields.workspace_parameters.refObject;
    this._wrapperFields.start_state.freeze(own, checkConsistency);
    this._refObject.start_state = this._wrapperFields.start_state.refObject;
    this._wrapperFields.goal_constraints.freeze(own, checkConsistency);
    this._refObject.goal_constraints = this._wrapperFields.goal_constraints.refObject;
    this._wrapperFields.path_constraints.freeze(own, checkConsistency);
    this._refObject.path_constraints = this._wrapperFields.path_constraints.refObject;
    this._wrapperFields.trajectory_constraints.freeze(own, checkConsistency);
    this._refObject.trajectory_constraints = this._wrapperFields.trajectory_constraints.refObject;
    this._wrapperFields.reference_trajectories.freeze(own, checkConsistency);
    this._refObject.reference_trajectories = this._wrapperFields.reference_trajectories.refObject;
    if (own) {
      this._wrapperFields.pipeline_id.freeze(own, checkConsistency);
    }
    this._refObject.pipeline_id = this._wrapperFields.pipeline_id.refObject;
    if (own) {
      this._wrapperFields.planner_id.freeze(own, checkConsistency);
    }
    this._refObject.planner_id = this._wrapperFields.planner_id.refObject;
    if (own) {
      this._wrapperFields.group_name.freeze(own, checkConsistency);
    }
    this._refObject.group_name = this._wrapperFields.group_name.refObject;
    if (own) {
      this._wrapperFields.cartesian_speed_end_effector_link.freeze(own, checkConsistency);
    }
    this._refObject.cartesian_speed_end_effector_link = this._wrapperFields.cartesian_speed_end_effector_link.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.workspace_parameters.copyRefObject(refObject.workspace_parameters);
    this._wrapperFields.start_state.copyRefObject(refObject.start_state);
    this._wrapperFields.goal_constraints.copyRefObject(refObject.goal_constraints);
    this._wrapperFields.path_constraints.copyRefObject(refObject.path_constraints);
    this._wrapperFields.trajectory_constraints.copyRefObject(refObject.trajectory_constraints);
    this._wrapperFields.reference_trajectories.copyRefObject(refObject.reference_trajectories);
    this._pipeline_idIntialized = true;
    this._wrapperFields.pipeline_id.data = refObject.pipeline_id.data;
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.data = refObject.planner_id.data;
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.data = refObject.group_name.data;
    this._num_planning_attemptsIntialized = true;
    this._refObject.num_planning_attempts = refObject.num_planning_attempts;
    this._allowed_planning_timeIntialized = true;
    this._refObject.allowed_planning_time = refObject.allowed_planning_time;
    this._max_velocity_scaling_factorIntialized = true;
    this._refObject.max_velocity_scaling_factor = refObject.max_velocity_scaling_factor;
    this._max_acceleration_scaling_factorIntialized = true;
    this._refObject.max_acceleration_scaling_factor = refObject.max_acceleration_scaling_factor;
    this._cartesian_speed_end_effector_linkIntialized = true;
    this._wrapperFields.cartesian_speed_end_effector_link.data = refObject.cartesian_speed_end_effector_link.data;
    this._max_cartesian_speedIntialized = true;
    this._refObject.max_cartesian_speed = refObject.max_cartesian_speed;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    WorkspaceParametersWrapper.freeStruct(refObject.workspace_parameters);
    RobotStateWrapper.freeStruct(refObject.start_state);
    if (refObject.goal_constraints.size != 0) {
      ConstraintsWrapper.ArrayType.freeArray(refObject.goal_constraints);
      if (ConstraintsWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.goal_constraints, ConstraintsWrapper.refObjectArrayType, 'data');
      }
    }
    ConstraintsWrapper.freeStruct(refObject.path_constraints);
    TrajectoryConstraintsWrapper.freeStruct(refObject.trajectory_constraints);
    if (refObject.reference_trajectories.size != 0) {
      GenericTrajectoryWrapper.ArrayType.freeArray(refObject.reference_trajectories);
      if (GenericTrajectoryWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.reference_trajectories, GenericTrajectoryWrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.pipeline_id);
    StringWrapper.freeStruct(refObject.planner_id);
    StringWrapper.freeStruct(refObject.group_name);
    StringWrapper.freeStruct(refObject.cartesian_speed_end_effector_link);
  }
  static destoryRawROS(msg) {
    MotionPlanRequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'MotionPlanRequest'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get workspace_parameters() {
    return this._wrapperFields.workspace_parameters;
  }
  set workspace_parameters(value) {
    if (value instanceof WorkspaceParametersWrapper) {
      this._wrapperFields.workspace_parameters.copy(value);
    } else {
      this._wrapperFields.workspace_parameters.copy(new WorkspaceParametersWrapper(value));
    }
  }
  get start_state() {
    return this._wrapperFields.start_state;
  }
  set start_state(value) {
    if (value instanceof RobotStateWrapper) {
      this._wrapperFields.start_state.copy(value);
    } else {
      this._wrapperFields.start_state.copy(new RobotStateWrapper(value));
    }
  }
  get goal_constraints() {
    return this._wrapperFields.goal_constraints;
  }
  set goal_constraints(value) {
    this._wrapperFields.goal_constraints.fill(value);
  }
  get path_constraints() {
    return this._wrapperFields.path_constraints;
  }
  set path_constraints(value) {
    if (value instanceof ConstraintsWrapper) {
      this._wrapperFields.path_constraints.copy(value);
    } else {
      this._wrapperFields.path_constraints.copy(new ConstraintsWrapper(value));
    }
  }
  get trajectory_constraints() {
    return this._wrapperFields.trajectory_constraints;
  }
  set trajectory_constraints(value) {
    if (value instanceof TrajectoryConstraintsWrapper) {
      this._wrapperFields.trajectory_constraints.copy(value);
    } else {
      this._wrapperFields.trajectory_constraints.copy(new TrajectoryConstraintsWrapper(value));
    }
  }
  get reference_trajectories() {
    return this._wrapperFields.reference_trajectories;
  }
  set reference_trajectories(value) {
    this._wrapperFields.reference_trajectories.fill(value);
  }
  get pipeline_id() {
    if (!this._pipeline_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.pipeline_id.data;
  }
  set pipeline_id(value) {
    this._pipeline_idIntialized = true;
    this._wrapperFields.pipeline_id.data = value;
  }
  get planner_id() {
    if (!this._planner_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.planner_id.data;
  }
  set planner_id(value) {
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.data = value;
  }
  get group_name() {
    if (!this._group_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.group_name.data;
  }
  set group_name(value) {
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.data = value;
  }
  get num_planning_attempts() {
    if (!this._num_planning_attemptsIntialized) {
      return undefined;
    }
    return this._refObject.num_planning_attempts;
  }
  set num_planning_attempts(value) {
    this._num_planning_attemptsIntialized = true;
    this._refObject.num_planning_attempts = value;
  }
  get allowed_planning_time() {
    if (!this._allowed_planning_timeIntialized) {
      return undefined;
    }
    return this._refObject.allowed_planning_time;
  }
  set allowed_planning_time(value) {
    this._allowed_planning_timeIntialized = true;
    this._refObject.allowed_planning_time = value;
  }
  get max_velocity_scaling_factor() {
    if (!this._max_velocity_scaling_factorIntialized) {
      return undefined;
    }
    return this._refObject.max_velocity_scaling_factor;
  }
  set max_velocity_scaling_factor(value) {
    this._max_velocity_scaling_factorIntialized = true;
    this._refObject.max_velocity_scaling_factor = value;
  }
  get max_acceleration_scaling_factor() {
    if (!this._max_acceleration_scaling_factorIntialized) {
      return undefined;
    }
    return this._refObject.max_acceleration_scaling_factor;
  }
  set max_acceleration_scaling_factor(value) {
    this._max_acceleration_scaling_factorIntialized = true;
    this._refObject.max_acceleration_scaling_factor = value;
  }
  get cartesian_speed_end_effector_link() {
    if (!this._cartesian_speed_end_effector_linkIntialized) {
      return undefined;
    }
    return this._wrapperFields.cartesian_speed_end_effector_link.data;
  }
  set cartesian_speed_end_effector_link(value) {
    this._cartesian_speed_end_effector_linkIntialized = true;
    this._wrapperFields.cartesian_speed_end_effector_link.data = value;
  }
  get max_cartesian_speed() {
    if (!this._max_cartesian_speedIntialized) {
      return undefined;
    }
    return this._refObject.max_cartesian_speed;
  }
  set max_cartesian_speed(value) {
    this._max_cartesian_speedIntialized = true;
    this._refObject.max_cartesian_speed = value;
  }
  copyRefObject(refObject) {
    this._refObject = new MotionPlanRequestRefStruct(refObject.toObject());
    this._wrapperFields.workspace_parameters.copyRefObject(this._refObject.workspace_parameters);
    this._wrapperFields.start_state.copyRefObject(this._refObject.start_state);
    this._wrapperFields.goal_constraints.copyRefObject(this._refObject.goal_constraints);
    this._wrapperFields.path_constraints.copyRefObject(this._refObject.path_constraints);
    this._wrapperFields.trajectory_constraints.copyRefObject(this._refObject.trajectory_constraints);
    this._wrapperFields.reference_trajectories.copyRefObject(this._refObject.reference_trajectories);
    this._pipeline_idIntialized = true;
    this._wrapperFields.pipeline_id.copyRefObject(this._refObject.pipeline_id);
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.copyRefObject(this._refObject.planner_id);
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.copyRefObject(this._refObject.group_name);
    this._num_planning_attemptsIntialized = true;
    this._allowed_planning_timeIntialized = true;
    this._max_velocity_scaling_factorIntialized = true;
    this._max_acceleration_scaling_factorIntialized = true;
    this._cartesian_speed_end_effector_linkIntialized = true;
    this._wrapperFields.cartesian_speed_end_effector_link.copyRefObject(this._refObject.cartesian_speed_end_effector_link);
    this._max_cartesian_speedIntialized = true;
  }
  copy(other) {
    this._refObject = new MotionPlanRequestRefStruct(other._refObject.toObject());
    this._wrapperFields.workspace_parameters.copy(other._wrapperFields.workspace_parameters);
    this._wrapperFields.start_state.copy(other._wrapperFields.start_state);
    this._wrapperFields.goal_constraints.copy(other._wrapperFields.goal_constraints);
    this._wrapperFields.path_constraints.copy(other._wrapperFields.path_constraints);
    this._wrapperFields.trajectory_constraints.copy(other._wrapperFields.trajectory_constraints);
    this._wrapperFields.reference_trajectories.copy(other._wrapperFields.reference_trajectories);
    this._pipeline_idIntialized = true;
    this._wrapperFields.pipeline_id.copy(other._wrapperFields.pipeline_id);
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.copy(other._wrapperFields.planner_id);
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.copy(other._wrapperFields.group_name);
    this._num_planning_attemptsIntialized = true;
    this._allowed_planning_timeIntialized = true;
    this._max_velocity_scaling_factorIntialized = true;
    this._max_acceleration_scaling_factorIntialized = true;
    this._cartesian_speed_end_effector_linkIntialized = true;
    this._wrapperFields.cartesian_speed_end_effector_link.copy(other._wrapperFields.cartesian_speed_end_effector_link);
    this._max_cartesian_speedIntialized = true;
  }
  static get classType() {
    return MotionPlanRequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"workspace_parameters","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"WorkspaceParameters","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"start_state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"RobotState","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"goal_constraints","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"Constraints","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"path_constraints","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"Constraints","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"trajectory_constraints","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"TrajectoryConstraints","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"reference_trajectories","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"GenericTrajectory","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"pipeline_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"planner_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"group_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_planning_attempts","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"allowed_planning_time","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_velocity_scaling_factor","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_acceleration_scaling_factor","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cartesian_speed_end_effector_link","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_cartesian_speed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"MotionPlanRequest","stringUpperBound":null,"isPrimitiveType":false},"msgName":"MotionPlanRequest"};
  }
  hasMember(name) {
    let memberNames = ["workspace_parameters","start_state","goal_constraints","path_constraints","trajectory_constraints","reference_trajectories","pipeline_id","planner_id","group_name","num_planning_attempts","allowed_planning_time","max_velocity_scaling_factor","max_acceleration_scaling_factor","cartesian_speed_end_effector_link","max_cartesian_speed"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MotionPlanRequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MotionPlanRequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MotionPlanRequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MotionPlanRequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MotionPlanRequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MotionPlanRequestRefArray(size);
    this._refObject = new MotionPlanRequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MotionPlanRequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MotionPlanRequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MotionPlanRequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MotionPlanRequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MotionPlanRequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MotionPlanRequestArrayWrapper;
  }
}
module.exports = MotionPlanRequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "workspace_parameters",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "WorkspaceParameters",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "start_state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "RobotState",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "goal_constraints",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "Constraints",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "path_constraints",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "Constraints",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "trajectory_constraints",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "TrajectoryConstraints",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "reference_trajectories",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "GenericTrajectory",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "pipeline_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "planner_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "group_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_planning_attempts",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "allowed_planning_time",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_velocity_scaling_factor",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_acceleration_scaling_factor",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cartesian_speed_end_effector_link",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_cartesian_speed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "MotionPlanRequest",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "MotionPlanRequest"
}
*/
