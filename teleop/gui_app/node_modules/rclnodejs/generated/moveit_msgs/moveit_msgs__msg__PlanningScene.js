// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const RobotStateWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__RobotState.js');
const TransformStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__TransformStamped.js');
const AllowedCollisionMatrixWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__AllowedCollisionMatrix.js');
const LinkPaddingWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__LinkPadding.js');
const LinkScaleWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__LinkScale.js');
const ObjectColorWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__ObjectColor.js');
const PlanningSceneWorldWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__PlanningSceneWorld.js');
const PlanningSceneRefStruct = StructType({
  name: primitiveTypes.string,
  robot_state: RobotStateWrapper.refObjectType,
  robot_model_name: primitiveTypes.string,
  fixed_frame_transforms: TransformStampedWrapper.refObjectArrayType,
  allowed_collision_matrix: AllowedCollisionMatrixWrapper.refObjectType,
  link_padding: LinkPaddingWrapper.refObjectArrayType,
  link_scale: LinkScaleWrapper.refObjectArrayType,
  object_colors: ObjectColorWrapper.refObjectArrayType,
  world: PlanningSceneWorldWrapper.refObjectType,
  is_diff: primitiveTypes.bool,
});
const PlanningSceneRefArray = ArrayType(PlanningSceneRefStruct);
const PlanningSceneRefStructArray = StructType({
  data: PlanningSceneRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PlanningSceneWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PlanningSceneRefStruct(other._refObject.toObject());
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._wrapperFields.robot_state =  new RobotStateWrapper(other._wrapperFields.robot_state);
      this._robot_model_nameIntialized = true;
      this._wrapperFields.robot_model_name =  new StringWrapper(other._wrapperFields.robot_model_name);
      this._wrapperFields.fixed_frame_transforms = TransformStampedWrapper.createArray();
      this._wrapperFields.fixed_frame_transforms.copy(other._wrapperFields.fixed_frame_transforms);
      this._wrapperFields.allowed_collision_matrix =  new AllowedCollisionMatrixWrapper(other._wrapperFields.allowed_collision_matrix);
      this._wrapperFields.link_padding = LinkPaddingWrapper.createArray();
      this._wrapperFields.link_padding.copy(other._wrapperFields.link_padding);
      this._wrapperFields.link_scale = LinkScaleWrapper.createArray();
      this._wrapperFields.link_scale.copy(other._wrapperFields.link_scale);
      this._wrapperFields.object_colors = ObjectColorWrapper.createArray();
      this._wrapperFields.object_colors.copy(other._wrapperFields.object_colors);
      this._wrapperFields.world =  new PlanningSceneWorldWrapper(other._wrapperFields.world);
      this._is_diffIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PlanningSceneRefStruct();
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._wrapperFields.robot_state = new RobotStateWrapper();
    this._robot_model_nameIntialized = false;
    this._wrapperFields.robot_model_name = new StringWrapper();
    this._wrapperFields.fixed_frame_transforms = TransformStampedWrapper.createArray();
    this._wrapperFields.allowed_collision_matrix = new AllowedCollisionMatrixWrapper();
    this._wrapperFields.link_padding = LinkPaddingWrapper.createArray();
    this._wrapperFields.link_scale = LinkScaleWrapper.createArray();
    this._wrapperFields.object_colors = ObjectColorWrapper.createArray();
    this._wrapperFields.world = new PlanningSceneWorldWrapper();
    this._is_diffIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PlanningSceneWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PlanningSceneArrayWrapper;
  }
  static get ArrayType() {
    return PlanningSceneArrayWrapper;
  }
  static get refObjectArrayType() {
    return PlanningSceneRefStructArray
  }
  static get refObjectType() {
    return PlanningSceneRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in PlanningScene');
      }
      if (checkConsistency && !this._robot_model_nameIntialized) {
        throw new TypeError('Invalid argument: robot_model_name in PlanningScene');
      }
      if (checkConsistency && !this._is_diffIntialized) {
        throw new TypeError('Invalid argument: is_diff in PlanningScene');
      }
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    this._wrapperFields.robot_state.freeze(own, checkConsistency);
    this._refObject.robot_state = this._wrapperFields.robot_state.refObject;
    if (own) {
      this._wrapperFields.robot_model_name.freeze(own, checkConsistency);
    }
    this._refObject.robot_model_name = this._wrapperFields.robot_model_name.refObject;
    this._wrapperFields.fixed_frame_transforms.freeze(own, checkConsistency);
    this._refObject.fixed_frame_transforms = this._wrapperFields.fixed_frame_transforms.refObject;
    this._wrapperFields.allowed_collision_matrix.freeze(own, checkConsistency);
    this._refObject.allowed_collision_matrix = this._wrapperFields.allowed_collision_matrix.refObject;
    this._wrapperFields.link_padding.freeze(own, checkConsistency);
    this._refObject.link_padding = this._wrapperFields.link_padding.refObject;
    this._wrapperFields.link_scale.freeze(own, checkConsistency);
    this._refObject.link_scale = this._wrapperFields.link_scale.refObject;
    this._wrapperFields.object_colors.freeze(own, checkConsistency);
    this._refObject.object_colors = this._wrapperFields.object_colors.refObject;
    this._wrapperFields.world.freeze(own, checkConsistency);
    this._refObject.world = this._wrapperFields.world.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    this._wrapperFields.robot_state.copyRefObject(refObject.robot_state);
    this._robot_model_nameIntialized = true;
    this._wrapperFields.robot_model_name.data = refObject.robot_model_name.data;
    this._wrapperFields.fixed_frame_transforms.copyRefObject(refObject.fixed_frame_transforms);
    this._wrapperFields.allowed_collision_matrix.copyRefObject(refObject.allowed_collision_matrix);
    this._wrapperFields.link_padding.copyRefObject(refObject.link_padding);
    this._wrapperFields.link_scale.copyRefObject(refObject.link_scale);
    this._wrapperFields.object_colors.copyRefObject(refObject.object_colors);
    this._wrapperFields.world.copyRefObject(refObject.world);
    this._is_diffIntialized = true;
    this._refObject.is_diff = refObject.is_diff;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.name);
    RobotStateWrapper.freeStruct(refObject.robot_state);
    StringWrapper.freeStruct(refObject.robot_model_name);
    if (refObject.fixed_frame_transforms.size != 0) {
      TransformStampedWrapper.ArrayType.freeArray(refObject.fixed_frame_transforms);
      if (TransformStampedWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.fixed_frame_transforms, TransformStampedWrapper.refObjectArrayType, 'data');
      }
    }
    AllowedCollisionMatrixWrapper.freeStruct(refObject.allowed_collision_matrix);
    if (refObject.link_padding.size != 0) {
      LinkPaddingWrapper.ArrayType.freeArray(refObject.link_padding);
      if (LinkPaddingWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.link_padding, LinkPaddingWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.link_scale.size != 0) {
      LinkScaleWrapper.ArrayType.freeArray(refObject.link_scale);
      if (LinkScaleWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.link_scale, LinkScaleWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.object_colors.size != 0) {
      ObjectColorWrapper.ArrayType.freeArray(refObject.object_colors);
      if (ObjectColorWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.object_colors, ObjectColorWrapper.refObjectArrayType, 'data');
      }
    }
    PlanningSceneWorldWrapper.freeStruct(refObject.world);
  }
  static destoryRawROS(msg) {
    PlanningSceneWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'PlanningScene'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get robot_state() {
    return this._wrapperFields.robot_state;
  }
  set robot_state(value) {
    if (value instanceof RobotStateWrapper) {
      this._wrapperFields.robot_state.copy(value);
    } else {
      this._wrapperFields.robot_state.copy(new RobotStateWrapper(value));
    }
  }
  get robot_model_name() {
    if (!this._robot_model_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.robot_model_name.data;
  }
  set robot_model_name(value) {
    this._robot_model_nameIntialized = true;
    this._wrapperFields.robot_model_name.data = value;
  }
  get fixed_frame_transforms() {
    return this._wrapperFields.fixed_frame_transforms;
  }
  set fixed_frame_transforms(value) {
    this._wrapperFields.fixed_frame_transforms.fill(value);
  }
  get allowed_collision_matrix() {
    return this._wrapperFields.allowed_collision_matrix;
  }
  set allowed_collision_matrix(value) {
    if (value instanceof AllowedCollisionMatrixWrapper) {
      this._wrapperFields.allowed_collision_matrix.copy(value);
    } else {
      this._wrapperFields.allowed_collision_matrix.copy(new AllowedCollisionMatrixWrapper(value));
    }
  }
  get link_padding() {
    return this._wrapperFields.link_padding;
  }
  set link_padding(value) {
    this._wrapperFields.link_padding.fill(value);
  }
  get link_scale() {
    return this._wrapperFields.link_scale;
  }
  set link_scale(value) {
    this._wrapperFields.link_scale.fill(value);
  }
  get object_colors() {
    return this._wrapperFields.object_colors;
  }
  set object_colors(value) {
    this._wrapperFields.object_colors.fill(value);
  }
  get world() {
    return this._wrapperFields.world;
  }
  set world(value) {
    if (value instanceof PlanningSceneWorldWrapper) {
      this._wrapperFields.world.copy(value);
    } else {
      this._wrapperFields.world.copy(new PlanningSceneWorldWrapper(value));
    }
  }
  get is_diff() {
    if (!this._is_diffIntialized) {
      return undefined;
    }
    return this._refObject.is_diff;
  }
  set is_diff(value) {
    this._is_diffIntialized = true;
    this._refObject.is_diff = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PlanningSceneRefStruct(refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    this._wrapperFields.robot_state.copyRefObject(this._refObject.robot_state);
    this._robot_model_nameIntialized = true;
    this._wrapperFields.robot_model_name.copyRefObject(this._refObject.robot_model_name);
    this._wrapperFields.fixed_frame_transforms.copyRefObject(this._refObject.fixed_frame_transforms);
    this._wrapperFields.allowed_collision_matrix.copyRefObject(this._refObject.allowed_collision_matrix);
    this._wrapperFields.link_padding.copyRefObject(this._refObject.link_padding);
    this._wrapperFields.link_scale.copyRefObject(this._refObject.link_scale);
    this._wrapperFields.object_colors.copyRefObject(this._refObject.object_colors);
    this._wrapperFields.world.copyRefObject(this._refObject.world);
    this._is_diffIntialized = true;
  }
  copy(other) {
    this._refObject = new PlanningSceneRefStruct(other._refObject.toObject());
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._wrapperFields.robot_state.copy(other._wrapperFields.robot_state);
    this._robot_model_nameIntialized = true;
    this._wrapperFields.robot_model_name.copy(other._wrapperFields.robot_model_name);
    this._wrapperFields.fixed_frame_transforms.copy(other._wrapperFields.fixed_frame_transforms);
    this._wrapperFields.allowed_collision_matrix.copy(other._wrapperFields.allowed_collision_matrix);
    this._wrapperFields.link_padding.copy(other._wrapperFields.link_padding);
    this._wrapperFields.link_scale.copy(other._wrapperFields.link_scale);
    this._wrapperFields.object_colors.copy(other._wrapperFields.object_colors);
    this._wrapperFields.world.copy(other._wrapperFields.world);
    this._is_diffIntialized = true;
  }
  static get classType() {
    return PlanningSceneWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"robot_state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"RobotState","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"robot_model_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fixed_frame_transforms","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"TransformStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"allowed_collision_matrix","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"AllowedCollisionMatrix","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"link_padding","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"LinkPadding","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"link_scale","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"LinkScale","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"object_colors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"ObjectColor","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"world","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"PlanningSceneWorld","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"is_diff","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"PlanningScene","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PlanningScene"};
  }
  hasMember(name) {
    let memberNames = ["name","robot_state","robot_model_name","fixed_frame_transforms","allowed_collision_matrix","link_padding","link_scale","object_colors","world","is_diff"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PlanningSceneArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PlanningSceneWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PlanningSceneWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlanningSceneArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlanningSceneArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PlanningSceneRefArray(size);
    this._refObject = new PlanningSceneRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PlanningSceneWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PlanningSceneArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PlanningSceneArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PlanningSceneWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PlanningSceneWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PlanningSceneArrayWrapper;
  }
}
module.exports = PlanningSceneWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "robot_state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "RobotState",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "robot_model_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fixed_frame_transforms",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "TransformStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "allowed_collision_matrix",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "AllowedCollisionMatrix",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "link_padding",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "LinkPadding",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "link_scale",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "LinkScale",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "object_colors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "ObjectColor",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "world",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "PlanningSceneWorld",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "is_diff",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "PlanningScene",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PlanningScene"
}
*/
