// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const PlanningSceneComponentsRefStruct = StructType({
  components: primitiveTypes.uint32,
});
const PlanningSceneComponentsRefArray = ArrayType(PlanningSceneComponentsRefStruct);
const PlanningSceneComponentsRefStructArray = StructType({
  data: PlanningSceneComponentsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PlanningSceneComponentsWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PlanningSceneComponentsRefStruct(other._refObject.toObject());
      this._componentsIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PlanningSceneComponentsRefStruct();
    this._componentsIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PlanningSceneComponentsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PlanningSceneComponentsArrayWrapper;
  }
  static get ArrayType() {
    return PlanningSceneComponentsArrayWrapper;
  }
  static get refObjectArrayType() {
    return PlanningSceneComponentsRefStructArray
  }
  static get refObjectType() {
    return PlanningSceneComponentsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._componentsIntialized) {
        throw new TypeError('Invalid argument: components in PlanningSceneComponents');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._componentsIntialized = true;
    this._refObject.components = refObject.components;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    PlanningSceneComponentsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'PlanningSceneComponents'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get components() {
    if (!this._componentsIntialized) {
      return undefined;
    }
    return this._refObject.components;
  }
  set components(value) {
    this._componentsIntialized = true;
    this._refObject.components = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PlanningSceneComponentsRefStruct(refObject.toObject());
    this._componentsIntialized = true;
  }
  copy(other) {
    this._refObject = new PlanningSceneComponentsRefStruct(other._refObject.toObject());
    this._componentsIntialized = true;
  }
  static get classType() {
    return PlanningSceneComponentsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint32","name":"SCENE_SETTINGS","value":1},{"type":"uint32","name":"ROBOT_STATE","value":2},{"type":"uint32","name":"ROBOT_STATE_ATTACHED_OBJECTS","value":4},{"type":"uint32","name":"WORLD_OBJECT_NAMES","value":8},{"type":"uint32","name":"WORLD_OBJECT_GEOMETRY","value":16},{"type":"uint32","name":"OCTOMAP","value":32},{"type":"uint32","name":"TRANSFORMS","value":64},{"type":"uint32","name":"ALLOWED_COLLISION_MATRIX","value":128},{"type":"uint32","name":"LINK_PADDING_AND_SCALING","value":256},{"type":"uint32","name":"OBJECT_COLORS","value":512}],"fields":[{"name":"components","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"PlanningSceneComponents","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PlanningSceneComponents"};
  }
  hasMember(name) {
    let memberNames = ["components"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PlanningSceneComponentsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PlanningSceneComponentsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PlanningSceneComponentsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlanningSceneComponentsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlanningSceneComponentsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PlanningSceneComponentsRefArray(size);
    this._refObject = new PlanningSceneComponentsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PlanningSceneComponentsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PlanningSceneComponentsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PlanningSceneComponentsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PlanningSceneComponentsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PlanningSceneComponentsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PlanningSceneComponentsArrayWrapper;
  }
}
// Define constants (10 in total)
Object.defineProperty(PlanningSceneComponentsWrapper, "SCENE_SETTINGS", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "ROBOT_STATE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "ROBOT_STATE_ATTACHED_OBJECTS", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "WORLD_OBJECT_NAMES", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "WORLD_OBJECT_GEOMETRY", {value: 16, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "OCTOMAP", {value: 32, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "TRANSFORMS", {value: 64, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "ALLOWED_COLLISION_MATRIX", {value: 128, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "LINK_PADDING_AND_SCALING", {value: 256, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PlanningSceneComponentsWrapper, "OBJECT_COLORS", {value: 512, writable: false, enumerable: true, configurable: true});
module.exports = PlanningSceneComponentsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint32",
      "name": "SCENE_SETTINGS",
      "value": 1
    },
    {
      "type": "uint32",
      "name": "ROBOT_STATE",
      "value": 2
    },
    {
      "type": "uint32",
      "name": "ROBOT_STATE_ATTACHED_OBJECTS",
      "value": 4
    },
    {
      "type": "uint32",
      "name": "WORLD_OBJECT_NAMES",
      "value": 8
    },
    {
      "type": "uint32",
      "name": "WORLD_OBJECT_GEOMETRY",
      "value": 16
    },
    {
      "type": "uint32",
      "name": "OCTOMAP",
      "value": 32
    },
    {
      "type": "uint32",
      "name": "TRANSFORMS",
      "value": 64
    },
    {
      "type": "uint32",
      "name": "ALLOWED_COLLISION_MATRIX",
      "value": 128
    },
    {
      "type": "uint32",
      "name": "LINK_PADDING_AND_SCALING",
      "value": 256
    },
    {
      "type": "uint32",
      "name": "OBJECT_COLORS",
      "value": 512
    }
  ],
  "fields": [
    {
      "name": "components",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "PlanningSceneComponents",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PlanningSceneComponents"
}
*/
