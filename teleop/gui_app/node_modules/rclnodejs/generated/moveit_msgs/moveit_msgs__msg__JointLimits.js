// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const JointLimitsRefStruct = StructType({
  joint_name: primitiveTypes.string,
  has_position_limits: primitiveTypes.bool,
  min_position: primitiveTypes.float64,
  max_position: primitiveTypes.float64,
  has_velocity_limits: primitiveTypes.bool,
  max_velocity: primitiveTypes.float64,
  has_acceleration_limits: primitiveTypes.bool,
  max_acceleration: primitiveTypes.float64,
  has_jerk_limits: primitiveTypes.bool,
  max_jerk: primitiveTypes.float64,
});
const JointLimitsRefArray = ArrayType(JointLimitsRefStruct);
const JointLimitsRefStructArray = StructType({
  data: JointLimitsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class JointLimitsWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new JointLimitsRefStruct(other._refObject.toObject());
      this._joint_nameIntialized = true;
      this._wrapperFields.joint_name =  new StringWrapper(other._wrapperFields.joint_name);
      this._has_position_limitsIntialized = true;
      this._min_positionIntialized = true;
      this._max_positionIntialized = true;
      this._has_velocity_limitsIntialized = true;
      this._max_velocityIntialized = true;
      this._has_acceleration_limitsIntialized = true;
      this._max_accelerationIntialized = true;
      this._has_jerk_limitsIntialized = true;
      this._max_jerkIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new JointLimitsRefStruct();
    this._joint_nameIntialized = false;
    this._wrapperFields.joint_name = new StringWrapper();
    this._has_position_limitsIntialized = false;
    this._min_positionIntialized = false;
    this._max_positionIntialized = false;
    this._has_velocity_limitsIntialized = false;
    this._max_velocityIntialized = false;
    this._has_acceleration_limitsIntialized = false;
    this._max_accelerationIntialized = false;
    this._has_jerk_limitsIntialized = false;
    this._max_jerkIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new JointLimitsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new JointLimitsArrayWrapper;
  }
  static get ArrayType() {
    return JointLimitsArrayWrapper;
  }
  static get refObjectArrayType() {
    return JointLimitsRefStructArray
  }
  static get refObjectType() {
    return JointLimitsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._joint_nameIntialized) {
        throw new TypeError('Invalid argument: joint_name in JointLimits');
      }
      if (checkConsistency && !this._has_position_limitsIntialized) {
        throw new TypeError('Invalid argument: has_position_limits in JointLimits');
      }
      if (checkConsistency && !this._min_positionIntialized) {
        throw new TypeError('Invalid argument: min_position in JointLimits');
      }
      if (checkConsistency && !this._max_positionIntialized) {
        throw new TypeError('Invalid argument: max_position in JointLimits');
      }
      if (checkConsistency && !this._has_velocity_limitsIntialized) {
        throw new TypeError('Invalid argument: has_velocity_limits in JointLimits');
      }
      if (checkConsistency && !this._max_velocityIntialized) {
        throw new TypeError('Invalid argument: max_velocity in JointLimits');
      }
      if (checkConsistency && !this._has_acceleration_limitsIntialized) {
        throw new TypeError('Invalid argument: has_acceleration_limits in JointLimits');
      }
      if (checkConsistency && !this._max_accelerationIntialized) {
        throw new TypeError('Invalid argument: max_acceleration in JointLimits');
      }
      if (checkConsistency && !this._has_jerk_limitsIntialized) {
        throw new TypeError('Invalid argument: has_jerk_limits in JointLimits');
      }
      if (checkConsistency && !this._max_jerkIntialized) {
        throw new TypeError('Invalid argument: max_jerk in JointLimits');
      }
    if (own) {
      this._wrapperFields.joint_name.freeze(own, checkConsistency);
    }
    this._refObject.joint_name = this._wrapperFields.joint_name.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._joint_nameIntialized = true;
    this._wrapperFields.joint_name.data = refObject.joint_name.data;
    this._has_position_limitsIntialized = true;
    this._refObject.has_position_limits = refObject.has_position_limits;
    this._min_positionIntialized = true;
    this._refObject.min_position = refObject.min_position;
    this._max_positionIntialized = true;
    this._refObject.max_position = refObject.max_position;
    this._has_velocity_limitsIntialized = true;
    this._refObject.has_velocity_limits = refObject.has_velocity_limits;
    this._max_velocityIntialized = true;
    this._refObject.max_velocity = refObject.max_velocity;
    this._has_acceleration_limitsIntialized = true;
    this._refObject.has_acceleration_limits = refObject.has_acceleration_limits;
    this._max_accelerationIntialized = true;
    this._refObject.max_acceleration = refObject.max_acceleration;
    this._has_jerk_limitsIntialized = true;
    this._refObject.has_jerk_limits = refObject.has_jerk_limits;
    this._max_jerkIntialized = true;
    this._refObject.max_jerk = refObject.max_jerk;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.joint_name);
  }
  static destoryRawROS(msg) {
    JointLimitsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'JointLimits'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get joint_name() {
    if (!this._joint_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.joint_name.data;
  }
  set joint_name(value) {
    this._joint_nameIntialized = true;
    this._wrapperFields.joint_name.data = value;
  }
  get has_position_limits() {
    if (!this._has_position_limitsIntialized) {
      return undefined;
    }
    return this._refObject.has_position_limits;
  }
  set has_position_limits(value) {
    this._has_position_limitsIntialized = true;
    this._refObject.has_position_limits = value;
  }
  get min_position() {
    if (!this._min_positionIntialized) {
      return undefined;
    }
    return this._refObject.min_position;
  }
  set min_position(value) {
    this._min_positionIntialized = true;
    this._refObject.min_position = value;
  }
  get max_position() {
    if (!this._max_positionIntialized) {
      return undefined;
    }
    return this._refObject.max_position;
  }
  set max_position(value) {
    this._max_positionIntialized = true;
    this._refObject.max_position = value;
  }
  get has_velocity_limits() {
    if (!this._has_velocity_limitsIntialized) {
      return undefined;
    }
    return this._refObject.has_velocity_limits;
  }
  set has_velocity_limits(value) {
    this._has_velocity_limitsIntialized = true;
    this._refObject.has_velocity_limits = value;
  }
  get max_velocity() {
    if (!this._max_velocityIntialized) {
      return undefined;
    }
    return this._refObject.max_velocity;
  }
  set max_velocity(value) {
    this._max_velocityIntialized = true;
    this._refObject.max_velocity = value;
  }
  get has_acceleration_limits() {
    if (!this._has_acceleration_limitsIntialized) {
      return undefined;
    }
    return this._refObject.has_acceleration_limits;
  }
  set has_acceleration_limits(value) {
    this._has_acceleration_limitsIntialized = true;
    this._refObject.has_acceleration_limits = value;
  }
  get max_acceleration() {
    if (!this._max_accelerationIntialized) {
      return undefined;
    }
    return this._refObject.max_acceleration;
  }
  set max_acceleration(value) {
    this._max_accelerationIntialized = true;
    this._refObject.max_acceleration = value;
  }
  get has_jerk_limits() {
    if (!this._has_jerk_limitsIntialized) {
      return undefined;
    }
    return this._refObject.has_jerk_limits;
  }
  set has_jerk_limits(value) {
    this._has_jerk_limitsIntialized = true;
    this._refObject.has_jerk_limits = value;
  }
  get max_jerk() {
    if (!this._max_jerkIntialized) {
      return undefined;
    }
    return this._refObject.max_jerk;
  }
  set max_jerk(value) {
    this._max_jerkIntialized = true;
    this._refObject.max_jerk = value;
  }
  copyRefObject(refObject) {
    this._refObject = new JointLimitsRefStruct(refObject.toObject());
    this._joint_nameIntialized = true;
    this._wrapperFields.joint_name.copyRefObject(this._refObject.joint_name);
    this._has_position_limitsIntialized = true;
    this._min_positionIntialized = true;
    this._max_positionIntialized = true;
    this._has_velocity_limitsIntialized = true;
    this._max_velocityIntialized = true;
    this._has_acceleration_limitsIntialized = true;
    this._max_accelerationIntialized = true;
    this._has_jerk_limitsIntialized = true;
    this._max_jerkIntialized = true;
  }
  copy(other) {
    this._refObject = new JointLimitsRefStruct(other._refObject.toObject());
    this._joint_nameIntialized = true;
    this._wrapperFields.joint_name.copy(other._wrapperFields.joint_name);
    this._has_position_limitsIntialized = true;
    this._min_positionIntialized = true;
    this._max_positionIntialized = true;
    this._has_velocity_limitsIntialized = true;
    this._max_velocityIntialized = true;
    this._has_acceleration_limitsIntialized = true;
    this._max_accelerationIntialized = true;
    this._has_jerk_limitsIntialized = true;
    this._max_jerkIntialized = true;
  }
  static get classType() {
    return JointLimitsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"joint_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"has_position_limits","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"min_position","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_position","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"has_velocity_limits","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_velocity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"has_acceleration_limits","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_acceleration","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"has_jerk_limits","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_jerk","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"JointLimits","stringUpperBound":null,"isPrimitiveType":false},"msgName":"JointLimits"};
  }
  hasMember(name) {
    let memberNames = ["joint_name","has_position_limits","min_position","max_position","has_velocity_limits","max_velocity","has_acceleration_limits","max_acceleration","has_jerk_limits","max_jerk"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class JointLimitsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof JointLimitsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new JointLimitsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to JointLimitsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to JointLimitsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new JointLimitsRefArray(size);
    this._refObject = new JointLimitsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new JointLimitsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof JointLimitsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "JointLimitsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      JointLimitsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return JointLimitsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return JointLimitsArrayWrapper;
  }
}
module.exports = JointLimitsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "joint_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "has_position_limits",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "min_position",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_position",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "has_velocity_limits",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_velocity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "has_acceleration_limits",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_acceleration",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "has_jerk_limits",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_jerk",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "JointLimits",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "JointLimits"
}
*/
