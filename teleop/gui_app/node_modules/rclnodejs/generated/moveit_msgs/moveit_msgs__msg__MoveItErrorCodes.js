// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const MoveItErrorCodesRefStruct = StructType({
  val: primitiveTypes.int32,
});
const MoveItErrorCodesRefArray = ArrayType(MoveItErrorCodesRefStruct);
const MoveItErrorCodesRefStructArray = StructType({
  data: MoveItErrorCodesRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MoveItErrorCodesWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MoveItErrorCodesRefStruct(other._refObject.toObject());
      this._valIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MoveItErrorCodesRefStruct();
    this._valIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new MoveItErrorCodesWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MoveItErrorCodesArrayWrapper;
  }
  static get ArrayType() {
    return MoveItErrorCodesArrayWrapper;
  }
  static get refObjectArrayType() {
    return MoveItErrorCodesRefStructArray
  }
  static get refObjectType() {
    return MoveItErrorCodesRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._valIntialized) {
        throw new TypeError('Invalid argument: val in MoveItErrorCodes');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._valIntialized = true;
    this._refObject.val = refObject.val;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    MoveItErrorCodesWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'MoveItErrorCodes'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get val() {
    if (!this._valIntialized) {
      return undefined;
    }
    return this._refObject.val;
  }
  set val(value) {
    this._valIntialized = true;
    this._refObject.val = value;
  }
  copyRefObject(refObject) {
    this._refObject = new MoveItErrorCodesRefStruct(refObject.toObject());
    this._valIntialized = true;
  }
  copy(other) {
    this._refObject = new MoveItErrorCodesRefStruct(other._refObject.toObject());
    this._valIntialized = true;
  }
  static get classType() {
    return MoveItErrorCodesWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int32","name":"SUCCESS","value":1},{"type":"int32","name":"FAILURE","value":99999},{"type":"int32","name":"PLANNING_FAILED","value":-1},{"type":"int32","name":"INVALID_MOTION_PLAN","value":-2},{"type":"int32","name":"MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE","value":-3},{"type":"int32","name":"CONTROL_FAILED","value":-4},{"type":"int32","name":"UNABLE_TO_AQUIRE_SENSOR_DATA","value":-5},{"type":"int32","name":"TIMED_OUT","value":-6},{"type":"int32","name":"PREEMPTED","value":-7},{"type":"int32","name":"START_STATE_IN_COLLISION","value":-10},{"type":"int32","name":"START_STATE_VIOLATES_PATH_CONSTRAINTS","value":-11},{"type":"int32","name":"START_STATE_INVALID","value":-26},{"type":"int32","name":"GOAL_IN_COLLISION","value":-12},{"type":"int32","name":"GOAL_VIOLATES_PATH_CONSTRAINTS","value":-13},{"type":"int32","name":"GOAL_CONSTRAINTS_VIOLATED","value":-14},{"type":"int32","name":"GOAL_STATE_INVALID","value":-27},{"type":"int32","name":"UNRECOGNIZED_GOAL_TYPE","value":-28},{"type":"int32","name":"INVALID_GROUP_NAME","value":-15},{"type":"int32","name":"INVALID_GOAL_CONSTRAINTS","value":-16},{"type":"int32","name":"INVALID_ROBOT_STATE","value":-17},{"type":"int32","name":"INVALID_LINK_NAME","value":-18},{"type":"int32","name":"INVALID_OBJECT_NAME","value":-19},{"type":"int32","name":"FRAME_TRANSFORM_FAILURE","value":-21},{"type":"int32","name":"COLLISION_CHECKING_UNAVAILABLE","value":-22},{"type":"int32","name":"ROBOT_STATE_STALE","value":-23},{"type":"int32","name":"SENSOR_INFO_STALE","value":-24},{"type":"int32","name":"COMMUNICATION_FAILURE","value":-25},{"type":"int32","name":"CRASH","value":-29},{"type":"int32","name":"ABORT","value":-30},{"type":"int32","name":"NO_IK_SOLUTION","value":-31}],"fields":[{"name":"val","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"MoveItErrorCodes","stringUpperBound":null,"isPrimitiveType":false},"msgName":"MoveItErrorCodes"};
  }
  hasMember(name) {
    let memberNames = ["val"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MoveItErrorCodesArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MoveItErrorCodesWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MoveItErrorCodesWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MoveItErrorCodesArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MoveItErrorCodesArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MoveItErrorCodesRefArray(size);
    this._refObject = new MoveItErrorCodesRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MoveItErrorCodesWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MoveItErrorCodesArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MoveItErrorCodesArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MoveItErrorCodesWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MoveItErrorCodesWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MoveItErrorCodesArrayWrapper;
  }
}
// Define constants (30 in total)
Object.defineProperty(MoveItErrorCodesWrapper, "SUCCESS", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "FAILURE", {value: 99999, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "PLANNING_FAILED", {value: -1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "INVALID_MOTION_PLAN", {value: -2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE", {value: -3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "CONTROL_FAILED", {value: -4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "UNABLE_TO_AQUIRE_SENSOR_DATA", {value: -5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "TIMED_OUT", {value: -6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "PREEMPTED", {value: -7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "START_STATE_IN_COLLISION", {value: -10, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "START_STATE_VIOLATES_PATH_CONSTRAINTS", {value: -11, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "START_STATE_INVALID", {value: -26, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "GOAL_IN_COLLISION", {value: -12, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "GOAL_VIOLATES_PATH_CONSTRAINTS", {value: -13, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "GOAL_CONSTRAINTS_VIOLATED", {value: -14, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "GOAL_STATE_INVALID", {value: -27, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "UNRECOGNIZED_GOAL_TYPE", {value: -28, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "INVALID_GROUP_NAME", {value: -15, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "INVALID_GOAL_CONSTRAINTS", {value: -16, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "INVALID_ROBOT_STATE", {value: -17, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "INVALID_LINK_NAME", {value: -18, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "INVALID_OBJECT_NAME", {value: -19, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "FRAME_TRANSFORM_FAILURE", {value: -21, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "COLLISION_CHECKING_UNAVAILABLE", {value: -22, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "ROBOT_STATE_STALE", {value: -23, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "SENSOR_INFO_STALE", {value: -24, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "COMMUNICATION_FAILURE", {value: -25, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "CRASH", {value: -29, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "ABORT", {value: -30, writable: false, enumerable: true, configurable: true});
Object.defineProperty(MoveItErrorCodesWrapper, "NO_IK_SOLUTION", {value: -31, writable: false, enumerable: true, configurable: true});
module.exports = MoveItErrorCodesWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int32",
      "name": "SUCCESS",
      "value": 1
    },
    {
      "type": "int32",
      "name": "FAILURE",
      "value": 99999
    },
    {
      "type": "int32",
      "name": "PLANNING_FAILED",
      "value": -1
    },
    {
      "type": "int32",
      "name": "INVALID_MOTION_PLAN",
      "value": -2
    },
    {
      "type": "int32",
      "name": "MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE",
      "value": -3
    },
    {
      "type": "int32",
      "name": "CONTROL_FAILED",
      "value": -4
    },
    {
      "type": "int32",
      "name": "UNABLE_TO_AQUIRE_SENSOR_DATA",
      "value": -5
    },
    {
      "type": "int32",
      "name": "TIMED_OUT",
      "value": -6
    },
    {
      "type": "int32",
      "name": "PREEMPTED",
      "value": -7
    },
    {
      "type": "int32",
      "name": "START_STATE_IN_COLLISION",
      "value": -10
    },
    {
      "type": "int32",
      "name": "START_STATE_VIOLATES_PATH_CONSTRAINTS",
      "value": -11
    },
    {
      "type": "int32",
      "name": "START_STATE_INVALID",
      "value": -26
    },
    {
      "type": "int32",
      "name": "GOAL_IN_COLLISION",
      "value": -12
    },
    {
      "type": "int32",
      "name": "GOAL_VIOLATES_PATH_CONSTRAINTS",
      "value": -13
    },
    {
      "type": "int32",
      "name": "GOAL_CONSTRAINTS_VIOLATED",
      "value": -14
    },
    {
      "type": "int32",
      "name": "GOAL_STATE_INVALID",
      "value": -27
    },
    {
      "type": "int32",
      "name": "UNRECOGNIZED_GOAL_TYPE",
      "value": -28
    },
    {
      "type": "int32",
      "name": "INVALID_GROUP_NAME",
      "value": -15
    },
    {
      "type": "int32",
      "name": "INVALID_GOAL_CONSTRAINTS",
      "value": -16
    },
    {
      "type": "int32",
      "name": "INVALID_ROBOT_STATE",
      "value": -17
    },
    {
      "type": "int32",
      "name": "INVALID_LINK_NAME",
      "value": -18
    },
    {
      "type": "int32",
      "name": "INVALID_OBJECT_NAME",
      "value": -19
    },
    {
      "type": "int32",
      "name": "FRAME_TRANSFORM_FAILURE",
      "value": -21
    },
    {
      "type": "int32",
      "name": "COLLISION_CHECKING_UNAVAILABLE",
      "value": -22
    },
    {
      "type": "int32",
      "name": "ROBOT_STATE_STALE",
      "value": -23
    },
    {
      "type": "int32",
      "name": "SENSOR_INFO_STALE",
      "value": -24
    },
    {
      "type": "int32",
      "name": "COMMUNICATION_FAILURE",
      "value": -25
    },
    {
      "type": "int32",
      "name": "CRASH",
      "value": -29
    },
    {
      "type": "int32",
      "name": "ABORT",
      "value": -30
    },
    {
      "type": "int32",
      "name": "NO_IK_SOLUTION",
      "value": -31
    }
  ],
  "fields": [
    {
      "name": "val",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "MoveItErrorCodes",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "MoveItErrorCodes"
}
*/
