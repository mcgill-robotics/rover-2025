// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const PointWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Point.js');
const Vector3Wrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const ContactInformationRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  position: PointWrapper.refObjectType,
  normal: Vector3Wrapper.refObjectType,
  depth: primitiveTypes.float64,
  contact_body_1: primitiveTypes.string,
  body_type_1: primitiveTypes.uint32,
  contact_body_2: primitiveTypes.string,
  body_type_2: primitiveTypes.uint32,
});
const ContactInformationRefArray = ArrayType(ContactInformationRefStruct);
const ContactInformationRefStructArray = StructType({
  data: ContactInformationRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ContactInformationWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ContactInformationRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.position =  new PointWrapper(other._wrapperFields.position);
      this._wrapperFields.normal =  new Vector3Wrapper(other._wrapperFields.normal);
      this._depthIntialized = true;
      this._contact_body_1Intialized = true;
      this._wrapperFields.contact_body_1 =  new StringWrapper(other._wrapperFields.contact_body_1);
      this._body_type_1Intialized = true;
      this._contact_body_2Intialized = true;
      this._wrapperFields.contact_body_2 =  new StringWrapper(other._wrapperFields.contact_body_2);
      this._body_type_2Intialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ContactInformationRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.position = new PointWrapper();
    this._wrapperFields.normal = new Vector3Wrapper();
    this._depthIntialized = false;
    this._contact_body_1Intialized = false;
    this._wrapperFields.contact_body_1 = new StringWrapper();
    this._body_type_1Intialized = false;
    this._contact_body_2Intialized = false;
    this._wrapperFields.contact_body_2 = new StringWrapper();
    this._body_type_2Intialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ContactInformationWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ContactInformationArrayWrapper;
  }
  static get ArrayType() {
    return ContactInformationArrayWrapper;
  }
  static get refObjectArrayType() {
    return ContactInformationRefStructArray
  }
  static get refObjectType() {
    return ContactInformationRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._depthIntialized) {
        throw new TypeError('Invalid argument: depth in ContactInformation');
      }
      if (checkConsistency && !this._contact_body_1Intialized) {
        throw new TypeError('Invalid argument: contact_body_1 in ContactInformation');
      }
      if (checkConsistency && !this._body_type_1Intialized) {
        throw new TypeError('Invalid argument: body_type_1 in ContactInformation');
      }
      if (checkConsistency && !this._contact_body_2Intialized) {
        throw new TypeError('Invalid argument: contact_body_2 in ContactInformation');
      }
      if (checkConsistency && !this._body_type_2Intialized) {
        throw new TypeError('Invalid argument: body_type_2 in ContactInformation');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.position.freeze(own, checkConsistency);
    this._refObject.position = this._wrapperFields.position.refObject;
    this._wrapperFields.normal.freeze(own, checkConsistency);
    this._refObject.normal = this._wrapperFields.normal.refObject;
    if (own) {
      this._wrapperFields.contact_body_1.freeze(own, checkConsistency);
    }
    this._refObject.contact_body_1 = this._wrapperFields.contact_body_1.refObject;
    if (own) {
      this._wrapperFields.contact_body_2.freeze(own, checkConsistency);
    }
    this._refObject.contact_body_2 = this._wrapperFields.contact_body_2.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.position.copyRefObject(refObject.position);
    this._wrapperFields.normal.copyRefObject(refObject.normal);
    this._depthIntialized = true;
    this._refObject.depth = refObject.depth;
    this._contact_body_1Intialized = true;
    this._wrapperFields.contact_body_1.data = refObject.contact_body_1.data;
    this._body_type_1Intialized = true;
    this._refObject.body_type_1 = refObject.body_type_1;
    this._contact_body_2Intialized = true;
    this._wrapperFields.contact_body_2.data = refObject.contact_body_2.data;
    this._body_type_2Intialized = true;
    this._refObject.body_type_2 = refObject.body_type_2;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    PointWrapper.freeStruct(refObject.position);
    Vector3Wrapper.freeStruct(refObject.normal);
    StringWrapper.freeStruct(refObject.contact_body_1);
    StringWrapper.freeStruct(refObject.contact_body_2);
  }
  static destoryRawROS(msg) {
    ContactInformationWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'ContactInformation'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get position() {
    return this._wrapperFields.position;
  }
  set position(value) {
    if (value instanceof PointWrapper) {
      this._wrapperFields.position.copy(value);
    } else {
      this._wrapperFields.position.copy(new PointWrapper(value));
    }
  }
  get normal() {
    return this._wrapperFields.normal;
  }
  set normal(value) {
    if (value instanceof Vector3Wrapper) {
      this._wrapperFields.normal.copy(value);
    } else {
      this._wrapperFields.normal.copy(new Vector3Wrapper(value));
    }
  }
  get depth() {
    if (!this._depthIntialized) {
      return undefined;
    }
    return this._refObject.depth;
  }
  set depth(value) {
    this._depthIntialized = true;
    this._refObject.depth = value;
  }
  get contact_body_1() {
    if (!this._contact_body_1Intialized) {
      return undefined;
    }
    return this._wrapperFields.contact_body_1.data;
  }
  set contact_body_1(value) {
    this._contact_body_1Intialized = true;
    this._wrapperFields.contact_body_1.data = value;
  }
  get body_type_1() {
    if (!this._body_type_1Intialized) {
      return undefined;
    }
    return this._refObject.body_type_1;
  }
  set body_type_1(value) {
    this._body_type_1Intialized = true;
    this._refObject.body_type_1 = value;
  }
  get contact_body_2() {
    if (!this._contact_body_2Intialized) {
      return undefined;
    }
    return this._wrapperFields.contact_body_2.data;
  }
  set contact_body_2(value) {
    this._contact_body_2Intialized = true;
    this._wrapperFields.contact_body_2.data = value;
  }
  get body_type_2() {
    if (!this._body_type_2Intialized) {
      return undefined;
    }
    return this._refObject.body_type_2;
  }
  set body_type_2(value) {
    this._body_type_2Intialized = true;
    this._refObject.body_type_2 = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ContactInformationRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.position.copyRefObject(this._refObject.position);
    this._wrapperFields.normal.copyRefObject(this._refObject.normal);
    this._depthIntialized = true;
    this._contact_body_1Intialized = true;
    this._wrapperFields.contact_body_1.copyRefObject(this._refObject.contact_body_1);
    this._body_type_1Intialized = true;
    this._contact_body_2Intialized = true;
    this._wrapperFields.contact_body_2.copyRefObject(this._refObject.contact_body_2);
    this._body_type_2Intialized = true;
  }
  copy(other) {
    this._refObject = new ContactInformationRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.position.copy(other._wrapperFields.position);
    this._wrapperFields.normal.copy(other._wrapperFields.normal);
    this._depthIntialized = true;
    this._contact_body_1Intialized = true;
    this._wrapperFields.contact_body_1.copy(other._wrapperFields.contact_body_1);
    this._body_type_1Intialized = true;
    this._contact_body_2Intialized = true;
    this._wrapperFields.contact_body_2.copy(other._wrapperFields.contact_body_2);
    this._body_type_2Intialized = true;
  }
  static get classType() {
    return ContactInformationWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint32","name":"ROBOT_LINK","value":0},{"type":"uint32","name":"WORLD_OBJECT","value":1},{"type":"uint32","name":"ROBOT_ATTACHED","value":2}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"position","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Point","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"normal","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"depth","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"contact_body_1","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"body_type_1","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"contact_body_2","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"body_type_2","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"ContactInformation","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ContactInformation"};
  }
  hasMember(name) {
    let memberNames = ["header","position","normal","depth","contact_body_1","body_type_1","contact_body_2","body_type_2"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ContactInformationArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ContactInformationWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ContactInformationWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ContactInformationArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ContactInformationArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ContactInformationRefArray(size);
    this._refObject = new ContactInformationRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ContactInformationWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ContactInformationArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ContactInformationArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ContactInformationWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ContactInformationWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ContactInformationArrayWrapper;
  }
}
// Define constants (3 in total)
Object.defineProperty(ContactInformationWrapper, "ROBOT_LINK", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ContactInformationWrapper, "WORLD_OBJECT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ContactInformationWrapper, "ROBOT_ATTACHED", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = ContactInformationWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint32",
      "name": "ROBOT_LINK",
      "value": 0
    },
    {
      "type": "uint32",
      "name": "WORLD_OBJECT",
      "value": 1
    },
    {
      "type": "uint32",
      "name": "ROBOT_ATTACHED",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "position",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Point",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "normal",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "depth",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "contact_body_1",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "body_type_1",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "contact_body_2",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "body_type_2",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "ContactInformation",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ContactInformation"
}
*/
