// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const GraspWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__Grasp.js');
const ConstraintsWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__Constraints.js');
const PlanningOptionsWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__PlanningOptions.js');
const Pickup_GoalRefStruct = StructType({
  target_name: primitiveTypes.string,
  group_name: primitiveTypes.string,
  end_effector: primitiveTypes.string,
  possible_grasps: GraspWrapper.refObjectArrayType,
  support_surface_name: primitiveTypes.string,
  allow_gripper_support_collision: primitiveTypes.bool,
  attached_object_touch_links: StringWrapper.refObjectArrayType,
  minimize_object_distance: primitiveTypes.bool,
  path_constraints: ConstraintsWrapper.refObjectType,
  planner_id: primitiveTypes.string,
  allowed_touch_objects: StringWrapper.refObjectArrayType,
  allowed_planning_time: primitiveTypes.float64,
  planning_options: PlanningOptionsWrapper.refObjectType,
});
const Pickup_GoalRefArray = ArrayType(Pickup_GoalRefStruct);
const Pickup_GoalRefStructArray = StructType({
  data: Pickup_GoalRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class Pickup_GoalWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._attached_object_touch_linksArray = [];
    this._allowed_touch_objectsArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new Pickup_GoalRefStruct(other._refObject.toObject());
      this._target_nameIntialized = true;
      this._wrapperFields.target_name =  new StringWrapper(other._wrapperFields.target_name);
      this._group_nameIntialized = true;
      this._wrapperFields.group_name =  new StringWrapper(other._wrapperFields.group_name);
      this._end_effectorIntialized = true;
      this._wrapperFields.end_effector =  new StringWrapper(other._wrapperFields.end_effector);
      this._wrapperFields.possible_grasps = GraspWrapper.createArray();
      this._wrapperFields.possible_grasps.copy(other._wrapperFields.possible_grasps);
      this._support_surface_nameIntialized = true;
      this._wrapperFields.support_surface_name =  new StringWrapper(other._wrapperFields.support_surface_name);
      this._allow_gripper_support_collisionIntialized = true;
      this._wrapperFields.attached_object_touch_links = StringWrapper.createArray();
      this._wrapperFields.attached_object_touch_links.copy(other._wrapperFields.attached_object_touch_links);
      this.attached_object_touch_links = other.attached_object_touch_links;
      this._minimize_object_distanceIntialized = true;
      this._wrapperFields.path_constraints =  new ConstraintsWrapper(other._wrapperFields.path_constraints);
      this._planner_idIntialized = true;
      this._wrapperFields.planner_id =  new StringWrapper(other._wrapperFields.planner_id);
      this._wrapperFields.allowed_touch_objects = StringWrapper.createArray();
      this._wrapperFields.allowed_touch_objects.copy(other._wrapperFields.allowed_touch_objects);
      this.allowed_touch_objects = other.allowed_touch_objects;
      this._allowed_planning_timeIntialized = true;
      this._wrapperFields.planning_options =  new PlanningOptionsWrapper(other._wrapperFields.planning_options);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new Pickup_GoalRefStruct();
    this._target_nameIntialized = false;
    this._wrapperFields.target_name = new StringWrapper();
    this._group_nameIntialized = false;
    this._wrapperFields.group_name = new StringWrapper();
    this._end_effectorIntialized = false;
    this._wrapperFields.end_effector = new StringWrapper();
    this._wrapperFields.possible_grasps = GraspWrapper.createArray();
    this._support_surface_nameIntialized = false;
    this._wrapperFields.support_surface_name = new StringWrapper();
    this._allow_gripper_support_collisionIntialized = false;
    this._wrapperFields.attached_object_touch_links = StringWrapper.createArray();
    this._minimize_object_distanceIntialized = false;
    this._wrapperFields.path_constraints = new ConstraintsWrapper();
    this._planner_idIntialized = false;
    this._wrapperFields.planner_id = new StringWrapper();
    this._wrapperFields.allowed_touch_objects = StringWrapper.createArray();
    this._allowed_planning_timeIntialized = false;
    this._wrapperFields.planning_options = new PlanningOptionsWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new Pickup_GoalWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new Pickup_GoalArrayWrapper;
  }
  static get ArrayType() {
    return Pickup_GoalArrayWrapper;
  }
  static get refObjectArrayType() {
    return Pickup_GoalRefStructArray
  }
  static get refObjectType() {
    return Pickup_GoalRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._target_nameIntialized) {
        throw new TypeError('Invalid argument: target_name in Pickup_Goal');
      }
      if (checkConsistency && !this._group_nameIntialized) {
        throw new TypeError('Invalid argument: group_name in Pickup_Goal');
      }
      if (checkConsistency && !this._end_effectorIntialized) {
        throw new TypeError('Invalid argument: end_effector in Pickup_Goal');
      }
      if (checkConsistency && !this._support_surface_nameIntialized) {
        throw new TypeError('Invalid argument: support_surface_name in Pickup_Goal');
      }
      if (checkConsistency && !this._allow_gripper_support_collisionIntialized) {
        throw new TypeError('Invalid argument: allow_gripper_support_collision in Pickup_Goal');
      }
      if (checkConsistency && !this._minimize_object_distanceIntialized) {
        throw new TypeError('Invalid argument: minimize_object_distance in Pickup_Goal');
      }
      if (checkConsistency && !this._planner_idIntialized) {
        throw new TypeError('Invalid argument: planner_id in Pickup_Goal');
      }
      if (checkConsistency && !this._allowed_planning_timeIntialized) {
        throw new TypeError('Invalid argument: allowed_planning_time in Pickup_Goal');
      }
    if (own) {
      this._wrapperFields.target_name.freeze(own, checkConsistency);
    }
    this._refObject.target_name = this._wrapperFields.target_name.refObject;
    if (own) {
      this._wrapperFields.group_name.freeze(own, checkConsistency);
    }
    this._refObject.group_name = this._wrapperFields.group_name.refObject;
    if (own) {
      this._wrapperFields.end_effector.freeze(own, checkConsistency);
    }
    this._refObject.end_effector = this._wrapperFields.end_effector.refObject;
    this._wrapperFields.possible_grasps.freeze(own, checkConsistency);
    this._refObject.possible_grasps = this._wrapperFields.possible_grasps.refObject;
    if (own) {
      this._wrapperFields.support_surface_name.freeze(own, checkConsistency);
    }
    this._refObject.support_surface_name = this._wrapperFields.support_surface_name.refObject;
    if (!own) {
      this._wrapperFields.attached_object_touch_links.fill(this._attached_object_touch_linksArray);
      this._wrapperFields.attached_object_touch_links.freeze(own, checkConsistency);
      this._refObject.attached_object_touch_links = this._wrapperFields.attached_object_touch_links.refObject;
    } else {
      this._wrapperFields.attached_object_touch_links.fill([]);
      this._wrapperFields.attached_object_touch_links.freeze(own, checkConsistency);
      this._refObject.attached_object_touch_links = this._wrapperFields.attached_object_touch_links.refObject;
    }
    this._wrapperFields.path_constraints.freeze(own, checkConsistency);
    this._refObject.path_constraints = this._wrapperFields.path_constraints.refObject;
    if (own) {
      this._wrapperFields.planner_id.freeze(own, checkConsistency);
    }
    this._refObject.planner_id = this._wrapperFields.planner_id.refObject;
    if (!own) {
      this._wrapperFields.allowed_touch_objects.fill(this._allowed_touch_objectsArray);
      this._wrapperFields.allowed_touch_objects.freeze(own, checkConsistency);
      this._refObject.allowed_touch_objects = this._wrapperFields.allowed_touch_objects.refObject;
    } else {
      this._wrapperFields.allowed_touch_objects.fill([]);
      this._wrapperFields.allowed_touch_objects.freeze(own, checkConsistency);
      this._refObject.allowed_touch_objects = this._wrapperFields.allowed_touch_objects.refObject;
    }
    this._wrapperFields.planning_options.freeze(own, checkConsistency);
    this._refObject.planning_options = this._wrapperFields.planning_options.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._target_nameIntialized = true;
    this._wrapperFields.target_name.data = refObject.target_name.data;
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.data = refObject.group_name.data;
    this._end_effectorIntialized = true;
    this._wrapperFields.end_effector.data = refObject.end_effector.data;
    this._wrapperFields.possible_grasps.copyRefObject(refObject.possible_grasps);
    this._support_surface_nameIntialized = true;
    this._wrapperFields.support_surface_name.data = refObject.support_surface_name.data;
    this._allow_gripper_support_collisionIntialized = true;
    this._refObject.allow_gripper_support_collision = refObject.allow_gripper_support_collision;
    refObject.attached_object_touch_links.data.length = refObject.attached_object_touch_links.size;
    for (let index = 0; index < refObject.attached_object_touch_links.size; index++) {
      this._attached_object_touch_linksArray[index] = refObject.attached_object_touch_links.data[index].data;
    }
    this._minimize_object_distanceIntialized = true;
    this._refObject.minimize_object_distance = refObject.minimize_object_distance;
    this._wrapperFields.path_constraints.copyRefObject(refObject.path_constraints);
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.data = refObject.planner_id.data;
    refObject.allowed_touch_objects.data.length = refObject.allowed_touch_objects.size;
    for (let index = 0; index < refObject.allowed_touch_objects.size; index++) {
      this._allowed_touch_objectsArray[index] = refObject.allowed_touch_objects.data[index].data;
    }
    this._allowed_planning_timeIntialized = true;
    this._refObject.allowed_planning_time = refObject.allowed_planning_time;
    this._wrapperFields.planning_options.copyRefObject(refObject.planning_options);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.target_name);
    StringWrapper.freeStruct(refObject.group_name);
    StringWrapper.freeStruct(refObject.end_effector);
    if (refObject.possible_grasps.size != 0) {
      GraspWrapper.ArrayType.freeArray(refObject.possible_grasps);
      if (GraspWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.possible_grasps, GraspWrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.support_surface_name);
    if (refObject.attached_object_touch_links.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.attached_object_touch_links);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.attached_object_touch_links, StringWrapper.refObjectArrayType, 'data');
      }
    }
    ConstraintsWrapper.freeStruct(refObject.path_constraints);
    StringWrapper.freeStruct(refObject.planner_id);
    if (refObject.allowed_touch_objects.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.allowed_touch_objects);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.allowed_touch_objects, StringWrapper.refObjectArrayType, 'data');
      }
    }
    PlanningOptionsWrapper.freeStruct(refObject.planning_options);
  }
  static destoryRawROS(msg) {
    Pickup_GoalWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'action', interfaceName: 'Pickup_Goal'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get target_name() {
    if (!this._target_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.target_name.data;
  }
  set target_name(value) {
    this._target_nameIntialized = true;
    this._wrapperFields.target_name.data = value;
  }
  get group_name() {
    if (!this._group_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.group_name.data;
  }
  set group_name(value) {
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.data = value;
  }
  get end_effector() {
    if (!this._end_effectorIntialized) {
      return undefined;
    }
    return this._wrapperFields.end_effector.data;
  }
  set end_effector(value) {
    this._end_effectorIntialized = true;
    this._wrapperFields.end_effector.data = value;
  }
  get possible_grasps() {
    return this._wrapperFields.possible_grasps;
  }
  set possible_grasps(value) {
    this._wrapperFields.possible_grasps.fill(value);
  }
  get support_surface_name() {
    if (!this._support_surface_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.support_surface_name.data;
  }
  set support_surface_name(value) {
    this._support_surface_nameIntialized = true;
    this._wrapperFields.support_surface_name.data = value;
  }
  get allow_gripper_support_collision() {
    if (!this._allow_gripper_support_collisionIntialized) {
      return undefined;
    }
    return this._refObject.allow_gripper_support_collision;
  }
  set allow_gripper_support_collision(value) {
    this._allow_gripper_support_collisionIntialized = true;
    this._refObject.allow_gripper_support_collision = value;
  }
  get attached_object_touch_links() {
    return this._attached_object_touch_linksArray;
  }
  set attached_object_touch_links(value) {
    this._attached_object_touch_linksArray = value;
  }
  get minimize_object_distance() {
    if (!this._minimize_object_distanceIntialized) {
      return undefined;
    }
    return this._refObject.minimize_object_distance;
  }
  set minimize_object_distance(value) {
    this._minimize_object_distanceIntialized = true;
    this._refObject.minimize_object_distance = value;
  }
  get path_constraints() {
    return this._wrapperFields.path_constraints;
  }
  set path_constraints(value) {
    if (value instanceof ConstraintsWrapper) {
      this._wrapperFields.path_constraints.copy(value);
    } else {
      this._wrapperFields.path_constraints.copy(new ConstraintsWrapper(value));
    }
  }
  get planner_id() {
    if (!this._planner_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.planner_id.data;
  }
  set planner_id(value) {
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.data = value;
  }
  get allowed_touch_objects() {
    return this._allowed_touch_objectsArray;
  }
  set allowed_touch_objects(value) {
    this._allowed_touch_objectsArray = value;
  }
  get allowed_planning_time() {
    if (!this._allowed_planning_timeIntialized) {
      return undefined;
    }
    return this._refObject.allowed_planning_time;
  }
  set allowed_planning_time(value) {
    this._allowed_planning_timeIntialized = true;
    this._refObject.allowed_planning_time = value;
  }
  get planning_options() {
    return this._wrapperFields.planning_options;
  }
  set planning_options(value) {
    if (value instanceof PlanningOptionsWrapper) {
      this._wrapperFields.planning_options.copy(value);
    } else {
      this._wrapperFields.planning_options.copy(new PlanningOptionsWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new Pickup_GoalRefStruct(refObject.toObject());
    this._target_nameIntialized = true;
    this._wrapperFields.target_name.copyRefObject(this._refObject.target_name);
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.copyRefObject(this._refObject.group_name);
    this._end_effectorIntialized = true;
    this._wrapperFields.end_effector.copyRefObject(this._refObject.end_effector);
    this._wrapperFields.possible_grasps.copyRefObject(this._refObject.possible_grasps);
    this._support_surface_nameIntialized = true;
    this._wrapperFields.support_surface_name.copyRefObject(this._refObject.support_surface_name);
    this._allow_gripper_support_collisionIntialized = true;
    refObject.attached_object_touch_links.data.length = refObject.attached_object_touch_links.size;
    for (let index = 0; index < refObject.attached_object_touch_links.size; index++) {
      this._attached_object_touch_linksArray[index] = refObject.attached_object_touch_links.data[index].data;
    }
    this._minimize_object_distanceIntialized = true;
    this._wrapperFields.path_constraints.copyRefObject(this._refObject.path_constraints);
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.copyRefObject(this._refObject.planner_id);
    refObject.allowed_touch_objects.data.length = refObject.allowed_touch_objects.size;
    for (let index = 0; index < refObject.allowed_touch_objects.size; index++) {
      this._allowed_touch_objectsArray[index] = refObject.allowed_touch_objects.data[index].data;
    }
    this._allowed_planning_timeIntialized = true;
    this._wrapperFields.planning_options.copyRefObject(this._refObject.planning_options);
  }
  copy(other) {
    this._refObject = new Pickup_GoalRefStruct(other._refObject.toObject());
    this._target_nameIntialized = true;
    this._wrapperFields.target_name.copy(other._wrapperFields.target_name);
    this._group_nameIntialized = true;
    this._wrapperFields.group_name.copy(other._wrapperFields.group_name);
    this._end_effectorIntialized = true;
    this._wrapperFields.end_effector.copy(other._wrapperFields.end_effector);
    this._wrapperFields.possible_grasps.copy(other._wrapperFields.possible_grasps);
    this._support_surface_nameIntialized = true;
    this._wrapperFields.support_surface_name.copy(other._wrapperFields.support_surface_name);
    this._allow_gripper_support_collisionIntialized = true;
    this._attached_object_touch_linksArray = other._attached_object_touch_linksArray.slice();
    this._minimize_object_distanceIntialized = true;
    this._wrapperFields.path_constraints.copy(other._wrapperFields.path_constraints);
    this._planner_idIntialized = true;
    this._wrapperFields.planner_id.copy(other._wrapperFields.planner_id);
    this._allowed_touch_objectsArray = other._allowed_touch_objectsArray.slice();
    this._allowed_planning_timeIntialized = true;
    this._wrapperFields.planning_options.copy(other._wrapperFields.planning_options);
  }
  static get classType() {
    return Pickup_GoalWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"target_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"group_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"end_effector","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"possible_grasps","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"moveit_msgs","type":"Grasp","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"support_surface_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"allow_gripper_support_collision","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"attached_object_touch_links","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"minimize_object_distance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"path_constraints","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"Constraints","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"planner_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"allowed_touch_objects","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"allowed_planning_time","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"planning_options","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"PlanningOptions","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"Pickup_Goal","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Pickup_Goal"};
  }
  hasMember(name) {
    let memberNames = ["target_name","group_name","end_effector","possible_grasps","support_surface_name","allow_gripper_support_collision","attached_object_touch_links","minimize_object_distance","path_constraints","planner_id","allowed_touch_objects","allowed_planning_time","planning_options"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class Pickup_GoalArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof Pickup_GoalWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new Pickup_GoalWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to Pickup_GoalArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to Pickup_GoalArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new Pickup_GoalRefArray(size);
    this._refObject = new Pickup_GoalRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new Pickup_GoalWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof Pickup_GoalArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "Pickup_GoalArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      Pickup_GoalWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return Pickup_GoalWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return Pickup_GoalArrayWrapper;
  }
}
module.exports = Pickup_GoalWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "target_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "group_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "end_effector",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "possible_grasps",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "moveit_msgs",
        "type": "Grasp",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "support_surface_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "allow_gripper_support_collision",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "attached_object_touch_links",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "minimize_object_distance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "path_constraints",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "Constraints",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "planner_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "allowed_touch_objects",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "allowed_planning_time",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "planning_options",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "PlanningOptions",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "Pickup_Goal",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Pickup_Goal"
}
*/
