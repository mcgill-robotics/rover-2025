// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const PlanningSceneWrapper = require('../../generated/moveit_msgs/moveit_msgs__msg__PlanningScene.js');
const PlanningOptionsRefStruct = StructType({
  planning_scene_diff: PlanningSceneWrapper.refObjectType,
  plan_only: primitiveTypes.bool,
  look_around: primitiveTypes.bool,
  look_around_attempts: primitiveTypes.int32,
  max_safe_execution_cost: primitiveTypes.float64,
  replan: primitiveTypes.bool,
  replan_attempts: primitiveTypes.int32,
  replan_delay: primitiveTypes.float64,
});
const PlanningOptionsRefArray = ArrayType(PlanningOptionsRefStruct);
const PlanningOptionsRefStructArray = StructType({
  data: PlanningOptionsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PlanningOptionsWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PlanningOptionsRefStruct(other._refObject.toObject());
      this._wrapperFields.planning_scene_diff =  new PlanningSceneWrapper(other._wrapperFields.planning_scene_diff);
      this._plan_onlyIntialized = true;
      this._look_aroundIntialized = true;
      this._look_around_attemptsIntialized = true;
      this._max_safe_execution_costIntialized = true;
      this._replanIntialized = true;
      this._replan_attemptsIntialized = true;
      this._replan_delayIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PlanningOptionsRefStruct();
    this._wrapperFields.planning_scene_diff = new PlanningSceneWrapper();
    this._plan_onlyIntialized = false;
    this._look_aroundIntialized = false;
    this._look_around_attemptsIntialized = false;
    this._max_safe_execution_costIntialized = false;
    this._replanIntialized = false;
    this._replan_attemptsIntialized = false;
    this._replan_delayIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PlanningOptionsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PlanningOptionsArrayWrapper;
  }
  static get ArrayType() {
    return PlanningOptionsArrayWrapper;
  }
  static get refObjectArrayType() {
    return PlanningOptionsRefStructArray
  }
  static get refObjectType() {
    return PlanningOptionsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._plan_onlyIntialized) {
        throw new TypeError('Invalid argument: plan_only in PlanningOptions');
      }
      if (checkConsistency && !this._look_aroundIntialized) {
        throw new TypeError('Invalid argument: look_around in PlanningOptions');
      }
      if (checkConsistency && !this._look_around_attemptsIntialized) {
        throw new TypeError('Invalid argument: look_around_attempts in PlanningOptions');
      }
      if (checkConsistency && !this._max_safe_execution_costIntialized) {
        throw new TypeError('Invalid argument: max_safe_execution_cost in PlanningOptions');
      }
      if (checkConsistency && !this._replanIntialized) {
        throw new TypeError('Invalid argument: replan in PlanningOptions');
      }
      if (checkConsistency && !this._replan_attemptsIntialized) {
        throw new TypeError('Invalid argument: replan_attempts in PlanningOptions');
      }
      if (checkConsistency && !this._replan_delayIntialized) {
        throw new TypeError('Invalid argument: replan_delay in PlanningOptions');
      }
    this._wrapperFields.planning_scene_diff.freeze(own, checkConsistency);
    this._refObject.planning_scene_diff = this._wrapperFields.planning_scene_diff.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.planning_scene_diff.copyRefObject(refObject.planning_scene_diff);
    this._plan_onlyIntialized = true;
    this._refObject.plan_only = refObject.plan_only;
    this._look_aroundIntialized = true;
    this._refObject.look_around = refObject.look_around;
    this._look_around_attemptsIntialized = true;
    this._refObject.look_around_attempts = refObject.look_around_attempts;
    this._max_safe_execution_costIntialized = true;
    this._refObject.max_safe_execution_cost = refObject.max_safe_execution_cost;
    this._replanIntialized = true;
    this._refObject.replan = refObject.replan;
    this._replan_attemptsIntialized = true;
    this._refObject.replan_attempts = refObject.replan_attempts;
    this._replan_delayIntialized = true;
    this._refObject.replan_delay = refObject.replan_delay;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    PlanningSceneWrapper.freeStruct(refObject.planning_scene_diff);
  }
  static destoryRawROS(msg) {
    PlanningOptionsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'moveit_msgs', subFolder: 'msg', interfaceName: 'PlanningOptions'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get planning_scene_diff() {
    return this._wrapperFields.planning_scene_diff;
  }
  set planning_scene_diff(value) {
    if (value instanceof PlanningSceneWrapper) {
      this._wrapperFields.planning_scene_diff.copy(value);
    } else {
      this._wrapperFields.planning_scene_diff.copy(new PlanningSceneWrapper(value));
    }
  }
  get plan_only() {
    if (!this._plan_onlyIntialized) {
      return undefined;
    }
    return this._refObject.plan_only;
  }
  set plan_only(value) {
    this._plan_onlyIntialized = true;
    this._refObject.plan_only = value;
  }
  get look_around() {
    if (!this._look_aroundIntialized) {
      return undefined;
    }
    return this._refObject.look_around;
  }
  set look_around(value) {
    this._look_aroundIntialized = true;
    this._refObject.look_around = value;
  }
  get look_around_attempts() {
    if (!this._look_around_attemptsIntialized) {
      return undefined;
    }
    return this._refObject.look_around_attempts;
  }
  set look_around_attempts(value) {
    this._look_around_attemptsIntialized = true;
    this._refObject.look_around_attempts = value;
  }
  get max_safe_execution_cost() {
    if (!this._max_safe_execution_costIntialized) {
      return undefined;
    }
    return this._refObject.max_safe_execution_cost;
  }
  set max_safe_execution_cost(value) {
    this._max_safe_execution_costIntialized = true;
    this._refObject.max_safe_execution_cost = value;
  }
  get replan() {
    if (!this._replanIntialized) {
      return undefined;
    }
    return this._refObject.replan;
  }
  set replan(value) {
    this._replanIntialized = true;
    this._refObject.replan = value;
  }
  get replan_attempts() {
    if (!this._replan_attemptsIntialized) {
      return undefined;
    }
    return this._refObject.replan_attempts;
  }
  set replan_attempts(value) {
    this._replan_attemptsIntialized = true;
    this._refObject.replan_attempts = value;
  }
  get replan_delay() {
    if (!this._replan_delayIntialized) {
      return undefined;
    }
    return this._refObject.replan_delay;
  }
  set replan_delay(value) {
    this._replan_delayIntialized = true;
    this._refObject.replan_delay = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PlanningOptionsRefStruct(refObject.toObject());
    this._wrapperFields.planning_scene_diff.copyRefObject(this._refObject.planning_scene_diff);
    this._plan_onlyIntialized = true;
    this._look_aroundIntialized = true;
    this._look_around_attemptsIntialized = true;
    this._max_safe_execution_costIntialized = true;
    this._replanIntialized = true;
    this._replan_attemptsIntialized = true;
    this._replan_delayIntialized = true;
  }
  copy(other) {
    this._refObject = new PlanningOptionsRefStruct(other._refObject.toObject());
    this._wrapperFields.planning_scene_diff.copy(other._wrapperFields.planning_scene_diff);
    this._plan_onlyIntialized = true;
    this._look_aroundIntialized = true;
    this._look_around_attemptsIntialized = true;
    this._max_safe_execution_costIntialized = true;
    this._replanIntialized = true;
    this._replan_attemptsIntialized = true;
    this._replan_delayIntialized = true;
  }
  static get classType() {
    return PlanningOptionsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"planning_scene_diff","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"moveit_msgs","type":"PlanningScene","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"plan_only","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"look_around","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"look_around_attempts","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_safe_execution_cost","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"replan","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"replan_attempts","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"replan_delay","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"moveit_msgs","type":"PlanningOptions","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PlanningOptions"};
  }
  hasMember(name) {
    let memberNames = ["planning_scene_diff","plan_only","look_around","look_around_attempts","max_safe_execution_cost","replan","replan_attempts","replan_delay"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PlanningOptionsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PlanningOptionsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PlanningOptionsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlanningOptionsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PlanningOptionsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PlanningOptionsRefArray(size);
    this._refObject = new PlanningOptionsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PlanningOptionsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PlanningOptionsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PlanningOptionsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PlanningOptionsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PlanningOptionsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PlanningOptionsArrayWrapper;
  }
}
module.exports = PlanningOptionsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "planning_scene_diff",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "moveit_msgs",
        "type": "PlanningScene",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "plan_only",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "look_around",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "look_around_attempts",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_safe_execution_cost",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "replan",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "replan_attempts",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "replan_delay",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "moveit_msgs",
    "type": "PlanningOptions",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PlanningOptions"
}
*/
