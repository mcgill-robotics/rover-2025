// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const TimeWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Time.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const ControlRefStruct = StructType({
  control_type: primitiveTypes.int8,
  stamp: TimeWrapper.refObjectType,
  mocap4r2_source: primitiveTypes.string,
  session_id: primitiveTypes.string,
  mocap4r2_systems: StringWrapper.refObjectArrayType,
});
const ControlRefArray = ArrayType(ControlRefStruct);
const ControlRefStructArray = StructType({
  data: ControlRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ControlWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._mocap4r2_systemsArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ControlRefStruct(other._refObject.toObject());
      this._control_typeIntialized = true;
      this._wrapperFields.stamp =  new TimeWrapper(other._wrapperFields.stamp);
      this._mocap4r2_sourceIntialized = true;
      this._wrapperFields.mocap4r2_source =  new StringWrapper(other._wrapperFields.mocap4r2_source);
      this._session_idIntialized = true;
      this._wrapperFields.session_id =  new StringWrapper(other._wrapperFields.session_id);
      this._wrapperFields.mocap4r2_systems = StringWrapper.createArray();
      this._wrapperFields.mocap4r2_systems.copy(other._wrapperFields.mocap4r2_systems);
      this.mocap4r2_systems = other.mocap4r2_systems;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ControlRefStruct();
    this._control_typeIntialized = false;
    this._wrapperFields.stamp = new TimeWrapper();
    this._mocap4r2_sourceIntialized = false;
    this._wrapperFields.mocap4r2_source = new StringWrapper();
    this._session_idIntialized = false;
    this._wrapperFields.session_id = new StringWrapper();
    this._wrapperFields.mocap4r2_systems = StringWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ControlWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ControlArrayWrapper;
  }
  static get ArrayType() {
    return ControlArrayWrapper;
  }
  static get refObjectArrayType() {
    return ControlRefStructArray
  }
  static get refObjectType() {
    return ControlRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._control_typeIntialized) {
        throw new TypeError('Invalid argument: control_type in Control');
      }
      if (checkConsistency && !this._mocap4r2_sourceIntialized) {
        throw new TypeError('Invalid argument: mocap4r2_source in Control');
      }
      if (checkConsistency && !this._session_idIntialized) {
        throw new TypeError('Invalid argument: session_id in Control');
      }
    this._wrapperFields.stamp.freeze(own, checkConsistency);
    this._refObject.stamp = this._wrapperFields.stamp.refObject;
    if (own) {
      this._wrapperFields.mocap4r2_source.freeze(own, checkConsistency);
    }
    this._refObject.mocap4r2_source = this._wrapperFields.mocap4r2_source.refObject;
    if (own) {
      this._wrapperFields.session_id.freeze(own, checkConsistency);
    }
    this._refObject.session_id = this._wrapperFields.session_id.refObject;
    if (!own) {
      this._wrapperFields.mocap4r2_systems.fill(this._mocap4r2_systemsArray);
      this._wrapperFields.mocap4r2_systems.freeze(own, checkConsistency);
      this._refObject.mocap4r2_systems = this._wrapperFields.mocap4r2_systems.refObject;
    } else {
      this._wrapperFields.mocap4r2_systems.fill([]);
      this._wrapperFields.mocap4r2_systems.freeze(own, checkConsistency);
      this._refObject.mocap4r2_systems = this._wrapperFields.mocap4r2_systems.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._control_typeIntialized = true;
    this._refObject.control_type = refObject.control_type;
    this._wrapperFields.stamp.copyRefObject(refObject.stamp);
    this._mocap4r2_sourceIntialized = true;
    this._wrapperFields.mocap4r2_source.data = refObject.mocap4r2_source.data;
    this._session_idIntialized = true;
    this._wrapperFields.session_id.data = refObject.session_id.data;
    refObject.mocap4r2_systems.data.length = refObject.mocap4r2_systems.size;
    for (let index = 0; index < refObject.mocap4r2_systems.size; index++) {
      this._mocap4r2_systemsArray[index] = refObject.mocap4r2_systems.data[index].data;
    }
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    TimeWrapper.freeStruct(refObject.stamp);
    StringWrapper.freeStruct(refObject.mocap4r2_source);
    StringWrapper.freeStruct(refObject.session_id);
    if (refObject.mocap4r2_systems.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.mocap4r2_systems);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.mocap4r2_systems, StringWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    ControlWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'mocap4r2_control_msgs', subFolder: 'msg', interfaceName: 'Control'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get control_type() {
    if (!this._control_typeIntialized) {
      return undefined;
    }
    return this._refObject.control_type;
  }
  set control_type(value) {
    this._control_typeIntialized = true;
    this._refObject.control_type = value;
  }
  get stamp() {
    return this._wrapperFields.stamp;
  }
  set stamp(value) {
    if (value instanceof TimeWrapper) {
      this._wrapperFields.stamp.copy(value);
    } else {
      this._wrapperFields.stamp.copy(new TimeWrapper(value));
    }
  }
  get mocap4r2_source() {
    if (!this._mocap4r2_sourceIntialized) {
      return undefined;
    }
    return this._wrapperFields.mocap4r2_source.data;
  }
  set mocap4r2_source(value) {
    this._mocap4r2_sourceIntialized = true;
    this._wrapperFields.mocap4r2_source.data = value;
  }
  get session_id() {
    if (!this._session_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.session_id.data;
  }
  set session_id(value) {
    this._session_idIntialized = true;
    this._wrapperFields.session_id.data = value;
  }
  get mocap4r2_systems() {
    return this._mocap4r2_systemsArray;
  }
  set mocap4r2_systems(value) {
    this._mocap4r2_systemsArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ControlRefStruct(refObject.toObject());
    this._control_typeIntialized = true;
    this._wrapperFields.stamp.copyRefObject(this._refObject.stamp);
    this._mocap4r2_sourceIntialized = true;
    this._wrapperFields.mocap4r2_source.copyRefObject(this._refObject.mocap4r2_source);
    this._session_idIntialized = true;
    this._wrapperFields.session_id.copyRefObject(this._refObject.session_id);
    refObject.mocap4r2_systems.data.length = refObject.mocap4r2_systems.size;
    for (let index = 0; index < refObject.mocap4r2_systems.size; index++) {
      this._mocap4r2_systemsArray[index] = refObject.mocap4r2_systems.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new ControlRefStruct(other._refObject.toObject());
    this._control_typeIntialized = true;
    this._wrapperFields.stamp.copy(other._wrapperFields.stamp);
    this._mocap4r2_sourceIntialized = true;
    this._wrapperFields.mocap4r2_source.copy(other._wrapperFields.mocap4r2_source);
    this._session_idIntialized = true;
    this._wrapperFields.session_id.copy(other._wrapperFields.session_id);
    this._mocap4r2_systemsArray = other._mocap4r2_systemsArray.slice();
  }
  static get classType() {
    return ControlWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int8","name":"START","value":0},{"type":"int8","name":"ACK_START","value":1},{"type":"int8","name":"STOP","value":2},{"type":"int8","name":"ACK_STOP","value":3}],"fields":[{"name":"control_type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Time","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"mocap4r2_source","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"session_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mocap4r2_systems","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"mocap4r2_control_msgs","type":"Control","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Control"};
  }
  hasMember(name) {
    let memberNames = ["control_type","stamp","mocap4r2_source","session_id","mocap4r2_systems"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ControlArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ControlWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ControlWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ControlArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ControlArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ControlRefArray(size);
    this._refObject = new ControlRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ControlWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ControlArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ControlArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ControlWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ControlWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ControlArrayWrapper;
  }
}
// Define constants (4 in total)
Object.defineProperty(ControlWrapper, "START", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlWrapper, "ACK_START", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlWrapper, "STOP", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlWrapper, "ACK_STOP", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = ControlWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int8",
      "name": "START",
      "value": 0
    },
    {
      "type": "int8",
      "name": "ACK_START",
      "value": 1
    },
    {
      "type": "int8",
      "name": "STOP",
      "value": 2
    },
    {
      "type": "int8",
      "name": "ACK_STOP",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "control_type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Time",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "mocap4r2_source",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "session_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mocap4r2_systems",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "mocap4r2_control_msgs",
    "type": "Control",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Control"
}
*/
