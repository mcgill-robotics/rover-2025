// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const EntityWrapper = require('../../generated/ros_gz_interfaces/ros_gz_interfaces__msg__Entity.js');
const Vector3Wrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const JointWrenchWrapper = require('../../generated/ros_gz_interfaces/ros_gz_interfaces__msg__JointWrench.js');
const ContactRefStruct = StructType({
  collision1: EntityWrapper.refObjectType,
  collision2: EntityWrapper.refObjectType,
  positions: Vector3Wrapper.refObjectArrayType,
  normals: Vector3Wrapper.refObjectArrayType,
  depths: Float64Wrapper.refObjectArrayType,
  wrenches: JointWrenchWrapper.refObjectArrayType,
});
const ContactRefArray = ArrayType(ContactRefStruct);
const ContactRefStructArray = StructType({
  data: ContactRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ContactWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ContactRefStruct(other._refObject.toObject());
      this._wrapperFields.collision1 =  new EntityWrapper(other._wrapperFields.collision1);
      this._wrapperFields.collision2 =  new EntityWrapper(other._wrapperFields.collision2);
      this._wrapperFields.positions = Vector3Wrapper.createArray();
      this._wrapperFields.positions.copy(other._wrapperFields.positions);
      this._wrapperFields.normals = Vector3Wrapper.createArray();
      this._wrapperFields.normals.copy(other._wrapperFields.normals);
      this._wrapperFields.depths = Float64Wrapper.createArray();
      this._wrapperFields.depths.copy(other._wrapperFields.depths);
      this._wrapperFields.wrenches = JointWrenchWrapper.createArray();
      this._wrapperFields.wrenches.copy(other._wrapperFields.wrenches);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ContactRefStruct();
    this._wrapperFields.collision1 = new EntityWrapper();
    this._wrapperFields.collision2 = new EntityWrapper();
    this._wrapperFields.positions = Vector3Wrapper.createArray();
    this._wrapperFields.normals = Vector3Wrapper.createArray();
    this._wrapperFields.depths = Float64Wrapper.createArray();
    this._wrapperFields.wrenches = JointWrenchWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ContactWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ContactArrayWrapper;
  }
  static get ArrayType() {
    return ContactArrayWrapper;
  }
  static get refObjectArrayType() {
    return ContactRefStructArray
  }
  static get refObjectType() {
    return ContactRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.collision1.freeze(own, checkConsistency);
    this._refObject.collision1 = this._wrapperFields.collision1.refObject;
    this._wrapperFields.collision2.freeze(own, checkConsistency);
    this._refObject.collision2 = this._wrapperFields.collision2.refObject;
    this._wrapperFields.positions.freeze(own, checkConsistency);
    this._refObject.positions = this._wrapperFields.positions.refObject;
    this._wrapperFields.normals.freeze(own, checkConsistency);
    this._refObject.normals = this._wrapperFields.normals.refObject;
    this._wrapperFields.depths.freeze(own, checkConsistency);
    this._refObject.depths = this._wrapperFields.depths.refObject;
    if (own) {
      this._wrapperFields.depths.fill(Float64Array.from([]));
      this._wrapperFields.depths.freeze(own, checkConsistency);
      this._refObject.depths = this._wrapperFields.depths.refObject;
    }
    this._wrapperFields.wrenches.freeze(own, checkConsistency);
    this._refObject.wrenches = this._wrapperFields.wrenches.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.collision1.copyRefObject(refObject.collision1);
    this._wrapperFields.collision2.copyRefObject(refObject.collision2);
    this._wrapperFields.positions.copyRefObject(refObject.positions);
    this._wrapperFields.normals.copyRefObject(refObject.normals);
    this._wrapperFields.depths.copyRefObject(refObject.depths);
    this._wrapperFields.wrenches.copyRefObject(refObject.wrenches);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    EntityWrapper.freeStruct(refObject.collision1);
    EntityWrapper.freeStruct(refObject.collision2);
    if (refObject.positions.size != 0) {
      Vector3Wrapper.ArrayType.freeArray(refObject.positions);
      if (Vector3Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.positions, Vector3Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.normals.size != 0) {
      Vector3Wrapper.ArrayType.freeArray(refObject.normals);
      if (Vector3Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.normals, Vector3Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.depths.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.depths);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.depths, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.wrenches.size != 0) {
      JointWrenchWrapper.ArrayType.freeArray(refObject.wrenches);
      if (JointWrenchWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.wrenches, JointWrenchWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    ContactWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ros_gz_interfaces', subFolder: 'msg', interfaceName: 'Contact'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get collision1() {
    return this._wrapperFields.collision1;
  }
  set collision1(value) {
    if (value instanceof EntityWrapper) {
      this._wrapperFields.collision1.copy(value);
    } else {
      this._wrapperFields.collision1.copy(new EntityWrapper(value));
    }
  }
  get collision2() {
    return this._wrapperFields.collision2;
  }
  set collision2(value) {
    if (value instanceof EntityWrapper) {
      this._wrapperFields.collision2.copy(value);
    } else {
      this._wrapperFields.collision2.copy(new EntityWrapper(value));
    }
  }
  get positions() {
    return this._wrapperFields.positions;
  }
  set positions(value) {
    this._wrapperFields.positions.fill(value);
  }
  get normals() {
    return this._wrapperFields.normals;
  }
  set normals(value) {
    this._wrapperFields.normals.fill(value);
  }
  get depths() {
    return this._wrapperFields['depths'].data;
  }
  set depths(value) {
    this._wrapperFields['depths'].fill(value);
  }
  get wrenches() {
    return this._wrapperFields.wrenches;
  }
  set wrenches(value) {
    this._wrapperFields.wrenches.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new ContactRefStruct(refObject.toObject());
    this._wrapperFields.collision1.copyRefObject(this._refObject.collision1);
    this._wrapperFields.collision2.copyRefObject(this._refObject.collision2);
    this._wrapperFields.positions.copyRefObject(this._refObject.positions);
    this._wrapperFields.normals.copyRefObject(this._refObject.normals);
    this._wrapperFields.depths.copyRefObject(this._refObject.depths);
    this._wrapperFields.wrenches.copyRefObject(this._refObject.wrenches);
  }
  copy(other) {
    this._refObject = new ContactRefStruct(other._refObject.toObject());
    this._wrapperFields.collision1.copy(other._wrapperFields.collision1);
    this._wrapperFields.collision2.copy(other._wrapperFields.collision2);
    this._wrapperFields.positions.copy(other._wrapperFields.positions);
    this._wrapperFields.normals.copy(other._wrapperFields.normals);
    this._wrapperFields.depths.copy(other._wrapperFields.depths);
    this._wrapperFields.wrenches.copy(other._wrapperFields.wrenches);
  }
  static get classType() {
    return ContactWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"collision1","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"ros_gz_interfaces","type":"Entity","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"collision2","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"ros_gz_interfaces","type":"Entity","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"positions","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"normals","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Vector3","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"depths","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"wrenches","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"ros_gz_interfaces","type":"JointWrench","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"ros_gz_interfaces","type":"Contact","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Contact"};
  }
  hasMember(name) {
    let memberNames = ["collision1","collision2","positions","normals","depths","wrenches"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ContactArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ContactWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ContactWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ContactArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ContactArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ContactRefArray(size);
    this._refObject = new ContactRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ContactWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ContactArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ContactArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ContactWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ContactWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ContactArrayWrapper;
  }
}
module.exports = ContactWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "collision1",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "ros_gz_interfaces",
        "type": "Entity",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "collision2",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "ros_gz_interfaces",
        "type": "Entity",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "positions",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "normals",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Vector3",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "depths",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "wrenches",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "ros_gz_interfaces",
        "type": "JointWrench",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ros_gz_interfaces",
    "type": "Contact",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Contact"
}
*/
