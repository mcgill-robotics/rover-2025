// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const LightringLedsWrapper = require('../../generated/irobot_create_msgs/irobot_create_msgs__msg__LightringLeds.js');
const DurationWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Duration.js');
const LedAnimation_GoalRefStruct = StructType({
  animation_type: primitiveTypes.int8,
  lightring: LightringLedsWrapper.refObjectType,
  max_runtime: DurationWrapper.refObjectType,
});
const LedAnimation_GoalRefArray = ArrayType(LedAnimation_GoalRefStruct);
const LedAnimation_GoalRefStructArray = StructType({
  data: LedAnimation_GoalRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class LedAnimation_GoalWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new LedAnimation_GoalRefStruct(other._refObject.toObject());
      this._animation_typeIntialized = true;
      this._wrapperFields.lightring =  new LightringLedsWrapper(other._wrapperFields.lightring);
      this._wrapperFields.max_runtime =  new DurationWrapper(other._wrapperFields.max_runtime);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new LedAnimation_GoalRefStruct();
    this._animation_typeIntialized = false;
    this._wrapperFields.lightring = new LightringLedsWrapper();
    this._wrapperFields.max_runtime = new DurationWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new LedAnimation_GoalWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new LedAnimation_GoalArrayWrapper;
  }
  static get ArrayType() {
    return LedAnimation_GoalArrayWrapper;
  }
  static get refObjectArrayType() {
    return LedAnimation_GoalRefStructArray
  }
  static get refObjectType() {
    return LedAnimation_GoalRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._animation_typeIntialized) {
        throw new TypeError('Invalid argument: animation_type in LedAnimation_Goal');
      }
    this._wrapperFields.lightring.freeze(own, checkConsistency);
    this._refObject.lightring = this._wrapperFields.lightring.refObject;
    this._wrapperFields.max_runtime.freeze(own, checkConsistency);
    this._refObject.max_runtime = this._wrapperFields.max_runtime.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._animation_typeIntialized = true;
    this._refObject.animation_type = refObject.animation_type;
    this._wrapperFields.lightring.copyRefObject(refObject.lightring);
    this._wrapperFields.max_runtime.copyRefObject(refObject.max_runtime);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    LightringLedsWrapper.freeStruct(refObject.lightring);
    DurationWrapper.freeStruct(refObject.max_runtime);
  }
  static destoryRawROS(msg) {
    LedAnimation_GoalWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'irobot_create_msgs', subFolder: 'action', interfaceName: 'LedAnimation_Goal'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get animation_type() {
    if (!this._animation_typeIntialized) {
      return undefined;
    }
    return this._refObject.animation_type;
  }
  set animation_type(value) {
    this._animation_typeIntialized = true;
    this._refObject.animation_type = value;
  }
  get lightring() {
    return this._wrapperFields.lightring;
  }
  set lightring(value) {
    if (value instanceof LightringLedsWrapper) {
      this._wrapperFields.lightring.copy(value);
    } else {
      this._wrapperFields.lightring.copy(new LightringLedsWrapper(value));
    }
  }
  get max_runtime() {
    return this._wrapperFields.max_runtime;
  }
  set max_runtime(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.max_runtime.copy(value);
    } else {
      this._wrapperFields.max_runtime.copy(new DurationWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new LedAnimation_GoalRefStruct(refObject.toObject());
    this._animation_typeIntialized = true;
    this._wrapperFields.lightring.copyRefObject(this._refObject.lightring);
    this._wrapperFields.max_runtime.copyRefObject(this._refObject.max_runtime);
  }
  copy(other) {
    this._refObject = new LedAnimation_GoalRefStruct(other._refObject.toObject());
    this._animation_typeIntialized = true;
    this._wrapperFields.lightring.copy(other._wrapperFields.lightring);
    this._wrapperFields.max_runtime.copy(other._wrapperFields.max_runtime);
  }
  static get classType() {
    return LedAnimation_GoalWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int8","name":"BLINK_LIGHTS","value":1},{"type":"int8","name":"SPIN_LIGHTS","value":2}],"fields":[{"name":"animation_type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lightring","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"irobot_create_msgs","type":"LightringLeds","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"max_runtime","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"irobot_create_msgs","type":"LedAnimation_Goal","stringUpperBound":null,"isPrimitiveType":false},"msgName":"LedAnimation_Goal"};
  }
  hasMember(name) {
    let memberNames = ["animation_type","lightring","max_runtime"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class LedAnimation_GoalArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof LedAnimation_GoalWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new LedAnimation_GoalWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LedAnimation_GoalArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LedAnimation_GoalArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new LedAnimation_GoalRefArray(size);
    this._refObject = new LedAnimation_GoalRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new LedAnimation_GoalWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof LedAnimation_GoalArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "LedAnimation_GoalArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      LedAnimation_GoalWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return LedAnimation_GoalWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return LedAnimation_GoalArrayWrapper;
  }
}
// Define constants (2 in total)
Object.defineProperty(LedAnimation_GoalWrapper, "BLINK_LIGHTS", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LedAnimation_GoalWrapper, "SPIN_LIGHTS", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = LedAnimation_GoalWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int8",
      "name": "BLINK_LIGHTS",
      "value": 1
    },
    {
      "type": "int8",
      "name": "SPIN_LIGHTS",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "animation_type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lightring",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "irobot_create_msgs",
        "type": "LightringLeds",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "max_runtime",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "irobot_create_msgs",
    "type": "LedAnimation_Goal",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "LedAnimation_Goal"
}
*/
