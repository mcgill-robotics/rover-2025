// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const UserDisplayRefStruct = StructType({
  ip: primitiveTypes.string,
  battery: primitiveTypes.string,
  entries: ArrayType(primitiveTypes.string, 5),
  selected_entry: primitiveTypes.int32,
});
const UserDisplayRefArray = ArrayType(UserDisplayRefStruct);
const UserDisplayRefStructArray = StructType({
  data: UserDisplayRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class UserDisplayWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._entriesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new UserDisplayRefStruct(other._refObject.toObject());
      this._ipIntialized = true;
      this._wrapperFields.ip =  new StringWrapper(other._wrapperFields.ip);
      this._batteryIntialized = true;
      this._wrapperFields.battery =  new StringWrapper(other._wrapperFields.battery);
      this._wrapperFields.entries = StringWrapper.createArray();
      this._wrapperFields.entries.copy(other._wrapperFields.entries);
      this.entries = other.entries;
      this._selected_entryIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new UserDisplayRefStruct();
    this._ipIntialized = false;
    this._wrapperFields.ip = new StringWrapper();
    this._batteryIntialized = false;
    this._wrapperFields.battery = new StringWrapper();
    this._wrapperFields.entries = StringWrapper.createArray();
    for (let i = 0; i < 5; i++) {
      primitiveTypes.initString(this._refObject.entries[i]);
    }
    this._selected_entryIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new UserDisplayWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new UserDisplayArrayWrapper;
  }
  static get ArrayType() {
    return UserDisplayArrayWrapper;
  }
  static get refObjectArrayType() {
    return UserDisplayRefStructArray
  }
  static get refObjectType() {
    return UserDisplayRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._ipIntialized) {
        throw new TypeError('Invalid argument: ip in UserDisplay');
      }
      if (checkConsistency && !this._batteryIntialized) {
        throw new TypeError('Invalid argument: battery in UserDisplay');
      }
      if (checkConsistency && !this._selected_entryIntialized) {
        throw new TypeError('Invalid argument: selected_entry in UserDisplay');
      }
    if (own) {
      this._wrapperFields.ip.freeze(own, checkConsistency);
    }
    this._refObject.ip = this._wrapperFields.ip.refObject;
    if (own) {
      this._wrapperFields.battery.freeze(own, checkConsistency);
    }
    this._refObject.battery = this._wrapperFields.battery.refObject;
    for (let i = 0; i < 5; i++) {
      if (own) {
        primitiveTypes.initString(this._refObject.entries[i].ref(), own);
      } else {
        if (this._entriesArray.length === 5) {
          const value = this._entriesArray[i];
          this._refObject.entries[i].data = value;
          this._refObject.entries[i].size = Buffer.byteLength(value);
          this._refObject.entries[i].capacity = Buffer.byteLength(value) + 1;
        }
      }
    }
    // For non-typed array like int64/uint64/bool.
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._ipIntialized = true;
    this._wrapperFields.ip.data = refObject.ip.data;
    this._batteryIntialized = true;
    this._wrapperFields.battery.data = refObject.battery.data;
    for (let index = 0; index < 5; index++) {
      this._entriesArray[index] = refObject.entries[index].data;
    }
    // For non-typed array like int64/uint64/bool.
    this._selected_entryIntialized = true;
    this._refObject.selected_entry = refObject.selected_entry;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.ip);
    StringWrapper.freeStruct(refObject.battery);
    for (let i = 0; i < 5; i++) {
      StringWrapper.freeStruct(refObject.entries[i]);
    }
  }
  static destoryRawROS(msg) {
    UserDisplayWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'turtlebot4_msgs', subFolder: 'msg', interfaceName: 'UserDisplay'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get ip() {
    if (!this._ipIntialized) {
      return undefined;
    }
    return this._wrapperFields.ip.data;
  }
  set ip(value) {
    this._ipIntialized = true;
    this._wrapperFields.ip.data = value;
  }
  get battery() {
    if (!this._batteryIntialized) {
      return undefined;
    }
    return this._wrapperFields.battery.data;
  }
  set battery(value) {
    this._batteryIntialized = true;
    this._wrapperFields.battery.data = value;
  }
  get entries() {
    return this._entriesArray;
  }
  set entries(value) {
    if (value.length !== 5) {
      throw new RangeError('The length of the array must be 5.');
    }
    this._entriesArray = value;
  }
  get selected_entry() {
    if (!this._selected_entryIntialized) {
      return undefined;
    }
    return this._refObject.selected_entry;
  }
  set selected_entry(value) {
    this._selected_entryIntialized = true;
    this._refObject.selected_entry = value;
  }
  copyRefObject(refObject) {
    this._refObject = new UserDisplayRefStruct(refObject.toObject());
    this._ipIntialized = true;
    this._wrapperFields.ip.copyRefObject(this._refObject.ip);
    this._batteryIntialized = true;
    this._wrapperFields.battery.copyRefObject(this._refObject.battery);
    refObject.entries.data.length = refObject.entries.size;
    for (let index = 0; index < refObject.entries.size; index++) {
      this._entriesArray[index] = refObject.entries.data[index].data;
    }
    this._selected_entryIntialized = true;
  }
  copy(other) {
    this._refObject = new UserDisplayRefStruct(other._refObject.toObject());
    this._ipIntialized = true;
    this._wrapperFields.ip.copy(other._wrapperFields.ip);
    this._batteryIntialized = true;
    this._wrapperFields.battery.copy(other._wrapperFields.battery);
    this._entriesArray = other._entriesArray.slice();
    this._selected_entryIntialized = true;
  }
  static get classType() {
    return UserDisplayWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"ip","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"battery","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"entries","type":{"isArray":true,"arraySize":5,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"selected_entry","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"turtlebot4_msgs","type":"UserDisplay","stringUpperBound":null,"isPrimitiveType":false},"msgName":"UserDisplay"};
  }
  hasMember(name) {
    let memberNames = ["ip","battery","entries","selected_entry"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class UserDisplayArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof UserDisplayWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new UserDisplayWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to UserDisplayArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to UserDisplayArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new UserDisplayRefArray(size);
    this._refObject = new UserDisplayRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new UserDisplayWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof UserDisplayArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "UserDisplayArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      UserDisplayWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return UserDisplayWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return UserDisplayArrayWrapper;
  }
}
module.exports = UserDisplayWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "ip",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "battery",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "entries",
      "type": {
        "isArray": true,
        "arraySize": 5,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "selected_entry",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "turtlebot4_msgs",
    "type": "UserDisplay",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "UserDisplay"
}
*/
