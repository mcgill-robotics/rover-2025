// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const AckermannDriveRefStruct = StructType({
  steering_angle: primitiveTypes.float32,
  steering_angle_velocity: primitiveTypes.float32,
  speed: primitiveTypes.float32,
  acceleration: primitiveTypes.float32,
  jerk: primitiveTypes.float32,
});
const AckermannDriveRefArray = ArrayType(AckermannDriveRefStruct);
const AckermannDriveRefStructArray = StructType({
  data: AckermannDriveRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class AckermannDriveWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new AckermannDriveRefStruct(other._refObject.toObject());
      this._steering_angleIntialized = true;
      this._steering_angle_velocityIntialized = true;
      this._speedIntialized = true;
      this._accelerationIntialized = true;
      this._jerkIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new AckermannDriveRefStruct();
    this._steering_angleIntialized = false;
    this._steering_angle_velocityIntialized = false;
    this._speedIntialized = false;
    this._accelerationIntialized = false;
    this._jerkIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new AckermannDriveWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new AckermannDriveArrayWrapper;
  }
  static get ArrayType() {
    return AckermannDriveArrayWrapper;
  }
  static get refObjectArrayType() {
    return AckermannDriveRefStructArray
  }
  static get refObjectType() {
    return AckermannDriveRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._steering_angleIntialized) {
        throw new TypeError('Invalid argument: steering_angle in AckermannDrive');
      }
      if (checkConsistency && !this._steering_angle_velocityIntialized) {
        throw new TypeError('Invalid argument: steering_angle_velocity in AckermannDrive');
      }
      if (checkConsistency && !this._speedIntialized) {
        throw new TypeError('Invalid argument: speed in AckermannDrive');
      }
      if (checkConsistency && !this._accelerationIntialized) {
        throw new TypeError('Invalid argument: acceleration in AckermannDrive');
      }
      if (checkConsistency && !this._jerkIntialized) {
        throw new TypeError('Invalid argument: jerk in AckermannDrive');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._steering_angleIntialized = true;
    this._refObject.steering_angle = refObject.steering_angle;
    this._steering_angle_velocityIntialized = true;
    this._refObject.steering_angle_velocity = refObject.steering_angle_velocity;
    this._speedIntialized = true;
    this._refObject.speed = refObject.speed;
    this._accelerationIntialized = true;
    this._refObject.acceleration = refObject.acceleration;
    this._jerkIntialized = true;
    this._refObject.jerk = refObject.jerk;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    AckermannDriveWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ackermann_msgs', subFolder: 'msg', interfaceName: 'AckermannDrive'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get steering_angle() {
    if (!this._steering_angleIntialized) {
      return undefined;
    }
    return this._refObject.steering_angle;
  }
  set steering_angle(value) {
    this._steering_angleIntialized = true;
    this._refObject.steering_angle = value;
  }
  get steering_angle_velocity() {
    if (!this._steering_angle_velocityIntialized) {
      return undefined;
    }
    return this._refObject.steering_angle_velocity;
  }
  set steering_angle_velocity(value) {
    this._steering_angle_velocityIntialized = true;
    this._refObject.steering_angle_velocity = value;
  }
  get speed() {
    if (!this._speedIntialized) {
      return undefined;
    }
    return this._refObject.speed;
  }
  set speed(value) {
    this._speedIntialized = true;
    this._refObject.speed = value;
  }
  get acceleration() {
    if (!this._accelerationIntialized) {
      return undefined;
    }
    return this._refObject.acceleration;
  }
  set acceleration(value) {
    this._accelerationIntialized = true;
    this._refObject.acceleration = value;
  }
  get jerk() {
    if (!this._jerkIntialized) {
      return undefined;
    }
    return this._refObject.jerk;
  }
  set jerk(value) {
    this._jerkIntialized = true;
    this._refObject.jerk = value;
  }
  copyRefObject(refObject) {
    this._refObject = new AckermannDriveRefStruct(refObject.toObject());
    this._steering_angleIntialized = true;
    this._steering_angle_velocityIntialized = true;
    this._speedIntialized = true;
    this._accelerationIntialized = true;
    this._jerkIntialized = true;
  }
  copy(other) {
    this._refObject = new AckermannDriveRefStruct(other._refObject.toObject());
    this._steering_angleIntialized = true;
    this._steering_angle_velocityIntialized = true;
    this._speedIntialized = true;
    this._accelerationIntialized = true;
    this._jerkIntialized = true;
  }
  static get classType() {
    return AckermannDriveWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"steering_angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"steering_angle_velocity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"speed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"acceleration","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"jerk","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ackermann_msgs","type":"AckermannDrive","stringUpperBound":null,"isPrimitiveType":false},"msgName":"AckermannDrive"};
  }
  hasMember(name) {
    let memberNames = ["steering_angle","steering_angle_velocity","speed","acceleration","jerk"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class AckermannDriveArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof AckermannDriveWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new AckermannDriveWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to AckermannDriveArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to AckermannDriveArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new AckermannDriveRefArray(size);
    this._refObject = new AckermannDriveRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new AckermannDriveWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof AckermannDriveArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "AckermannDriveArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      AckermannDriveWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return AckermannDriveWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return AckermannDriveArrayWrapper;
  }
}
module.exports = AckermannDriveWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "steering_angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "steering_angle_velocity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "speed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "acceleration",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "jerk",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ackermann_msgs",
    "type": "AckermannDrive",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "AckermannDrive"
}
*/
