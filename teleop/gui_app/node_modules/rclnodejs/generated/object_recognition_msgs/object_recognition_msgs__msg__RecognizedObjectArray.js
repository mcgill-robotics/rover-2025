// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const RecognizedObjectWrapper = require('../../generated/object_recognition_msgs/object_recognition_msgs__msg__RecognizedObject.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const RecognizedObjectArrayRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  objects: RecognizedObjectWrapper.refObjectArrayType,
  cooccurrence: Float32Wrapper.refObjectArrayType,
});
const RecognizedObjectArrayRefArray = ArrayType(RecognizedObjectArrayRefStruct);
const RecognizedObjectArrayRefStructArray = StructType({
  data: RecognizedObjectArrayRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class RecognizedObjectArrayWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new RecognizedObjectArrayRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.objects = RecognizedObjectWrapper.createArray();
      this._wrapperFields.objects.copy(other._wrapperFields.objects);
      this._wrapperFields.cooccurrence = Float32Wrapper.createArray();
      this._wrapperFields.cooccurrence.copy(other._wrapperFields.cooccurrence);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new RecognizedObjectArrayRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.objects = RecognizedObjectWrapper.createArray();
    this._wrapperFields.cooccurrence = Float32Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new RecognizedObjectArrayWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new RecognizedObjectArrayArrayWrapper;
  }
  static get ArrayType() {
    return RecognizedObjectArrayArrayWrapper;
  }
  static get refObjectArrayType() {
    return RecognizedObjectArrayRefStructArray
  }
  static get refObjectType() {
    return RecognizedObjectArrayRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.objects.freeze(own, checkConsistency);
    this._refObject.objects = this._wrapperFields.objects.refObject;
    this._wrapperFields.cooccurrence.freeze(own, checkConsistency);
    this._refObject.cooccurrence = this._wrapperFields.cooccurrence.refObject;
    if (own) {
      this._wrapperFields.cooccurrence.fill(Float32Array.from([]));
      this._wrapperFields.cooccurrence.freeze(own, checkConsistency);
      this._refObject.cooccurrence = this._wrapperFields.cooccurrence.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.objects.copyRefObject(refObject.objects);
    this._wrapperFields.cooccurrence.copyRefObject(refObject.cooccurrence);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    if (refObject.objects.size != 0) {
      RecognizedObjectWrapper.ArrayType.freeArray(refObject.objects);
      if (RecognizedObjectWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.objects, RecognizedObjectWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.cooccurrence.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.cooccurrence);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.cooccurrence, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    RecognizedObjectArrayWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'object_recognition_msgs', subFolder: 'msg', interfaceName: 'RecognizedObjectArray'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get objects() {
    return this._wrapperFields.objects;
  }
  set objects(value) {
    this._wrapperFields.objects.fill(value);
  }
  get cooccurrence() {
    return this._wrapperFields['cooccurrence'].data;
  }
  set cooccurrence(value) {
    this._wrapperFields['cooccurrence'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new RecognizedObjectArrayRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.objects.copyRefObject(this._refObject.objects);
    this._wrapperFields.cooccurrence.copyRefObject(this._refObject.cooccurrence);
  }
  copy(other) {
    this._refObject = new RecognizedObjectArrayRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.objects.copy(other._wrapperFields.objects);
    this._wrapperFields.cooccurrence.copy(other._wrapperFields.cooccurrence);
  }
  static get classType() {
    return RecognizedObjectArrayWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"objects","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"object_recognition_msgs","type":"RecognizedObject","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"cooccurrence","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"object_recognition_msgs","type":"RecognizedObjectArray","stringUpperBound":null,"isPrimitiveType":false},"msgName":"RecognizedObjectArray"};
  }
  hasMember(name) {
    let memberNames = ["header","objects","cooccurrence"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class RecognizedObjectArrayArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof RecognizedObjectArrayWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new RecognizedObjectArrayWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RecognizedObjectArrayArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RecognizedObjectArrayArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new RecognizedObjectArrayRefArray(size);
    this._refObject = new RecognizedObjectArrayRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new RecognizedObjectArrayWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof RecognizedObjectArrayArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "RecognizedObjectArrayArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      RecognizedObjectArrayWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return RecognizedObjectArrayWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return RecognizedObjectArrayArrayWrapper;
  }
}
module.exports = RecognizedObjectArrayWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "objects",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "object_recognition_msgs",
        "type": "RecognizedObject",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "cooccurrence",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "object_recognition_msgs",
    "type": "RecognizedObjectArray",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "RecognizedObjectArray"
}
*/
