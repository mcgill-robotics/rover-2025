// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const ObjectTypeWrapper = require('../../generated/object_recognition_msgs/object_recognition_msgs__msg__ObjectType.js');
const PointCloud2Wrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__PointCloud2.js');
const MeshWrapper = require('../../generated/shape_msgs/shape_msgs__msg__Mesh.js');
const PointWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Point.js');
const PoseWithCovarianceStampedWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__PoseWithCovarianceStamped.js');
const RecognizedObjectRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  type: ObjectTypeWrapper.refObjectType,
  confidence: primitiveTypes.float32,
  point_clouds: PointCloud2Wrapper.refObjectArrayType,
  bounding_mesh: MeshWrapper.refObjectType,
  bounding_contours: PointWrapper.refObjectArrayType,
  pose: PoseWithCovarianceStampedWrapper.refObjectType,
});
const RecognizedObjectRefArray = ArrayType(RecognizedObjectRefStruct);
const RecognizedObjectRefStructArray = StructType({
  data: RecognizedObjectRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class RecognizedObjectWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new RecognizedObjectRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.type =  new ObjectTypeWrapper(other._wrapperFields.type);
      this._confidenceIntialized = true;
      this._wrapperFields.point_clouds = PointCloud2Wrapper.createArray();
      this._wrapperFields.point_clouds.copy(other._wrapperFields.point_clouds);
      this._wrapperFields.bounding_mesh =  new MeshWrapper(other._wrapperFields.bounding_mesh);
      this._wrapperFields.bounding_contours = PointWrapper.createArray();
      this._wrapperFields.bounding_contours.copy(other._wrapperFields.bounding_contours);
      this._wrapperFields.pose =  new PoseWithCovarianceStampedWrapper(other._wrapperFields.pose);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new RecognizedObjectRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.type = new ObjectTypeWrapper();
    this._confidenceIntialized = false;
    this._wrapperFields.point_clouds = PointCloud2Wrapper.createArray();
    this._wrapperFields.bounding_mesh = new MeshWrapper();
    this._wrapperFields.bounding_contours = PointWrapper.createArray();
    this._wrapperFields.pose = new PoseWithCovarianceStampedWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new RecognizedObjectWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new RecognizedObjectArrayWrapper;
  }
  static get ArrayType() {
    return RecognizedObjectArrayWrapper;
  }
  static get refObjectArrayType() {
    return RecognizedObjectRefStructArray
  }
  static get refObjectType() {
    return RecognizedObjectRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._confidenceIntialized) {
        throw new TypeError('Invalid argument: confidence in RecognizedObject');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.type.freeze(own, checkConsistency);
    this._refObject.type = this._wrapperFields.type.refObject;
    this._wrapperFields.point_clouds.freeze(own, checkConsistency);
    this._refObject.point_clouds = this._wrapperFields.point_clouds.refObject;
    this._wrapperFields.bounding_mesh.freeze(own, checkConsistency);
    this._refObject.bounding_mesh = this._wrapperFields.bounding_mesh.refObject;
    this._wrapperFields.bounding_contours.freeze(own, checkConsistency);
    this._refObject.bounding_contours = this._wrapperFields.bounding_contours.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.type.copyRefObject(refObject.type);
    this._confidenceIntialized = true;
    this._refObject.confidence = refObject.confidence;
    this._wrapperFields.point_clouds.copyRefObject(refObject.point_clouds);
    this._wrapperFields.bounding_mesh.copyRefObject(refObject.bounding_mesh);
    this._wrapperFields.bounding_contours.copyRefObject(refObject.bounding_contours);
    this._wrapperFields.pose.copyRefObject(refObject.pose);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    ObjectTypeWrapper.freeStruct(refObject.type);
    if (refObject.point_clouds.size != 0) {
      PointCloud2Wrapper.ArrayType.freeArray(refObject.point_clouds);
      if (PointCloud2Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.point_clouds, PointCloud2Wrapper.refObjectArrayType, 'data');
      }
    }
    MeshWrapper.freeStruct(refObject.bounding_mesh);
    if (refObject.bounding_contours.size != 0) {
      PointWrapper.ArrayType.freeArray(refObject.bounding_contours);
      if (PointWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.bounding_contours, PointWrapper.refObjectArrayType, 'data');
      }
    }
    PoseWithCovarianceStampedWrapper.freeStruct(refObject.pose);
  }
  static destoryRawROS(msg) {
    RecognizedObjectWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'object_recognition_msgs', subFolder: 'msg', interfaceName: 'RecognizedObject'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get type() {
    return this._wrapperFields.type;
  }
  set type(value) {
    if (value instanceof ObjectTypeWrapper) {
      this._wrapperFields.type.copy(value);
    } else {
      this._wrapperFields.type.copy(new ObjectTypeWrapper(value));
    }
  }
  get confidence() {
    if (!this._confidenceIntialized) {
      return undefined;
    }
    return this._refObject.confidence;
  }
  set confidence(value) {
    this._confidenceIntialized = true;
    this._refObject.confidence = value;
  }
  get point_clouds() {
    return this._wrapperFields.point_clouds;
  }
  set point_clouds(value) {
    this._wrapperFields.point_clouds.fill(value);
  }
  get bounding_mesh() {
    return this._wrapperFields.bounding_mesh;
  }
  set bounding_mesh(value) {
    if (value instanceof MeshWrapper) {
      this._wrapperFields.bounding_mesh.copy(value);
    } else {
      this._wrapperFields.bounding_mesh.copy(new MeshWrapper(value));
    }
  }
  get bounding_contours() {
    return this._wrapperFields.bounding_contours;
  }
  set bounding_contours(value) {
    this._wrapperFields.bounding_contours.fill(value);
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWithCovarianceStampedWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWithCovarianceStampedWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new RecognizedObjectRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.type.copyRefObject(this._refObject.type);
    this._confidenceIntialized = true;
    this._wrapperFields.point_clouds.copyRefObject(this._refObject.point_clouds);
    this._wrapperFields.bounding_mesh.copyRefObject(this._refObject.bounding_mesh);
    this._wrapperFields.bounding_contours.copyRefObject(this._refObject.bounding_contours);
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
  }
  copy(other) {
    this._refObject = new RecognizedObjectRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.type.copy(other._wrapperFields.type);
    this._confidenceIntialized = true;
    this._wrapperFields.point_clouds.copy(other._wrapperFields.point_clouds);
    this._wrapperFields.bounding_mesh.copy(other._wrapperFields.bounding_mesh);
    this._wrapperFields.bounding_contours.copy(other._wrapperFields.bounding_contours);
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
  }
  static get classType() {
    return RecognizedObjectWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"object_recognition_msgs","type":"ObjectType","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"confidence","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"point_clouds","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"sensor_msgs","type":"PointCloud2","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"bounding_mesh","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"shape_msgs","type":"Mesh","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"bounding_contours","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Point","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"PoseWithCovarianceStamped","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"object_recognition_msgs","type":"RecognizedObject","stringUpperBound":null,"isPrimitiveType":false},"msgName":"RecognizedObject"};
  }
  hasMember(name) {
    let memberNames = ["header","type","confidence","point_clouds","bounding_mesh","bounding_contours","pose"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class RecognizedObjectArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof RecognizedObjectWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new RecognizedObjectWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RecognizedObjectArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RecognizedObjectArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new RecognizedObjectRefArray(size);
    this._refObject = new RecognizedObjectRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new RecognizedObjectWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof RecognizedObjectArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "RecognizedObjectArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      RecognizedObjectWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return RecognizedObjectWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return RecognizedObjectArrayWrapper;
  }
}
module.exports = RecognizedObjectWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "object_recognition_msgs",
        "type": "ObjectType",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "confidence",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "point_clouds",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "sensor_msgs",
        "type": "PointCloud2",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "bounding_mesh",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "shape_msgs",
        "type": "Mesh",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "bounding_contours",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Point",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "PoseWithCovarianceStamped",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "object_recognition_msgs",
    "type": "RecognizedObject",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "RecognizedObject"
}
*/
